from rpg import enzyme
from rpg import rule
from rpg import enzymes_definition

AVAILABLE_ENZYMES_USER = []
CPT_ENZ = enzymes_definition.CPT_ENZ

### ENZYMES DECLARATION ###



# User-defined enzyme dipeptidyl-peptidase-VI
ENZ = []

K_0 = rule.Rule(0, "K", False, 0) # Never cleaves before K, except...
K_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before K, followed by A, except...
K_0A2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before K, followed by A, followed by A, except...
E_K_0A2A1M1 = rule.Rule(-1, "E", False, -1) # Never cleaves before K, followed by A, followed by A, preceded by E, except...
A_E_K_0A2A1M1M2 = rule.Rule(-2, "A", True, -1) # Always cleaves before K, followed by A, followed by A, preceded by E, preceded by A, except...
E_K_0A2A1M1.rules.append(A_E_K_0A2A1M1M2)
K_0A2A1.rules.append(E_K_0A2A1M1)
K_0A2.rules.append(K_0A2A1)
K_0.rules.append(K_0A2)
ENZ.append(K_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "dipeptidyl-peptidase-VI", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme staphopain-A
ENZ = []

R_1 = rule.Rule(0, "R", False, 1) # Never cleaves after R, except...
F_R_1M1 = rule.Rule(-1, "F", True, -1) # Always cleaves after R, preceded by F, except...
R_1.rules.append(F_R_1M1)
ENZ.append(R_1)

E_1 = rule.Rule(0, "E", False, 1) # Never cleaves after E, except...
L_E_1M1 = rule.Rule(-1, "L", True, -1) # Always cleaves after E, preceded by L, except...
E_1.rules.append(L_E_1M1)
ENZ.append(E_1)

K_1 = rule.Rule(0, "K", False, 1) # Never cleaves after K, except...
A_K_1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves after K, preceded by A, except...
G_A_K_1M1M2 = rule.Rule(-2, "G", True, -1) # Always cleaves after K, preceded by A, preceded by G, except...
A_K_1M1.rules.append(G_A_K_1M1M2)
K_1.rules.append(A_K_1M1)
ENZ.append(K_1)

A_0 = rule.Rule(0, "A", False, 0) # Never cleaves before A, except...
A_0I1 = rule.Rule(1, "I", False, -1) # Never cleaves before A, followed by I, except...
E_A_0I1M1 = rule.Rule(-1, "E", False, -1) # Never cleaves before A, followed by I, preceded by E, except...
L_E_A_0I1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by I, preceded by E, preceded by L, except...
F_L_E_A_0I1M1M2M3 = rule.Rule(-3, "F", True, -1) # Always cleaves before A, followed by I, preceded by E, preceded by L, preceded by F, except...
L_E_A_0I1M1M2.rules.append(F_L_E_A_0I1M1M2M3)
E_A_0I1M1.rules.append(L_E_A_0I1M1M2)
A_0I1.rules.append(E_A_0I1M1)
A_0.rules.append(A_0I1)
A_0M1 = rule.Rule(1, "M", False, -1) # Never cleaves before A, followed by M, except...
G_A_0M1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before A, followed by M, preceded by G, except...
L_G_A_0M1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by M, preceded by G, preceded by L, except...
V_L_G_A_0M1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by M, preceded by G, preceded by L, preceded by V, except...
L_G_A_0M1M1M2.rules.append(V_L_G_A_0M1M1M2M3)
G_A_0M1M1.rules.append(L_G_A_0M1M1M2)
A_0M1.rules.append(G_A_0M1M1)
A_0.rules.append(A_0M1)
ENZ.append(A_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "staphopain-A", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme dipeptidase-A
ENZ = []

L_0 = rule.Rule(0, "L", False, 0) # Never cleaves before L, except...
L_L_0M1 = rule.Rule(-1, "L", True, -1) # Always cleaves before L, preceded by L, except...
L_0.rules.append(L_L_0M1)
F_L_0M1 = rule.Rule(-1, "F", True, -1) # Always cleaves before L, preceded by F, except...
L_0.rules.append(F_L_0M1)
ENZ.append(L_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "dipeptidase-A", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme L,D-transpeptidase
ENZ = []

A_0 = rule.Rule(0, "A", False, 0) # Never cleaves before A, except...
K_A_0M1 = rule.Rule(-1, "K", False, -1) # Never cleaves before A, preceded by K, except...
A_K_A_0M1M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, preceded by K, preceded by A, except...
K_A_0M1.rules.append(A_K_A_0M1M3)
A_0.rules.append(K_A_0M1)
ENZ.append(A_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "L,D-transpeptidase", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme vanY-D-Ala-D-Ala-carboxypeptidase
ENZ = []

A_0 = rule.Rule(0, "A", False, 0) # Never cleaves before A, except...
A_A_0M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, preceded by A, except...
K_A_A_0M1M2 = rule.Rule(-2, "K", True, -1) # Always cleaves before A, preceded by A, preceded by K, except...
E_K_A_A_0M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before A, preceded by A, preceded by K, preceded by E, except...
K_A_A_0M1M2.rules.append(E_K_A_A_0M1M2M3)
A_A_0M1.rules.append(K_A_A_0M1M2)
A_0.rules.append(A_A_0M1)
K_A_0M1 = rule.Rule(-1, "K", False, -1) # Never cleaves before A, preceded by K, except...
A_K_A_0M1M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, preceded by K, preceded by A, except...
K_A_0M1.rules.append(A_K_A_0M1M3)
A_0.rules.append(K_A_0M1)
ENZ.append(A_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "vanY-D-Ala-D-Ala-carboxypeptidase", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme L-Ala-D-Glu-peptidase
ENZ = []

E_0 = rule.Rule(0, "E", False, 0) # Never cleaves before E, except...
A_E_0M1 = rule.Rule(-1, "A", True, -1) # Always cleaves before E, preceded by A, except...
E_0.rules.append(A_E_0M1)
ENZ.append(E_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "L-Ala-D-Glu-peptidase", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme lysostaphin
ENZ = []

G_0 = rule.Rule(0, "G", False, 0) # Never cleaves before G, except...
G_0A1 = rule.Rule(1, "A", False, -1) # Never cleaves before G, followed by A, except...
G_G_0A1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before G, followed by A, preceded by G, except...
G_G_G_0A1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before G, followed by A, preceded by G, preceded by G, except...
G_G_G_G_0A1M1M2M3 = rule.Rule(-3, "G", True, -1) # Always cleaves before G, followed by A, preceded by G, preceded by G, preceded by G, except...
G_G_G_0A1M1M2.rules.append(G_G_G_G_0A1M1M2M3)
G_G_0A1M1.rules.append(G_G_G_0A1M1M2)
G_0A1.rules.append(G_G_0A1M1)
G_0.rules.append(G_0A1)
G_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before G, followed by G, except...
G_0G2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before G, followed by G, followed by G, except...
G_G_0G2G1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before G, followed by G, followed by G, preceded by G, except...
G_G_G_0G2G1M1M2 = rule.Rule(-2, "G", True, -1) # Always cleaves before G, followed by G, followed by G, preceded by G, preceded by G, except...
G_G_0G2G1M1.rules.append(G_G_G_0G2G1M1M2)
K_G_G_0G2G1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before G, followed by G, followed by G, preceded by G, preceded by K, except...
Q_K_G_G_0G2G1M1M2M3 = rule.Rule(-3, "Q", True, -1) # Always cleaves before G, followed by G, followed by G, preceded by G, preceded by K, preceded by Q, except...
K_G_G_0G2G1M1M2.rules.append(Q_K_G_G_0G2G1M1M2M3)
G_G_0G2G1M1.rules.append(K_G_G_0G2G1M1M2)
G_0G2G1.rules.append(G_G_0G2G1M1)
G_0G2.rules.append(G_0G2G1)
G_0.rules.append(G_0G2)
G_0G1 = rule.Rule(1, "G", False, -1) # Never cleaves before G, followed by G, except...
G_G_0G1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before G, followed by G, preceded by G, except...
G_G_G_0G1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before G, followed by G, preceded by G, preceded by G, except...
G_G_G_G_0G1M1M2M3 = rule.Rule(-3, "G", True, -1) # Always cleaves before G, followed by G, preceded by G, preceded by G, preceded by G, except...
G_G_G_0G1M1M2.rules.append(G_G_G_G_0G1M1M2M3)
G_G_0G1M1.rules.append(G_G_G_0G1M1M2)
G_0G1.rules.append(G_G_0G1M1)
G_0G1A2 = rule.Rule(2, "A", True, -1) # Always cleaves before G, followed by G, followed by A, except...
G_0G1A2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before G, followed by G, followed by A, followed by G, except...
G_G_0G1A2G1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before G, followed by G, followed by A, followed by G, preceded by G, except...
G_G_G_0G1A2G1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before G, followed by G, followed by A, followed by G, preceded by G, preceded by G, except...
K_G_G_G_0G1A2G1M1M2M3 = rule.Rule(-3, "K", True, -1) # Always cleaves before G, followed by G, followed by A, followed by G, preceded by G, preceded by G, preceded by K, except...
G_G_G_0G1A2G1M1M2.rules.append(K_G_G_G_0G1A2G1M1M2M3)
G_G_0G1A2G1M1.rules.append(G_G_G_0G1A2G1M1M2)
G_0G1A2G1.rules.append(G_G_0G1A2G1M1)
G_0G1A2.rules.append(G_0G1A2G1)
G_0G1.rules.append(G_0G1A2)
G_0G1G2 = rule.Rule(2, "G", True, -1) # Always cleaves before G, followed by G, followed by G, except...
G_0G1.rules.append(G_0G1G2)
G_0.rules.append(G_0G1)
ENZ.append(G_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "lysostaphin", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme IgA1-specific-metallopeptidase
ENZ = []

T_0 = rule.Rule(0, "T", False, 0) # Never cleaves before T, except...
T_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before T, followed by S, except...
T_0S2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before T, followed by S, followed by P, except...
P_T_0S2P1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before T, followed by S, followed by P, preceded by P, except...
P_P_T_0S2P1M1M2 = rule.Rule(-2, "P", False, -1) # Never cleaves before T, followed by S, followed by P, preceded by P, preceded by P, except...
T_P_P_T_0S2P1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before T, followed by S, followed by P, preceded by P, preceded by P, preceded by T, except...
P_P_T_0S2P1M1M2.rules.append(T_P_P_T_0S2P1M1M2M3)
P_T_0S2P1M1.rules.append(P_P_T_0S2P1M1M2)
T_0S2P1.rules.append(P_T_0S2P1M1)
T_0S2.rules.append(T_0S2P1)
T_0.rules.append(T_0S2)
ENZ.append(T_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "IgA1-specific-metallopeptidase", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme peptidase-T
ENZ = []

A_0 = rule.Rule(0, "A", False, 0) # Never cleaves before A, except...
A_0A1 = rule.Rule(1, "A", False, -1) # Never cleaves before A, followed by A, except...
A_A_0A1M1 = rule.Rule(-1, "A", True, -1) # Always cleaves before A, followed by A, preceded by A, except...
A_0A1.rules.append(A_A_0A1M1)
G_A_0A1M1 = rule.Rule(-1, "G", True, -1) # Always cleaves before A, followed by A, preceded by G, except...
A_0A1.rules.append(G_A_0A1M1)
A_0.rules.append(A_0A1)
A_0G1 = rule.Rule(1, "G", False, -1) # Never cleaves before A, followed by G, except...
A_A_0G1M1 = rule.Rule(-1, "A", True, -1) # Always cleaves before A, followed by G, preceded by A, except...
A_0G1.rules.append(A_A_0G1M1)
A_0.rules.append(A_0G1)
A_0Y1 = rule.Rule(1, "Y", False, -1) # Never cleaves before A, followed by Y, except...
G_A_0Y1M1 = rule.Rule(-1, "G", True, -1) # Always cleaves before A, followed by Y, preceded by G, except...
A_0Y1.rules.append(G_A_0Y1M1)
A_0.rules.append(A_0Y1)
A_0S1 = rule.Rule(1, "S", False, -1) # Never cleaves before A, followed by S, except...
M_A_0S1M1 = rule.Rule(-1, "M", True, -1) # Always cleaves before A, followed by S, preceded by M, except...
A_0S1.rules.append(M_A_0S1M1)
A_0.rules.append(A_0S1)
ENZ.append(A_0)

G_0 = rule.Rule(0, "G", False, 0) # Never cleaves before G, except...
G_0F1 = rule.Rule(1, "F", False, -1) # Never cleaves before G, followed by F, except...
G_G_0F1M1 = rule.Rule(-1, "G", True, -1) # Always cleaves before G, followed by F, preceded by G, except...
G_0F1.rules.append(G_G_0F1M1)
G_0.rules.append(G_0F1)
G_0G1 = rule.Rule(1, "G", False, -1) # Never cleaves before G, followed by G, except...
L_G_0G1M1 = rule.Rule(-1, "L", True, -1) # Always cleaves before G, followed by G, preceded by L, except...
G_0G1.rules.append(L_G_0G1M1)
M_G_0G1M1 = rule.Rule(-1, "M", True, -1) # Always cleaves before G, followed by G, preceded by M, except...
G_0G1.rules.append(M_G_0G1M1)
F_G_0G1M1 = rule.Rule(-1, "F", True, -1) # Always cleaves before G, followed by G, preceded by F, except...
G_0G1.rules.append(F_G_0G1M1)
G_0.rules.append(G_0G1)
G_0M1 = rule.Rule(1, "M", False, -1) # Never cleaves before G, followed by M, except...
M_G_0M1M1 = rule.Rule(-1, "M", True, -1) # Always cleaves before G, followed by M, preceded by M, except...
G_0M1.rules.append(M_G_0M1M1)
G_0.rules.append(G_0M1)
ENZ.append(G_0)

L_0 = rule.Rule(0, "L", False, 0) # Never cleaves before L, except...
L_0L1 = rule.Rule(1, "L", False, -1) # Never cleaves before L, followed by L, except...
L_L_0L1M1 = rule.Rule(-1, "L", True, -1) # Always cleaves before L, followed by L, preceded by L, except...
L_0L1.rules.append(L_L_0L1M1)
L_0.rules.append(L_0L1)
ENZ.append(L_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "peptidase-T", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme DegP-peptidase
ENZ = []

V_1 = rule.Rule(0, "V", False, 1) # Never cleaves after V, except...
L_V_1M1 = rule.Rule(-1, "L", False, -1) # Never cleaves after V, preceded by L, except...
K_L_V_1M1M2 = rule.Rule(-2, "K", True, -1) # Always cleaves after V, preceded by L, preceded by K, except...
L_V_1M1.rules.append(K_L_V_1M1M2)
V_1.rules.append(L_V_1M1)
P_V_1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves after V, preceded by P, except...
S_P_V_1M1M2 = rule.Rule(-2, "S", True, -1) # Always cleaves after V, preceded by P, preceded by S, except...
P_V_1M1.rules.append(S_P_V_1M1M2)
V_1.rules.append(P_V_1M1)
G_V_1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves after V, preceded by G, except...
K_G_V_1M1M2 = rule.Rule(-2, "K", True, -1) # Always cleaves after V, preceded by G, preceded by K, except...
G_V_1M1.rules.append(K_G_V_1M1M2)
V_1.rules.append(G_V_1M1)
ENZ.append(V_1)

A_0 = rule.Rule(0, "A", False, 0) # Never cleaves before A, except...
A_0Y1 = rule.Rule(1, "Y", False, -1) # Never cleaves before A, followed by Y, except...
V_A_0Y1M1 = rule.Rule(-1, "V", False, -1) # Never cleaves before A, followed by Y, preceded by V, except...
R_V_A_0Y1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before A, followed by Y, preceded by V, preceded by R, except...
Q_R_V_A_0Y1M1M2M3 = rule.Rule(-3, "Q", True, -1) # Always cleaves before A, followed by Y, preceded by V, preceded by R, preceded by Q, except...
R_V_A_0Y1M1M2.rules.append(Q_R_V_A_0Y1M1M2M3)
V_A_0Y1M1.rules.append(R_V_A_0Y1M1M2)
A_0Y1.rules.append(V_A_0Y1M1)
A_0.rules.append(A_0Y1)
A_0K2 = rule.Rule(2, "K", False, -1) # Never cleaves before A, followed by K, except...
A_0K2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before A, followed by K, followed by D, except...
V_A_0K2D1M1 = rule.Rule(-1, "V", False, -1) # Never cleaves before A, followed by K, followed by D, preceded by V, except...
S_V_A_0K2D1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before A, followed by K, followed by D, preceded by V, preceded by S, except...
E_S_V_A_0K2D1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before A, followed by K, followed by D, preceded by V, preceded by S, preceded by E, except...
S_V_A_0K2D1M1M2.rules.append(E_S_V_A_0K2D1M1M2M3)
V_A_0K2D1M1.rules.append(S_V_A_0K2D1M1M2)
A_0K2D1.rules.append(V_A_0K2D1M1)
A_0K2.rules.append(A_0K2D1)
A_0.rules.append(A_0K2)
A_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before A, followed by E, except...
A_0E2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before A, followed by E, followed by E, except...
V_A_0E2E1M1 = rule.Rule(-1, "V", False, -1) # Never cleaves before A, followed by E, followed by E, preceded by V, except...
K_V_A_0E2E1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by E, followed by E, preceded by V, preceded by K, except...
R_K_V_A_0E2E1M1M2M3 = rule.Rule(-3, "R", True, -1) # Always cleaves before A, followed by E, followed by E, preceded by V, preceded by K, preceded by R, except...
K_V_A_0E2E1M1M2.rules.append(R_K_V_A_0E2E1M1M2M3)
V_A_0E2E1M1.rules.append(K_V_A_0E2E1M1M2)
A_0E2E1.rules.append(V_A_0E2E1M1)
A_0E2.rules.append(A_0E2E1)
A_0.rules.append(A_0E2)
ENZ.append(A_0)

Q_0 = rule.Rule(0, "Q", False, 0) # Never cleaves before Q, except...
Q_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before Q, followed by G, except...
Q_0G2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before Q, followed by G, followed by G, except...
C_Q_0G2G1M1 = rule.Rule(-1, "C", False, -1) # Never cleaves before Q, followed by G, followed by G, preceded by C, except...
F_C_Q_0G2G1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before Q, followed by G, followed by G, preceded by C, preceded by F, except...
P_F_C_Q_0G2G1M1M2M3 = rule.Rule(-3, "P", True, -1) # Always cleaves before Q, followed by G, followed by G, preceded by C, preceded by F, preceded by P, except...
F_C_Q_0G2G1M1M2.rules.append(P_F_C_Q_0G2G1M1M2M3)
C_Q_0G2G1M1.rules.append(F_C_Q_0G2G1M1M2)
Q_0G2G1.rules.append(C_Q_0G2G1M1)
Q_0G2.rules.append(Q_0G2G1)
Q_0.rules.append(Q_0G2)
ENZ.append(Q_0)

Y_0 = rule.Rule(0, "Y", False, 0) # Never cleaves before Y, except...
Y_0M2 = rule.Rule(2, "M", False, -1) # Never cleaves before Y, followed by M, except...
Y_0M2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before Y, followed by M, followed by E, except...
I_Y_0M2E1M1 = rule.Rule(-1, "I", False, -1) # Never cleaves before Y, followed by M, followed by E, preceded by I, except...
E_I_Y_0M2E1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before Y, followed by M, followed by E, preceded by I, preceded by E, except...
R_E_I_Y_0M2E1M1M2M3 = rule.Rule(-3, "R", True, -1) # Always cleaves before Y, followed by M, followed by E, preceded by I, preceded by E, preceded by R, except...
E_I_Y_0M2E1M1M2.rules.append(R_E_I_Y_0M2E1M1M2M3)
I_Y_0M2E1M1.rules.append(E_I_Y_0M2E1M1M2)
Y_0M2E1.rules.append(I_Y_0M2E1M1)
Y_0M2.rules.append(Y_0M2E1)
Y_0.rules.append(Y_0M2)
ENZ.append(Y_0)

S_0 = rule.Rule(0, "S", False, 0) # Never cleaves before S, except...
S_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before S, followed by E, except...
S_0E2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before S, followed by E, followed by V, except...
V_S_0E2V1M1 = rule.Rule(-1, "V", False, -1) # Never cleaves before S, followed by E, followed by V, preceded by V, except...
K_V_S_0E2V1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before S, followed by E, followed by V, preceded by V, preceded by K, except...
L_K_V_S_0E2V1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before S, followed by E, followed by V, preceded by V, preceded by K, preceded by L, except...
K_V_S_0E2V1M1M2.rules.append(L_K_V_S_0E2V1M1M2M3)
V_S_0E2V1M1.rules.append(K_V_S_0E2V1M1M2)
S_0E2V1.rules.append(V_S_0E2V1M1)
S_0E2.rules.append(S_0E2V1)
S_0.rules.append(S_0E2)
S_0Q2 = rule.Rule(2, "Q", False, -1) # Never cleaves before S, followed by Q, except...
S_0Q2M1 = rule.Rule(1, "M", False, -1) # Never cleaves before S, followed by Q, followed by M, except...
V_S_0Q2M1M1 = rule.Rule(-1, "V", False, -1) # Never cleaves before S, followed by Q, followed by M, preceded by V, except...
A_V_S_0Q2M1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before S, followed by Q, followed by M, preceded by V, preceded by A, except...
E_A_V_S_0Q2M1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before S, followed by Q, followed by M, preceded by V, preceded by A, preceded by E, except...
A_V_S_0Q2M1M1M2.rules.append(E_A_V_S_0Q2M1M1M2M3)
V_S_0Q2M1M1.rules.append(A_V_S_0Q2M1M1M2)
S_0Q2M1.rules.append(V_S_0Q2M1M1)
S_0Q2.rules.append(S_0Q2M1)
S_0.rules.append(S_0Q2)
ENZ.append(S_0)

R_0 = rule.Rule(0, "R", False, 0) # Never cleaves before R, except...
R_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before R, followed by V, except...
R_0V2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before R, followed by V, followed by K, except...
V_R_0V2K1M1 = rule.Rule(-1, "V", False, -1) # Never cleaves before R, followed by V, followed by K, preceded by V, except...
L_V_R_0V2K1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before R, followed by V, followed by K, preceded by V, preceded by L, except...
D_L_V_R_0V2K1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before R, followed by V, followed by K, preceded by V, preceded by L, preceded by D, except...
L_V_R_0V2K1M1M2.rules.append(D_L_V_R_0V2K1M1M2M3)
V_R_0V2K1M1.rules.append(L_V_R_0V2K1M1M2)
R_0V2K1.rules.append(V_R_0V2K1M1)
R_0V2.rules.append(R_0V2K1)
R_0.rules.append(R_0V2)
ENZ.append(R_0)

M_0 = rule.Rule(0, "M", False, 0) # Never cleaves before M, except...
M_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before M, followed by S, except...
M_0S2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before M, followed by S, followed by E, except...
V_M_0S2E1M1 = rule.Rule(-1, "V", False, -1) # Never cleaves before M, followed by S, followed by E, preceded by V, except...
R_V_M_0S2E1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before M, followed by S, followed by E, preceded by V, preceded by R, except...
Q_R_V_M_0S2E1M1M2M3 = rule.Rule(-3, "Q", True, -1) # Always cleaves before M, followed by S, followed by E, preceded by V, preceded by R, preceded by Q, except...
R_V_M_0S2E1M1M2.rules.append(Q_R_V_M_0S2E1M1M2M3)
V_M_0S2E1M1.rules.append(R_V_M_0S2E1M1M2)
M_0S2E1.rules.append(V_M_0S2E1M1)
M_0S2.rules.append(M_0S2E1)
M_0.rules.append(M_0S2)
ENZ.append(M_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "DegP-peptidase", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme serralysin
ENZ = []

A_0 = rule.Rule(0, "A", False, 0) # Never cleaves before A, except...
A_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before A, followed by V, except...
A_0V2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before A, followed by V, followed by L, except...
S_A_0V2L1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before A, followed by V, followed by L, preceded by S, except...
L_S_A_0V2L1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by V, followed by L, preceded by S, preceded by L, except...
L_L_S_A_0V2L1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before A, followed by V, followed by L, preceded by S, preceded by L, preceded by L, except...
L_S_A_0V2L1M1M2.rules.append(L_L_S_A_0V2L1M1M2M3)
S_A_0V2L1M1.rules.append(L_S_A_0V2L1M1M2)
A_0V2L1.rules.append(S_A_0V2L1M1)
A_0V2.rules.append(A_0V2L1)
A_0.rules.append(A_0V2)
ENZ.append(A_0)

S_0 = rule.Rule(0, "S", False, 0) # Never cleaves before S, except...
S_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before S, followed by P, except...
S_0P2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before S, followed by P, followed by I, except...
M_S_0P2I1M1 = rule.Rule(-1, "M", False, -1) # Never cleaves before S, followed by P, followed by I, preceded by M, except...
P_M_S_0P2I1M1M2 = rule.Rule(-2, "P", False, -1) # Never cleaves before S, followed by P, followed by I, preceded by M, preceded by P, except...
I_P_M_S_0P2I1M1M2M3 = rule.Rule(-3, "I", True, -1) # Always cleaves before S, followed by P, followed by I, preceded by M, preceded by P, preceded by I, except...
P_M_S_0P2I1M1M2.rules.append(I_P_M_S_0P2I1M1M2M3)
M_S_0P2I1M1.rules.append(P_M_S_0P2I1M1M2)
S_0P2I1.rules.append(M_S_0P2I1M1)
S_0P2.rules.append(S_0P2I1)
S_0.rules.append(S_0P2)
ENZ.append(S_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "serralysin", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme subtilisin-Carlsberg
ENZ = []

A_1 = rule.Rule(0, "A", False, 1) # Never cleaves after A, except...
P_A_1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves after A, preceded by P, except...
T_P_A_1M1M2 = rule.Rule(-2, "T", True, -1) # Always cleaves after A, preceded by P, preceded by T, except...
P_A_1M1.rules.append(T_P_A_1M1M2)
A_1.rules.append(P_A_1M1)
H_A_1M1 = rule.Rule(-1, "H", False, -1) # Never cleaves after A, preceded by H, except...
G_H_A_1M1M2 = rule.Rule(-2, "G", True, -1) # Always cleaves after A, preceded by H, preceded by G, except...
H_A_1M1.rules.append(G_H_A_1M1M2)
A_1.rules.append(H_A_1M1)
A_A_1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves after A, preceded by A, except...
A_A_A_1M1M2 = rule.Rule(-2, "A", True, -1) # Always cleaves after A, preceded by A, preceded by A, except...
A_A_1M1.rules.append(A_A_A_1M1M2)
A_1.rules.append(A_A_1M1)
ENZ.append(A_1)

V_1 = rule.Rule(0, "V", False, 1) # Never cleaves after V, except...
P_V_1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves after V, preceded by P, except...
T_P_V_1M1M2 = rule.Rule(-2, "T", True, -1) # Always cleaves after V, preceded by P, preceded by T, except...
P_V_1M1.rules.append(T_P_V_1M1M2)
V_1.rules.append(P_V_1M1)
ENZ.append(V_1)

F_1 = rule.Rule(0, "F", False, 1) # Never cleaves after F, except...
P_F_1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves after F, preceded by P, except...
A_P_F_1M1M2 = rule.Rule(-2, "A", True, -1) # Always cleaves after F, preceded by P, preceded by A, except...
P_F_1M1.rules.append(A_P_F_1M1M2)
F_1.rules.append(P_F_1M1)
ENZ.append(F_1)

L_1 = rule.Rule(0, "L", False, 1) # Never cleaves after L, except...
G_L_1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves after L, preceded by G, except...
G_G_L_1M1M2 = rule.Rule(-2, "G", True, -1) # Always cleaves after L, preceded by G, preceded by G, except...
G_L_1M1.rules.append(G_G_L_1M1M2)
L_1.rules.append(G_L_1M1)
ENZ.append(L_1)

A_0 = rule.Rule(0, "A", False, 0) # Never cleaves before A, except...
K_A_0M1 = rule.Rule(-1, "K", False, -1) # Never cleaves before A, preceded by K, except...
P_K_A_0M1M2 = rule.Rule(-2, "P", False, -1) # Never cleaves before A, preceded by K, preceded by P, except...
T_P_K_A_0M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before A, preceded by K, preceded by P, preceded by T, except...
P_K_A_0M1M2.rules.append(T_P_K_A_0M1M2M3)
K_A_0M1.rules.append(P_K_A_0M1M2)
A_0.rules.append(K_A_0M1)
A_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before A, followed by G, except...
A_0G2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before A, followed by G, followed by T, except...
V_A_0G2T1M1 = rule.Rule(-1, "V", False, -1) # Never cleaves before A, followed by G, followed by T, preceded by V, except...
I_V_A_0G2T1M1M2 = rule.Rule(-2, "I", False, -1) # Never cleaves before A, followed by G, followed by T, preceded by V, preceded by I, except...
S_I_V_A_0G2T1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by G, followed by T, preceded by V, preceded by I, preceded by S, except...
I_V_A_0G2T1M1M2.rules.append(S_I_V_A_0G2T1M1M2M3)
V_A_0G2T1M1.rules.append(I_V_A_0G2T1M1M2)
A_0G2T1.rules.append(V_A_0G2T1M1)
A_0G2.rules.append(A_0G2T1)
A_0.rules.append(A_0G2)
A_0Y2 = rule.Rule(2, "Y", False, -1) # Never cleaves before A, followed by Y, except...
A_0Y2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before A, followed by Y, followed by L, except...
E_A_0Y2L1M1 = rule.Rule(-1, "E", False, -1) # Never cleaves before A, followed by Y, followed by L, preceded by E, except...
V_E_A_0Y2L1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before A, followed by Y, followed by L, preceded by E, preceded by V, except...
L_V_E_A_0Y2L1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before A, followed by Y, followed by L, preceded by E, preceded by V, preceded by L, except...
V_E_A_0Y2L1M1M2.rules.append(L_V_E_A_0Y2L1M1M2M3)
E_A_0Y2L1M1.rules.append(V_E_A_0Y2L1M1M2)
A_0Y2L1.rules.append(E_A_0Y2L1M1)
A_0Y2.rules.append(A_0Y2L1)
A_0.rules.append(A_0Y2)
A_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before A, followed by S, except...
A_0S2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before A, followed by S, followed by I, except...
L_A_0S2I1M1 = rule.Rule(-1, "L", False, -1) # Never cleaves before A, followed by S, followed by I, preceded by L, except...
G_L_A_0S2I1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before A, followed by S, followed by I, preceded by L, preceded by G, except...
H_G_L_A_0S2I1M1M2M3 = rule.Rule(-3, "H", True, -1) # Always cleaves before A, followed by S, followed by I, preceded by L, preceded by G, preceded by H, except...
G_L_A_0S2I1M1M2.rules.append(H_G_L_A_0S2I1M1M2M3)
L_A_0S2I1M1.rules.append(G_L_A_0S2I1M1M2)
A_0S2I1.rules.append(L_A_0S2I1M1)
A_0S2.rules.append(A_0S2I1)
A_0S2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before A, followed by S, followed by Q, except...
L_A_0S2Q1M1 = rule.Rule(-1, "L", False, -1) # Never cleaves before A, followed by S, followed by Q, preceded by L, except...
P_L_A_0S2Q1M1M2 = rule.Rule(-2, "P", False, -1) # Never cleaves before A, followed by S, followed by Q, preceded by L, preceded by P, except...
K_P_L_A_0S2Q1M1M2M3 = rule.Rule(-3, "K", True, -1) # Always cleaves before A, followed by S, followed by Q, preceded by L, preceded by P, preceded by K, except...
P_L_A_0S2Q1M1M2.rules.append(K_P_L_A_0S2Q1M1M2M3)
L_A_0S2Q1M1.rules.append(P_L_A_0S2Q1M1M2)
A_0S2Q1.rules.append(L_A_0S2Q1M1)
A_0S2.rules.append(A_0S2Q1)
A_0S2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before A, followed by S, followed by S, except...
A_A_0S2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by S, followed by S, preceded by A, except...
S_A_A_0S2S1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before A, followed by S, followed by S, preceded by A, preceded by S, except...
T_S_A_A_0S2S1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before A, followed by S, followed by S, preceded by A, preceded by S, preceded by T, except...
S_A_A_0S2S1M1M2.rules.append(T_S_A_A_0S2S1M1M2M3)
A_A_0S2S1M1.rules.append(S_A_A_0S2S1M1M2)
A_0S2S1.rules.append(A_A_0S2S1M1)
A_0S2.rules.append(A_0S2S1)
A_0S2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before A, followed by S, followed by A, except...
S_A_0S2A1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before A, followed by S, followed by A, preceded by S, except...
T_S_A_0S2A1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before A, followed by S, followed by A, preceded by S, preceded by T, except...
S_T_S_A_0S2A1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by S, followed by A, preceded by S, preceded by T, preceded by S, except...
T_S_A_0S2A1M1M2.rules.append(S_T_S_A_0S2A1M1M2M3)
S_A_0S2A1M1.rules.append(T_S_A_0S2A1M1M2)
A_0S2A1.rules.append(S_A_0S2A1M1)
A_0S2.rules.append(A_0S2A1)
A_0.rules.append(A_0S2)
A_0K2 = rule.Rule(2, "K", False, -1) # Never cleaves before A, followed by K, except...
A_0K2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before A, followed by K, followed by T, except...
H_A_0K2T1M1 = rule.Rule(-1, "H", False, -1) # Never cleaves before A, followed by K, followed by T, preceded by H, except...
S_H_A_0K2T1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before A, followed by K, followed by T, preceded by H, preceded by S, except...
Q_S_H_A_0K2T1M1M2M3 = rule.Rule(-3, "Q", True, -1) # Always cleaves before A, followed by K, followed by T, preceded by H, preceded by S, preceded by Q, except...
S_H_A_0K2T1M1M2.rules.append(Q_S_H_A_0K2T1M1M2M3)
H_A_0K2T1M1.rules.append(S_H_A_0K2T1M1M2)
A_0K2T1.rules.append(H_A_0K2T1M1)
A_0K2.rules.append(A_0K2T1)
A_0.rules.append(A_0K2)
ENZ.append(A_0)

H_0 = rule.Rule(0, "H", False, 0) # Never cleaves before H, except...
H_0L1 = rule.Rule(1, "L", False, -1) # Never cleaves before H, followed by L, except...
Q_H_0L1M1 = rule.Rule(-1, "Q", False, -1) # Never cleaves before H, followed by L, preceded by Q, except...
N_Q_H_0L1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before H, followed by L, preceded by Q, preceded by N, except...
V_N_Q_H_0L1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before H, followed by L, preceded by Q, preceded by N, preceded by V, except...
N_Q_H_0L1M1M2.rules.append(V_N_Q_H_0L1M1M2M3)
Q_H_0L1M1.rules.append(N_Q_H_0L1M1M2)
H_0L1.rules.append(Q_H_0L1M1)
H_0L1V2 = rule.Rule(2, "V", True, -1) # Always cleaves before H, followed by L, followed by V, except...
H_0L1.rules.append(H_0L1V2)
H_0.rules.append(H_0L1)
ENZ.append(H_0)

L_0 = rule.Rule(0, "L", False, 0) # Never cleaves before L, except...
L_0H2 = rule.Rule(2, "H", False, -1) # Never cleaves before L, followed by H, except...
L_0H2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before L, followed by H, followed by V, except...
R_L_0H2V1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before L, followed by H, followed by V, preceded by R, except...
A_R_L_0H2V1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before L, followed by H, followed by V, preceded by R, preceded by A, except...
H_A_R_L_0H2V1M1M2M3 = rule.Rule(-3, "H", True, -1) # Always cleaves before L, followed by H, followed by V, preceded by R, preceded by A, preceded by H, except...
A_R_L_0H2V1M1M2.rules.append(H_A_R_L_0H2V1M1M2M3)
R_L_0H2V1M1.rules.append(A_R_L_0H2V1M1M2)
L_0H2V1.rules.append(R_L_0H2V1M1)
L_0H2.rules.append(L_0H2V1)
L_0.rules.append(L_0H2)
L_0K2 = rule.Rule(2, "K", False, -1) # Never cleaves before L, followed by K, except...
L_0K2R1 = rule.Rule(1, "R", False, -1) # Never cleaves before L, followed by K, followed by R, except...
V_L_0K2R1M1 = rule.Rule(-1, "V", False, -1) # Never cleaves before L, followed by K, followed by R, preceded by V, except...
A_V_L_0K2R1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before L, followed by K, followed by R, preceded by V, preceded by A, except...
H_A_V_L_0K2R1M1M2M3 = rule.Rule(-3, "H", True, -1) # Always cleaves before L, followed by K, followed by R, preceded by V, preceded by A, preceded by H, except...
A_V_L_0K2R1M1M2.rules.append(H_A_V_L_0K2R1M1M2M3)
V_L_0K2R1M1.rules.append(A_V_L_0K2R1M1M2)
L_0K2R1.rules.append(V_L_0K2R1M1)
L_0K2.rules.append(L_0K2R1)
L_0.rules.append(L_0K2)
L_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before L, followed by G, except...
L_0G2C1 = rule.Rule(1, "C", False, -1) # Never cleaves before L, followed by G, followed by C, except...
H_L_0G2C1M1 = rule.Rule(-1, "H", False, -1) # Never cleaves before L, followed by G, followed by C, preceded by H, except...
Q_H_L_0G2C1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before L, followed by G, followed by C, preceded by H, preceded by Q, except...
N_Q_H_L_0G2C1M1M2M3 = rule.Rule(-3, "N", True, -1) # Always cleaves before L, followed by G, followed by C, preceded by H, preceded by Q, preceded by N, except...
Q_H_L_0G2C1M1M2.rules.append(N_Q_H_L_0G2C1M1M2M3)
H_L_0G2C1M1.rules.append(Q_H_L_0G2C1M1M2)
L_0G2C1.rules.append(H_L_0G2C1M1)
L_0G2.rules.append(L_0G2C1)
L_0.rules.append(L_0G2)
L_0C2 = rule.Rule(2, "C", False, -1) # Never cleaves before L, followed by C, except...
L_0C2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before L, followed by C, followed by V, except...
Y_L_0C2V1M1 = rule.Rule(-1, "Y", False, -1) # Never cleaves before L, followed by C, followed by V, preceded by Y, except...
L_Y_L_0C2V1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before L, followed by C, followed by V, preceded by Y, preceded by L, except...
A_L_Y_L_0C2V1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before L, followed by C, followed by V, preceded by Y, preceded by L, preceded by A, except...
L_Y_L_0C2V1M1M2.rules.append(A_L_Y_L_0C2V1M1M2M3)
Y_L_0C2V1M1.rules.append(L_Y_L_0C2V1M1M2)
L_0C2V1.rules.append(Y_L_0C2V1M1)
L_0C2.rules.append(L_0C2V1)
L_0.rules.append(L_0C2)
ENZ.append(L_0)

V_0 = rule.Rule(0, "V", False, 0) # Never cleaves before V, except...
V_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before V, followed by V, except...
V_0V2H1 = rule.Rule(1, "H", False, -1) # Never cleaves before V, followed by V, followed by H, except...
L_V_0V2H1M1 = rule.Rule(-1, "L", False, -1) # Never cleaves before V, followed by V, followed by H, preceded by L, except...
R_L_V_0V2H1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before V, followed by V, followed by H, preceded by L, preceded by R, except...
A_R_L_V_0V2H1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before V, followed by V, followed by H, preceded by L, preceded by R, preceded by A, except...
R_L_V_0V2H1M1M2.rules.append(A_R_L_V_0V2H1M1M2M3)
L_V_0V2H1M1.rules.append(R_L_V_0V2H1M1M2)
V_0V2H1.rules.append(L_V_0V2H1M1)
V_0V2.rules.append(V_0V2H1)
V_0.rules.append(V_0V2)
V_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before V, followed by P, except...
V_0P2R1 = rule.Rule(1, "R", False, -1) # Never cleaves before V, followed by P, followed by R, except...
Y_V_0P2R1M1 = rule.Rule(-1, "Y", False, -1) # Never cleaves before V, followed by P, followed by R, preceded by Y, except...
V_Y_V_0P2R1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before V, followed by P, followed by R, preceded by Y, preceded by V, except...
K_V_Y_V_0P2R1M1M2M3 = rule.Rule(-3, "K", True, -1) # Always cleaves before V, followed by P, followed by R, preceded by Y, preceded by V, preceded by K, except...
V_Y_V_0P2R1M1M2.rules.append(K_V_Y_V_0P2R1M1M2M3)
Y_V_0P2R1M1.rules.append(V_Y_V_0P2R1M1M2)
V_0P2R1.rules.append(Y_V_0P2R1M1)
V_0P2.rules.append(V_0P2R1)
V_0.rules.append(V_0P2)
V_0R2 = rule.Rule(2, "R", False, -1) # Never cleaves before V, followed by R, except...
V_0R2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before V, followed by R, followed by L, except...
A_V_0R2L1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before V, followed by R, followed by L, preceded by A, except...
H_A_V_0R2L1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before V, followed by R, followed by L, preceded by A, preceded by H, except...
G_H_A_V_0R2L1M1M2M3 = rule.Rule(-3, "G", True, -1) # Always cleaves before V, followed by R, followed by L, preceded by A, preceded by H, preceded by G, except...
H_A_V_0R2L1M1M2.rules.append(G_H_A_V_0R2L1M1M2M3)
A_V_0R2L1M1.rules.append(H_A_V_0R2L1M1M2)
V_0R2L1.rules.append(A_V_0R2L1M1)
V_0R2.rules.append(V_0R2L1)
V_0.rules.append(V_0R2)
V_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before V, followed by A, except...
V_0A2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before V, followed by A, followed by E, except...
L_V_0A2E1M1 = rule.Rule(-1, "L", False, -1) # Never cleaves before V, followed by A, followed by E, preceded by L, except...
H_L_V_0A2E1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before V, followed by A, followed by E, preceded by L, preceded by H, except...
S_H_L_V_0A2E1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before V, followed by A, followed by E, preceded by L, preceded by H, preceded by S, except...
H_L_V_0A2E1M1M2.rules.append(S_H_L_V_0A2E1M1M2M3)
L_V_0A2E1M1.rules.append(H_L_V_0A2E1M1M2)
V_0A2E1.rules.append(L_V_0A2E1M1)
V_0A2.rules.append(V_0A2E1)
V_0.rules.append(V_0A2)
V_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before V, followed by G, except...
V_0G2C1 = rule.Rule(1, "C", False, -1) # Never cleaves before V, followed by G, followed by C, except...
L_V_0G2C1M1 = rule.Rule(-1, "L", False, -1) # Never cleaves before V, followed by G, followed by C, preceded by L, except...
Y_L_V_0G2C1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before V, followed by G, followed by C, preceded by L, preceded by Y, except...
L_Y_L_V_0G2C1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before V, followed by G, followed by C, preceded by L, preceded by Y, preceded by L, except...
Y_L_V_0G2C1M1M2.rules.append(L_Y_L_V_0G2C1M1M2M3)
L_V_0G2C1M1.rules.append(Y_L_V_0G2C1M1M2)
V_0G2C1.rules.append(L_V_0G2C1M1)
V_0G2.rules.append(V_0G2C1)
V_0.rules.append(V_0G2)
ENZ.append(V_0)

S_0 = rule.Rule(0, "S", False, 0) # Never cleaves before S, except...
S_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before S, followed by P, except...
S_0P2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before S, followed by P, followed by V, except...
S_S_0P2V1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before S, followed by P, followed by V, preceded by S, except...
A_S_S_0P2V1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before S, followed by P, followed by V, preceded by S, preceded by A, except...
S_A_S_S_0P2V1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before S, followed by P, followed by V, preceded by S, preceded by A, preceded by S, except...
A_S_S_0P2V1M1M2.rules.append(S_A_S_S_0P2V1M1M2M3)
S_S_0P2V1M1.rules.append(A_S_S_0P2V1M1M2)
S_0P2V1.rules.append(S_S_0P2V1M1)
S_0P2.rules.append(S_0P2V1)
S_0.rules.append(S_0P2)
S_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before S, followed by L, except...
S_0L2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before S, followed by L, followed by G, except...
K_S_0L2G1M1 = rule.Rule(-1, "K", False, -1) # Never cleaves before S, followed by L, followed by G, preceded by K, except...
V_K_S_0L2G1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before S, followed by L, followed by G, preceded by K, preceded by V, except...
H_V_K_S_0L2G1M1M2M3 = rule.Rule(-3, "H", True, -1) # Always cleaves before S, followed by L, followed by G, preceded by K, preceded by V, preceded by H, except...
V_K_S_0L2G1M1M2.rules.append(H_V_K_S_0L2G1M1M2M3)
K_S_0L2G1M1.rules.append(V_K_S_0L2G1M1M2)
S_0L2G1.rules.append(K_S_0L2G1M1)
S_0L2.rules.append(S_0L2G1)
S_0.rules.append(S_0L2)
S_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before S, followed by A, except...
S_0A2H1 = rule.Rule(1, "H", False, -1) # Never cleaves before S, followed by A, followed by H, except...
Q_S_0A2H1M1 = rule.Rule(-1, "Q", False, -1) # Never cleaves before S, followed by A, followed by H, preceded by Q, except...
A_Q_S_0A2H1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before S, followed by A, followed by H, preceded by Q, preceded by A, except...
L_A_Q_S_0A2H1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before S, followed by A, followed by H, preceded by Q, preceded by A, preceded by L, except...
A_Q_S_0A2H1M1M2.rules.append(L_A_Q_S_0A2H1M1M2M3)
Q_S_0A2H1M1.rules.append(A_Q_S_0A2H1M1M2)
S_0A2H1.rules.append(Q_S_0A2H1M1)
S_0A2.rules.append(S_0A2H1)
S_0.rules.append(S_0A2)
S_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before S, followed by S, except...
S_0S2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before S, followed by S, followed by S, except...
A_S_0S2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before S, followed by S, followed by S, preceded by A, except...
A_A_S_0S2S1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before S, followed by S, followed by S, preceded by A, preceded by A, except...
S_A_A_S_0S2S1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before S, followed by S, followed by S, preceded by A, preceded by A, preceded by S, except...
A_A_S_0S2S1M1M2.rules.append(S_A_A_S_0S2S1M1M2M3)
A_S_0S2S1M1.rules.append(A_A_S_0S2S1M1M2)
S_0S2S1.rules.append(A_S_0S2S1M1)
S_0S2.rules.append(S_0S2S1)
S_0.rules.append(S_0S2)
S_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before S, followed by T, except...
S_0T2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before S, followed by T, followed by I, except...
M_S_0T2I1M1 = rule.Rule(-1, "M", False, -1) # Never cleaves before S, followed by T, followed by I, preceded by M, except...
T_M_S_0T2I1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before S, followed by T, followed by I, preceded by M, preceded by T, except...
S_T_M_S_0T2I1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before S, followed by T, followed by I, preceded by M, preceded by T, preceded by S, except...
T_M_S_0T2I1M1M2.rules.append(S_T_M_S_0T2I1M1M2M3)
M_S_0T2I1M1.rules.append(T_M_S_0T2I1M1M2)
S_0T2I1.rules.append(M_S_0T2I1M1)
S_0T2.rules.append(S_0T2I1)
S_0.rules.append(S_0T2)
S_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before S, followed by N, except...
S_0N2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before S, followed by N, followed by S, except...
S_S_0N2S1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before S, followed by N, followed by S, preceded by S, except...
A_S_S_0N2S1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before S, followed by N, followed by S, preceded by S, preceded by A, except...
A_A_S_S_0N2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before S, followed by N, followed by S, preceded by S, preceded by A, preceded by A, except...
A_S_S_0N2S1M1M2.rules.append(A_A_S_S_0N2S1M1M2M3)
S_S_0N2S1M1.rules.append(A_S_S_0N2S1M1M2)
S_0N2S1.rules.append(S_S_0N2S1M1)
S_0N2.rules.append(S_0N2S1)
S_0.rules.append(S_0N2)
S_0M2 = rule.Rule(2, "M", False, -1) # Never cleaves before S, followed by M, except...
S_0M2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before S, followed by M, followed by T, except...
Y_S_0M2T1M1 = rule.Rule(-1, "Y", False, -1) # Never cleaves before S, followed by M, followed by T, preceded by Y, except...
S_Y_S_0M2T1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before S, followed by M, followed by T, preceded by Y, preceded by S, except...
Q_S_Y_S_0M2T1M1M2M3 = rule.Rule(-3, "Q", True, -1) # Always cleaves before S, followed by M, followed by T, preceded by Y, preceded by S, preceded by Q, except...
S_Y_S_0M2T1M1M2.rules.append(Q_S_Y_S_0M2T1M1M2M3)
Y_S_0M2T1M1.rules.append(S_Y_S_0M2T1M1M2)
S_0M2T1.rules.append(Y_S_0M2T1M1)
S_0M2.rules.append(S_0M2T1)
S_0.rules.append(S_0M2)
ENZ.append(S_0)

T_0 = rule.Rule(0, "T", False, 0) # Never cleaves before T, except...
T_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before T, followed by G, except...
T_0G2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before T, followed by G, followed by E, except...
Q_T_0G2E1M1 = rule.Rule(-1, "Q", False, -1) # Never cleaves before T, followed by G, followed by E, preceded by Q, except...
S_Q_T_0G2E1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before T, followed by G, followed by E, preceded by Q, preceded by S, except...
K_S_Q_T_0G2E1M1M2M3 = rule.Rule(-3, "K", True, -1) # Always cleaves before T, followed by G, followed by E, preceded by Q, preceded by S, preceded by K, except...
S_Q_T_0G2E1M1M2.rules.append(K_S_Q_T_0G2E1M1M2M3)
Q_T_0G2E1M1.rules.append(S_Q_T_0G2E1M1M2)
T_0G2E1.rules.append(Q_T_0G2E1M1)
T_0G2.rules.append(T_0G2E1)
T_0.rules.append(T_0G2)
T_0K2 = rule.Rule(2, "K", False, -1) # Never cleaves before T, followed by K, except...
T_0K2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before T, followed by K, followed by P, except...
Y_T_0K2P1M1 = rule.Rule(-1, "Y", False, -1) # Never cleaves before T, followed by K, followed by P, preceded by Y, except...
F_Y_T_0K2P1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before T, followed by K, followed by P, preceded by Y, preceded by F, except...
F_F_Y_T_0K2P1M1M2M3 = rule.Rule(-3, "F", True, -1) # Always cleaves before T, followed by K, followed by P, preceded by Y, preceded by F, preceded by F, except...
F_Y_T_0K2P1M1M2.rules.append(F_F_Y_T_0K2P1M1M2M3)
Y_T_0K2P1M1.rules.append(F_Y_T_0K2P1M1M2)
T_0K2P1.rules.append(Y_T_0K2P1M1)
T_0K2.rules.append(T_0K2P1)
T_0.rules.append(T_0K2)
T_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before T, followed by P, except...
T_0P2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before T, followed by P, followed by T, except...
L_T_0P2T1M1 = rule.Rule(-1, "L", False, -1) # Never cleaves before T, followed by P, followed by T, preceded by L, except...
S_L_T_0P2T1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before T, followed by P, followed by T, preceded by L, preceded by S, except...
N_S_L_T_0P2T1M1M2M3 = rule.Rule(-3, "N", True, -1) # Always cleaves before T, followed by P, followed by T, preceded by L, preceded by S, preceded by N, except...
S_L_T_0P2T1M1M2.rules.append(N_S_L_T_0P2T1M1M2M3)
L_T_0P2T1M1.rules.append(S_L_T_0P2T1M1M2)
T_0P2T1.rules.append(L_T_0P2T1M1)
T_0P2.rules.append(T_0P2T1)
T_0.rules.append(T_0P2)
T_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before T, followed by A, except...
T_0A2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before T, followed by A, followed by S, except...
S_T_0A2S1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before T, followed by A, followed by S, preceded by S, except...
S_S_T_0A2S1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before T, followed by A, followed by S, preceded by S, preceded by S, except...
D_S_S_T_0A2S1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before T, followed by A, followed by S, preceded by S, preceded by S, preceded by D, except...
S_S_T_0A2S1M1M2.rules.append(D_S_S_T_0A2S1M1M2M3)
S_T_0A2S1M1.rules.append(S_S_T_0A2S1M1M2)
T_0A2S1.rules.append(S_T_0A2S1M1)
T_0A2.rules.append(T_0A2S1)
T_0.rules.append(T_0A2)
ENZ.append(T_0)

Q_0 = rule.Rule(0, "Q", False, 0) # Never cleaves before Q, except...
Q_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before Q, followed by L, except...
Q_0L2H1 = rule.Rule(1, "H", False, -1) # Never cleaves before Q, followed by L, followed by H, except...
N_Q_0L2H1M1 = rule.Rule(-1, "N", False, -1) # Never cleaves before Q, followed by L, followed by H, preceded by N, except...
V_N_Q_0L2H1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before Q, followed by L, followed by H, preceded by N, preceded by V, except...
F_V_N_Q_0L2H1M1M2M3 = rule.Rule(-3, "F", True, -1) # Always cleaves before Q, followed by L, followed by H, preceded by N, preceded by V, preceded by F, except...
V_N_Q_0L2H1M1M2.rules.append(F_V_N_Q_0L2H1M1M2M3)
N_Q_0L2H1M1.rules.append(V_N_Q_0L2H1M1M2)
Q_0L2H1.rules.append(N_Q_0L2H1M1)
Q_0L2.rules.append(Q_0L2H1)
Q_0.rules.append(Q_0L2)
ENZ.append(Q_0)

Y_0 = rule.Rule(0, "Y", False, 0) # Never cleaves before Y, except...
Y_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before Y, followed by V, except...
Y_0V2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before Y, followed by V, followed by L, except...
L_Y_0V2L1M1 = rule.Rule(-1, "L", False, -1) # Never cleaves before Y, followed by V, followed by L, preceded by L, except...
A_L_Y_0V2L1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before Y, followed by V, followed by L, preceded by L, preceded by A, except...
E_A_L_Y_0V2L1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before Y, followed by V, followed by L, preceded by L, preceded by A, preceded by E, except...
A_L_Y_0V2L1M1M2.rules.append(E_A_L_Y_0V2L1M1M2M3)
L_Y_0V2L1M1.rules.append(A_L_Y_0V2L1M1M2)
Y_0V2L1.rules.append(L_Y_0V2L1M1)
Y_0V2.rules.append(Y_0V2L1)
Y_0.rules.append(Y_0V2)
Y_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before Y, followed by A, except...
Y_0A2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before Y, followed by A, followed by V, except...
Y_Y_0A2V1M1 = rule.Rule(-1, "Y", False, -1) # Never cleaves before Y, followed by A, followed by V, preceded by Y, except...
P_Y_Y_0A2V1M1M2 = rule.Rule(-2, "P", False, -1) # Never cleaves before Y, followed by A, followed by V, preceded by Y, preceded by P, except...
T_P_Y_Y_0A2V1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before Y, followed by A, followed by V, preceded by Y, preceded by P, preceded by T, except...
P_Y_Y_0A2V1M1M2.rules.append(T_P_Y_Y_0A2V1M1M2M3)
Y_Y_0A2V1M1.rules.append(P_Y_Y_0A2V1M1M2)
Y_0A2V1.rules.append(Y_Y_0A2V1M1)
Y_0A2.rules.append(Y_0A2V1)
Y_0.rules.append(Y_0A2)
ENZ.append(Y_0)

G_0 = rule.Rule(0, "G", False, 0) # Never cleaves before G, except...
G_0R2 = rule.Rule(2, "R", False, -1) # Never cleaves before G, followed by R, except...
G_0R2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before G, followed by R, followed by E, except...
C_G_0R2E1M1 = rule.Rule(-1, "C", False, -1) # Never cleaves before G, followed by R, followed by E, preceded by C, except...
V_C_G_0R2E1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before G, followed by R, followed by E, preceded by C, preceded by V, except...
L_V_C_G_0R2E1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before G, followed by R, followed by E, preceded by C, preceded by V, preceded by L, except...
V_C_G_0R2E1M1M2.rules.append(L_V_C_G_0R2E1M1M2M3)
C_G_0R2E1M1.rules.append(V_C_G_0R2E1M1M2)
G_0R2E1.rules.append(C_G_0R2E1M1)
G_0R2.rules.append(G_0R2E1)
G_0.rules.append(G_0R2)
G_0F2 = rule.Rule(2, "F", False, -1) # Never cleaves before G, followed by F, except...
G_0F2F1 = rule.Rule(1, "F", False, -1) # Never cleaves before G, followed by F, followed by F, except...
R_G_0F2F1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before G, followed by F, followed by F, preceded by R, except...
E_R_G_0F2F1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before G, followed by F, followed by F, preceded by R, preceded by E, except...
G_E_R_G_0F2F1M1M2M3 = rule.Rule(-3, "G", True, -1) # Always cleaves before G, followed by F, followed by F, preceded by R, preceded by E, preceded by G, except...
E_R_G_0F2F1M1M2.rules.append(G_E_R_G_0F2F1M1M2M3)
R_G_0F2F1M1.rules.append(E_R_G_0F2F1M1M2)
G_0F2F1.rules.append(R_G_0F2F1M1)
G_0F2.rules.append(G_0F2F1)
G_0.rules.append(G_0F2)
ENZ.append(G_0)

F_0 = rule.Rule(0, "F", False, 0) # Never cleaves before F, except...
F_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before F, followed by T, except...
F_0T2Y1 = rule.Rule(1, "Y", False, -1) # Never cleaves before F, followed by T, followed by Y, except...
F_F_0T2Y1M1 = rule.Rule(-1, "F", False, -1) # Never cleaves before F, followed by T, followed by Y, preceded by F, except...
G_F_F_0T2Y1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before F, followed by T, followed by Y, preceded by F, preceded by G, except...
R_G_F_F_0T2Y1M1M2M3 = rule.Rule(-3, "R", True, -1) # Always cleaves before F, followed by T, followed by Y, preceded by F, preceded by G, preceded by R, except...
G_F_F_0T2Y1M1M2.rules.append(R_G_F_F_0T2Y1M1M2M3)
F_F_0T2Y1M1.rules.append(G_F_F_0T2Y1M1M2)
F_0T2Y1.rules.append(F_F_0T2Y1M1)
F_0T2.rules.append(F_0T2Y1)
F_0.rules.append(F_0T2)
ENZ.append(F_0)

M_0 = rule.Rule(0, "M", False, 0) # Never cleaves before M, except...
M_0K2 = rule.Rule(2, "K", False, -1) # Never cleaves before M, followed by K, except...
M_0K2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before M, followed by K, followed by V, except...
E_M_0K2V1M1 = rule.Rule(-1, "E", False, -1) # Never cleaves before M, followed by K, followed by V, preceded by E, except...
V_E_M_0K2V1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before M, followed by K, followed by V, preceded by E, preceded by V, except...
A_V_E_M_0K2V1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before M, followed by K, followed by V, preceded by E, preceded by V, preceded by A, except...
V_E_M_0K2V1M1M2.rules.append(A_V_E_M_0K2V1M1M2M3)
E_M_0K2V1M1.rules.append(V_E_M_0K2V1M1M2)
M_0K2V1.rules.append(E_M_0K2V1M1)
M_0K2.rules.append(M_0K2V1)
M_0.rules.append(M_0K2)
ENZ.append(M_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "subtilisin-Carlsberg", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme acylaminoacyl-peptidase
ENZ = []

F_1 = rule.Rule(0, "F", False, 1) # Never cleaves after F, except...
G_F_1M1 = rule.Rule(-1, "G", True, -1) # Always cleaves after F, preceded by G, except...
F_1.rules.append(G_F_1M1)
ENZ.append(F_1)

Y_0 = rule.Rule(0, "Y", False, 0) # Never cleaves before Y, except...
Y_0M2 = rule.Rule(2, "M", False, -1) # Never cleaves before Y, followed by M, except...
Y_0M2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before Y, followed by M, followed by S, except...
S_Y_0M2S1M1 = rule.Rule(-1, "S", True, -1) # Always cleaves before Y, followed by M, followed by S, preceded by S, except...
Y_0M2S1.rules.append(S_Y_0M2S1M1)
Y_0M2.rules.append(Y_0M2S1)
Y_0.rules.append(Y_0M2)
ENZ.append(Y_0)

E_0 = rule.Rule(0, "E", False, 0) # Never cleaves before E, except...
E_0P1 = rule.Rule(1, "P", False, -1) # Never cleaves before E, followed by P, except...
F_E_0P1M1 = rule.Rule(-1, "F", False, -1) # Never cleaves before E, followed by P, preceded by F, except...
G_F_E_0P1M1M2 = rule.Rule(-2, "G", True, -1) # Always cleaves before E, followed by P, preceded by F, preceded by G, except...
F_E_0P1M1.rules.append(G_F_E_0P1M1M2)
E_0P1.rules.append(F_E_0P1M1)
E_0.rules.append(E_0P1)
ENZ.append(E_0)

H_0 = rule.Rule(0, "H", False, 0) # Never cleaves before H, except...
H_0K2 = rule.Rule(2, "K", False, -1) # Never cleaves before H, followed by K, except...
H_0K2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before H, followed by K, followed by Q, except...
H_H_0K2Q1M1 = rule.Rule(-1, "H", False, -1) # Never cleaves before H, followed by K, followed by Q, preceded by H, except...
V_H_H_0K2Q1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before H, followed by K, followed by Q, preceded by H, preceded by V, except...
E_V_H_H_0K2Q1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before H, followed by K, followed by Q, preceded by H, preceded by V, preceded by E, except...
V_H_H_0K2Q1M1M2.rules.append(E_V_H_H_0K2Q1M1M2M3)
H_H_0K2Q1M1.rules.append(V_H_H_0K2Q1M1M2)
H_0K2Q1.rules.append(H_H_0K2Q1M1)
H_0K2.rules.append(H_0K2Q1)
H_0.rules.append(H_0K2)
ENZ.append(H_0)

Q_0 = rule.Rule(0, "Q", False, 0) # Never cleaves before Q, except...
Q_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before Q, followed by L, except...
Q_0L2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before Q, followed by L, followed by K, except...
H_Q_0L2K1M1 = rule.Rule(-1, "H", False, -1) # Never cleaves before Q, followed by L, followed by K, preceded by H, except...
H_H_Q_0L2K1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before Q, followed by L, followed by K, preceded by H, preceded by H, except...
V_H_H_Q_0L2K1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before Q, followed by L, followed by K, preceded by H, preceded by H, preceded by V, except...
H_H_Q_0L2K1M1M2.rules.append(V_H_H_Q_0L2K1M1M2M3)
H_Q_0L2K1M1.rules.append(H_H_Q_0L2K1M1M2)
Q_0L2K1.rules.append(H_Q_0L2K1M1)
Q_0L2.rules.append(Q_0L2K1)
Q_0.rules.append(Q_0L2)
ENZ.append(Q_0)

F_0 = rule.Rule(0, "F", False, 0) # Never cleaves before F, except...
F_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before F, followed by E, except...
F_0E2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before F, followed by E, followed by A, except...
F_F_0E2A1M1 = rule.Rule(-1, "F", False, -1) # Never cleaves before F, followed by E, followed by A, preceded by F, except...
V_F_F_0E2A1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before F, followed by E, followed by A, preceded by F, preceded by V, except...
L_V_F_F_0E2A1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before F, followed by E, followed by A, preceded by F, preceded by V, preceded by L, except...
V_F_F_0E2A1M1M2.rules.append(L_V_F_F_0E2A1M1M2M3)
F_F_0E2A1M1.rules.append(V_F_F_0E2A1M1M2)
F_0E2A1.rules.append(F_F_0E2A1M1)
F_0E2.rules.append(F_0E2A1)
F_0.rules.append(F_0E2)
ENZ.append(F_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "acylaminoacyl-peptidase", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme D-ala-D-ala-carboxypeptidase-A
ENZ = []

A_0 = rule.Rule(0, "A", False, 0) # Never cleaves before A, except...
A_A_0M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, preceded by A, except...
K_A_A_0M1M2 = rule.Rule(-2, "K", True, -1) # Always cleaves before A, preceded by A, preceded by K, except...
A_A_0M1.rules.append(K_A_A_0M1M2)
A_0.rules.append(A_A_0M1)
ENZ.append(A_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "D-ala-D-ala-carboxypeptidase-A", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme C-terminal-processing-peptidase-1
ENZ = []

R_0 = rule.Rule(0, "R", False, 0) # Never cleaves before R, except...
R_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before R, followed by A, except...
R_0A2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before R, followed by A, followed by A, except...
A_R_0A2A1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before R, followed by A, followed by A, preceded by A, except...
A_A_R_0A2A1M1M2 = rule.Rule(-2, "A", True, -1) # Always cleaves before R, followed by A, followed by A, preceded by A, preceded by A, except...
A_R_0A2A1M1.rules.append(A_A_R_0A2A1M1M2)
R_0A2A1.rules.append(A_R_0A2A1M1)
R_0A2.rules.append(R_0A2A1)
R_0.rules.append(R_0A2)
R_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before R, followed by I, except...
R_0I2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before R, followed by I, followed by E, except...
A_R_0I2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before R, followed by I, followed by E, preceded by A, except...
I_A_R_0I2E1M1M2 = rule.Rule(-2, "I", False, -1) # Never cleaves before R, followed by I, followed by E, preceded by A, preceded by I, except...
S_I_A_R_0I2E1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before R, followed by I, followed by E, preceded by A, preceded by I, preceded by S, except...
I_A_R_0I2E1M1M2.rules.append(S_I_A_R_0I2E1M1M2M3)
A_R_0I2E1M1.rules.append(I_A_R_0I2E1M1M2)
R_0I2E1.rules.append(A_R_0I2E1M1)
R_0I2.rules.append(R_0I2E1)
R_0.rules.append(R_0I2)
ENZ.append(R_0)

A_0 = rule.Rule(0, "A", False, 0) # Never cleaves before A, except...
A_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before A, followed by E, except...
A_0E2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before A, followed by E, followed by I, except...
A_A_0E2I1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by E, followed by I, preceded by A, except...
L_A_A_0E2I1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by E, followed by I, preceded by A, preceded by L, except...
D_L_A_A_0E2I1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before A, followed by E, followed by I, preceded by A, preceded by L, preceded by D, except...
L_A_A_0E2I1M1M2.rules.append(D_L_A_A_0E2I1M1M2M3)
A_A_0E2I1M1.rules.append(L_A_A_0E2I1M1M2)
A_0E2I1.rules.append(A_A_0E2I1M1)
A_0E2.rules.append(A_0E2I1)
A_0.rules.append(A_0E2)
ENZ.append(A_0)

S_0 = rule.Rule(0, "S", False, 0) # Never cleaves before S, except...
S_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before S, followed by N, except...
S_0N2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before S, followed by N, followed by T, except...
A_S_0N2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before S, followed by N, followed by T, preceded by A, except...
L_A_S_0N2T1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before S, followed by N, followed by T, preceded by A, preceded by L, except...
D_L_A_S_0N2T1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before S, followed by N, followed by T, preceded by A, preceded by L, preceded by D, except...
L_A_S_0N2T1M1M2.rules.append(D_L_A_S_0N2T1M1M2M3)
A_S_0N2T1M1.rules.append(L_A_S_0N2T1M1M2)
S_0N2T1.rules.append(A_S_0N2T1M1)
S_0N2.rules.append(S_0N2T1)
S_0.rules.append(S_0N2)
S_0Q2 = rule.Rule(2, "Q", False, -1) # Never cleaves before S, followed by Q, except...
S_0Q2M1 = rule.Rule(1, "M", False, -1) # Never cleaves before S, followed by Q, followed by M, except...
V_S_0Q2M1M1 = rule.Rule(-1, "V", False, -1) # Never cleaves before S, followed by Q, followed by M, preceded by V, except...
A_V_S_0Q2M1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before S, followed by Q, followed by M, preceded by V, preceded by A, except...
E_A_V_S_0Q2M1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before S, followed by Q, followed by M, preceded by V, preceded by A, preceded by E, except...
A_V_S_0Q2M1M1M2.rules.append(E_A_V_S_0Q2M1M1M2M3)
V_S_0Q2M1M1.rules.append(A_V_S_0Q2M1M1M2)
S_0Q2M1.rules.append(V_S_0Q2M1M1)
S_0Q2.rules.append(S_0Q2M1)
S_0.rules.append(S_0Q2)
ENZ.append(S_0)

I_0 = rule.Rule(0, "I", False, 0) # Never cleaves before I, except...
I_0Q2 = rule.Rule(2, "Q", False, -1) # Never cleaves before I, followed by Q, except...
I_0Q2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before I, followed by Q, followed by N, except...
V_I_0Q2N1M1 = rule.Rule(-1, "V", False, -1) # Never cleaves before I, followed by Q, followed by N, preceded by V, except...
F_V_I_0Q2N1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before I, followed by Q, followed by N, preceded by V, preceded by F, except...
E_F_V_I_0Q2N1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before I, followed by Q, followed by N, preceded by V, preceded by F, preceded by E, except...
F_V_I_0Q2N1M1M2.rules.append(E_F_V_I_0Q2N1M1M2M3)
V_I_0Q2N1M1.rules.append(F_V_I_0Q2N1M1M2)
I_0Q2N1.rules.append(V_I_0Q2N1M1)
I_0Q2.rules.append(I_0Q2N1)
I_0.rules.append(I_0Q2)
ENZ.append(I_0)

L_0 = rule.Rule(0, "L", False, 0) # Never cleaves before L, except...
L_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before L, followed by N, except...
L_0N2F1 = rule.Rule(1, "F", False, -1) # Never cleaves before L, followed by N, followed by F, except...
A_L_0N2F1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before L, followed by N, followed by F, preceded by A, except...
G_A_L_0N2F1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before L, followed by N, followed by F, preceded by A, preceded by G, except...
V_G_A_L_0N2F1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before L, followed by N, followed by F, preceded by A, preceded by G, preceded by V, except...
G_A_L_0N2F1M1M2.rules.append(V_G_A_L_0N2F1M1M2M3)
A_L_0N2F1M1.rules.append(G_A_L_0N2F1M1M2)
L_0N2F1.rules.append(A_L_0N2F1M1)
L_0N2.rules.append(L_0N2F1)
L_0.rules.append(L_0N2)
ENZ.append(L_0)

K_0 = rule.Rule(0, "K", False, 0) # Never cleaves before K, except...
K_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before K, followed by L, except...
K_0L2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before K, followed by L, followed by I, except...
A_K_0L2I1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before K, followed by L, followed by I, preceded by A, except...
L_A_K_0L2I1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before K, followed by L, followed by I, preceded by A, preceded by L, except...
L_L_A_K_0L2I1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before K, followed by L, followed by I, preceded by A, preceded by L, preceded by L, except...
L_A_K_0L2I1M1M2.rules.append(L_L_A_K_0L2I1M1M2M3)
A_K_0L2I1M1.rules.append(L_A_K_0L2I1M1M2)
K_0L2I1.rules.append(A_K_0L2I1M1)
K_0L2.rules.append(K_0L2I1)
K_0.rules.append(K_0L2)
ENZ.append(K_0)

T_0 = rule.Rule(0, "T", False, 0) # Never cleaves before T, except...
T_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before T, followed by S, except...
T_0S2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before T, followed by S, followed by S, except...
F_T_0S2S1M1 = rule.Rule(-1, "F", False, -1) # Never cleaves before T, followed by S, followed by S, preceded by F, except...
P_F_T_0S2S1M1M2 = rule.Rule(-2, "P", False, -1) # Never cleaves before T, followed by S, followed by S, preceded by F, preceded by P, except...
Y_P_F_T_0S2S1M1M2M3 = rule.Rule(-3, "Y", True, -1) # Always cleaves before T, followed by S, followed by S, preceded by F, preceded by P, preceded by Y, except...
P_F_T_0S2S1M1M2.rules.append(Y_P_F_T_0S2S1M1M2M3)
F_T_0S2S1M1.rules.append(P_F_T_0S2S1M1M2)
T_0S2S1.rules.append(F_T_0S2S1M1)
T_0S2.rules.append(T_0S2S1)
T_0.rules.append(T_0S2)
ENZ.append(T_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "C-terminal-processing-peptidase-1", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme protein-c
ENZ = []

R_1 = rule.Rule(0, "R", False, 1) # Never cleaves after R, except...
P_R_1M1 = rule.Rule(-1, "P", True, -1) # Always cleaves after R, preceded by P, except...
E_P_R_1M1M2 = rule.Rule(-2, "E", True, -1) # Always cleaves after R, preceded by P, preceded by E, except...
P_R_1M1.rules.append(E_P_R_1M1M2)
R_1.rules.append(P_R_1M1)
ENZ.append(R_1)

M_0 = rule.Rule(0, "M", False, 0) # Never cleaves before M, except...
M_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before M, followed by N, except...
M_0N2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before M, followed by N, followed by K, except...
R_M_0N2K1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before M, followed by N, followed by K, preceded by R, except...
L_R_M_0N2K1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before M, followed by N, followed by K, preceded by R, preceded by L, except...
Q_L_R_M_0N2K1M1M2M3 = rule.Rule(-3, "Q", True, -1) # Always cleaves before M, followed by N, followed by K, preceded by R, preceded by L, preceded by Q, except...
L_R_M_0N2K1M1M2.rules.append(Q_L_R_M_0N2K1M1M2M3)
R_M_0N2K1M1.rules.append(L_R_M_0N2K1M1M2)
M_0N2K1.rules.append(R_M_0N2K1M1)
M_0N2.rules.append(M_0N2K1)
M_0.rules.append(M_0N2)
M_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before M, followed by P, except...
M_0P2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before M, followed by P, followed by A, except...
R_M_0P2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before M, followed by P, followed by A, preceded by R, except...
A_R_M_0P2A1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before M, followed by P, followed by A, preceded by R, preceded by A, except...
S_A_R_M_0P2A1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before M, followed by P, followed by A, preceded by R, preceded by A, preceded by S, except...
A_R_M_0P2A1M1M2.rules.append(S_A_R_M_0P2A1M1M2M3)
R_M_0P2A1M1.rules.append(A_R_M_0P2A1M1M2)
M_0P2A1.rules.append(R_M_0P2A1M1)
M_0P2.rules.append(M_0P2A1)
M_0.rules.append(M_0P2)
ENZ.append(M_0)

N_0 = rule.Rule(0, "N", False, 0) # Never cleaves before N, except...
N_0K2 = rule.Rule(2, "K", False, -1) # Never cleaves before N, followed by K, except...
N_0K2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before N, followed by K, followed by L, except...
R_N_0K2L1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before N, followed by K, followed by L, preceded by R, except...
T_R_N_0K2L1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before N, followed by K, followed by L, preceded by R, preceded by T, except...
K_T_R_N_0K2L1M1M2M3 = rule.Rule(-3, "K", True, -1) # Always cleaves before N, followed by K, followed by L, preceded by R, preceded by T, preceded by K, except...
T_R_N_0K2L1M1M2.rules.append(K_T_R_N_0K2L1M1M2M3)
R_N_0K2L1M1.rules.append(T_R_N_0K2L1M1M2)
N_0K2L1.rules.append(R_N_0K2L1M1)
N_0K2.rules.append(N_0K2L1)
N_0.rules.append(N_0K2)
ENZ.append(N_0)

G_0 = rule.Rule(0, "G", False, 0) # Never cleaves before G, except...
G_0Q2 = rule.Rule(2, "Q", False, -1) # Never cleaves before G, followed by Q, except...
G_0Q2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before G, followed by Q, followed by I, except...
R_G_0Q2I1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before G, followed by Q, followed by I, preceded by R, except...
R_R_G_0Q2I1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before G, followed by Q, followed by I, preceded by R, preceded by R, except...
D_R_R_G_0Q2I1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before G, followed by Q, followed by I, preceded by R, preceded by R, preceded by D, except...
R_R_G_0Q2I1M1M2.rules.append(D_R_R_G_0Q2I1M1M2M3)
R_G_0Q2I1M1.rules.append(R_R_G_0Q2I1M1M2)
G_0Q2I1.rules.append(R_G_0Q2I1M1)
G_0Q2.rules.append(G_0Q2I1)
G_0Q2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before G, followed by Q, followed by V, except...
R_G_0Q2V1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before G, followed by Q, followed by V, preceded by R, except...
Q_R_G_0Q2V1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before G, followed by Q, followed by V, preceded by R, preceded by Q, except...
D_Q_R_G_0Q2V1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before G, followed by Q, followed by V, preceded by R, preceded by Q, preceded by D, except...
Q_R_G_0Q2V1M1M2.rules.append(D_Q_R_G_0Q2V1M1M2M3)
R_G_0Q2V1M1.rules.append(Q_R_G_0Q2V1M1M2)
G_0Q2V1.rules.append(R_G_0Q2V1M1)
G_0Q2.rules.append(G_0Q2V1)
G_0Q2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before G, followed by Q, followed by N, except...
R_G_0Q2N1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before G, followed by Q, followed by N, preceded by R, except...
Q_R_G_0Q2N1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before G, followed by Q, followed by N, preceded by R, preceded by Q, except...
D_Q_R_G_0Q2N1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before G, followed by Q, followed by N, preceded by R, preceded by Q, preceded by D, except...
Q_R_G_0Q2N1M1M2.rules.append(D_Q_R_G_0Q2N1M1M2M3)
R_G_0Q2N1M1.rules.append(Q_R_G_0Q2N1M1M2)
G_0Q2N1.rules.append(R_G_0Q2N1M1)
G_0Q2.rules.append(G_0Q2N1)
G_0.rules.append(G_0Q2)
ENZ.append(G_0)

K_0 = rule.Rule(0, "K", False, 0) # Never cleaves before K, except...
K_0H2 = rule.Rule(2, "H", False, -1) # Never cleaves before K, followed by H, except...
K_0H2M1 = rule.Rule(1, "M", False, -1) # Never cleaves before K, followed by H, followed by M, except...
R_K_0H2M1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before K, followed by H, followed by M, preceded by R, except...
T_R_K_0H2M1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before K, followed by H, followed by M, preceded by R, preceded by T, except...
A_T_R_K_0H2M1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before K, followed by H, followed by M, preceded by R, preceded by T, preceded by A, except...
T_R_K_0H2M1M1M2.rules.append(A_T_R_K_0H2M1M1M2M3)
R_K_0H2M1M1.rules.append(T_R_K_0H2M1M1M2)
K_0H2M1.rules.append(R_K_0H2M1M1)
K_0H2.rules.append(K_0H2M1)
K_0.rules.append(K_0H2)
ENZ.append(K_0)

S_0 = rule.Rule(0, "S", False, 0) # Never cleaves before S, except...
S_0F2 = rule.Rule(2, "F", False, -1) # Never cleaves before S, followed by F, except...
S_0F2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before S, followed by F, followed by Q, except...
K_S_0F2Q1M1 = rule.Rule(-1, "K", False, -1) # Never cleaves before S, followed by F, followed by Q, preceded by K, except...
K_K_S_0F2Q1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before S, followed by F, followed by Q, preceded by K, preceded by K, except...
L_K_K_S_0F2Q1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before S, followed by F, followed by Q, preceded by K, preceded by K, preceded by L, except...
K_K_S_0F2Q1M1M2.rules.append(L_K_K_S_0F2Q1M1M2M3)
K_S_0F2Q1M1.rules.append(K_K_S_0F2Q1M1M2)
S_0F2Q1.rules.append(K_S_0F2Q1M1)
S_0F2.rules.append(S_0F2Q1)
S_0.rules.append(S_0F2)
S_0K2 = rule.Rule(2, "K", False, -1) # Never cleaves before S, followed by K, except...
S_0K2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before S, followed by K, followed by P, except...
R_S_0K2P1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before S, followed by K, followed by P, preceded by R, except...
T_R_S_0K2P1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before S, followed by K, followed by P, preceded by R, preceded by T, except...
K_T_R_S_0K2P1M1M2M3 = rule.Rule(-3, "K", True, -1) # Always cleaves before S, followed by K, followed by P, preceded by R, preceded by T, preceded by K, except...
T_R_S_0K2P1M1M2.rules.append(K_T_R_S_0K2P1M1M2M3)
R_S_0K2P1M1.rules.append(T_R_S_0K2P1M1M2)
S_0K2P1.rules.append(R_S_0K2P1M1)
S_0K2.rules.append(S_0K2P1)
S_0.rules.append(S_0K2)
S_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before S, followed by S, except...
S_0S2F1 = rule.Rule(1, "F", False, -1) # Never cleaves before S, followed by S, followed by F, except...
R_S_0S2F1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before S, followed by S, followed by F, preceded by R, except...
P_R_S_0S2F1M1M2 = rule.Rule(-2, "P", False, -1) # Never cleaves before S, followed by S, followed by F, preceded by R, preceded by P, except...
E_P_R_S_0S2F1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before S, followed by S, followed by F, preceded by R, preceded by P, preceded by E, except...
P_R_S_0S2F1M1M2.rules.append(E_P_R_S_0S2F1M1M2M3)
R_S_0S2F1M1.rules.append(P_R_S_0S2F1M1M2)
S_0S2F1.rules.append(R_S_0S2F1M1)
S_0S2.rules.append(S_0S2F1)
S_0.rules.append(S_0S2)
S_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before S, followed by L, except...
S_0L2F1 = rule.Rule(1, "F", False, -1) # Never cleaves before S, followed by L, followed by F, except...
R_S_0L2F1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before S, followed by L, followed by F, preceded by R, except...
P_R_S_0L2F1M1M2 = rule.Rule(-2, "P", False, -1) # Never cleaves before S, followed by L, followed by F, preceded by R, preceded by P, except...
D_P_R_S_0L2F1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before S, followed by L, followed by F, preceded by R, preceded by P, preceded by D, except...
P_R_S_0L2F1M1M2.rules.append(D_P_R_S_0L2F1M1M2M3)
R_S_0L2F1M1.rules.append(P_R_S_0L2F1M1M2)
S_0L2F1.rules.append(R_S_0L2F1M1)
S_0L2.rules.append(S_0L2F1)
S_0.rules.append(S_0L2)
ENZ.append(S_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "protein-c", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme gamma-glutamyl-hydrolase
ENZ = []

E_1 = rule.Rule(0, "E", False, 1) # Never cleaves after E, except...
E_1E1 = rule.Rule(1, "E", False, -1) # Never cleaves after E, followed by E, except...
E_1E1E2 = rule.Rule(2, "E", False, -1) # Never cleaves after E, followed by E, followed by E, except...
E_1E1E2E3 = rule.Rule(3, "E", True, -1) # Always cleaves after E, followed by E, followed by E, followed by E, except...
E_1E1E2.rules.append(E_1E1E2E3)
E_1E1.rules.append(E_1E1E2)
E_1.rules.append(E_1E1)
ENZ.append(E_1)

ENZYME = enzyme.Enzyme(CPT_ENZ, "gamma-glutamyl-hydrolase", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme amidophosphoribosyltransferase-precursor
ENZ = []

C_0 = rule.Rule(0, "C", False, 0) # Never cleaves before C, except...
C_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before C, followed by V, except...
C_0V2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before C, followed by V, followed by G, except...
E_C_0V2G1M1 = rule.Rule(-1, "E", False, -1) # Never cleaves before C, followed by V, followed by G, preceded by E, except...
E_E_C_0V2G1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before C, followed by V, followed by G, preceded by E, preceded by E, except...
N_E_E_C_0V2G1M1M2M3 = rule.Rule(-3, "N", True, -1) # Always cleaves before C, followed by V, followed by G, preceded by E, preceded by E, preceded by N, except...
E_E_C_0V2G1M1M2.rules.append(N_E_E_C_0V2G1M1M2M3)
E_C_0V2G1M1.rules.append(E_E_C_0V2G1M1M2)
C_0V2G1.rules.append(E_C_0V2G1M1)
C_0V2.rules.append(C_0V2G1)
C_0.rules.append(C_0V2)
ENZ.append(C_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "amidophosphoribosyltransferase-precursor", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme Pfpl-peptidase
ENZ = []

F_1 = rule.Rule(0, "F", False, 1) # Never cleaves after F, except...
A_F_1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves after F, preceded by A, except...
A_A_F_1M1M2 = rule.Rule(-2, "A", True, -1) # Always cleaves after F, preceded by A, preceded by A, except...
A_F_1M1.rules.append(A_A_F_1M1M2)
F_1.rules.append(A_F_1M1)
ENZ.append(F_1)

ENZYME = enzyme.Enzyme(CPT_ENZ, "Pfpl-peptidase", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme desumoylating-isopeptidase-1
ENZ = []

K_0 = rule.Rule(0, "K", False, 0) # Never cleaves before K, except...
G_K_0M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before K, preceded by G, except...
G_G_K_0M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before K, preceded by G, preceded by G, except...
T_G_G_K_0M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before K, preceded by G, preceded by G, preceded by T, except...
G_G_K_0M1M2.rules.append(T_G_G_K_0M1M2M3)
G_K_0M1.rules.append(G_G_K_0M1M2)
K_0.rules.append(G_K_0M1)
ENZ.append(K_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "desumoylating-isopeptidase-1", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme carboxypeptidase-A1
ENZ = []

F_0 = rule.Rule(0, "F", False, 0) # Never cleaves before F, except...
G_F_0M1 = rule.Rule(-1, "G", True, -1) # Always cleaves before F, preceded by G, except...
G_G_F_0M1M2 = rule.Rule(-2, "G", True, -1) # Always cleaves before F, preceded by G, preceded by G, except...
G_F_0M1.rules.append(G_G_F_0M1M2)
F_0.rules.append(G_F_0M1)
F_F_0M1 = rule.Rule(-1, "F", True, -1) # Always cleaves before F, preceded by F, except...
F_0.rules.append(F_F_0M1)
ENZ.append(F_0)

W_0 = rule.Rule(0, "W", False, 0) # Never cleaves before W, except...
G_W_0M1 = rule.Rule(-1, "G", True, -1) # Always cleaves before W, preceded by G, except...
G_G_W_0M1M2 = rule.Rule(-2, "G", True, -1) # Always cleaves before W, preceded by G, preceded by G, except...
G_W_0M1.rules.append(G_G_W_0M1M2)
W_0.rules.append(G_W_0M1)
F_W_0M1 = rule.Rule(-1, "F", True, -1) # Always cleaves before W, preceded by F, except...
W_0.rules.append(F_W_0M1)
ENZ.append(W_0)

A_0 = rule.Rule(0, "A", False, 0) # Never cleaves before A, except...
F_A_0M1 = rule.Rule(-1, "F", True, -1) # Always cleaves before A, preceded by F, except...
A_0.rules.append(F_A_0M1)
ENZ.append(A_0)

I_0 = rule.Rule(0, "I", False, 0) # Never cleaves before I, except...
F_I_0M1 = rule.Rule(-1, "F", True, -1) # Always cleaves before I, preceded by F, except...
I_0.rules.append(F_I_0M1)
ENZ.append(I_0)

L_0 = rule.Rule(0, "L", False, 0) # Never cleaves before L, except...
F_L_0M1 = rule.Rule(-1, "F", True, -1) # Always cleaves before L, preceded by F, except...
L_0.rules.append(F_L_0M1)
G_L_0M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before L, preceded by G, except...
G_G_L_0M1M2 = rule.Rule(-2, "G", True, -1) # Always cleaves before L, preceded by G, preceded by G, except...
G_L_0M1.rules.append(G_G_L_0M1M2)
L_0.rules.append(G_L_0M1)
L_L_0M1 = rule.Rule(-1, "L", False, -1) # Never cleaves before L, preceded by L, except...
S_L_L_0M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before L, preceded by L, preceded by S, except...
Q_S_L_L_0M1M2M3 = rule.Rule(-3, "Q", True, -1) # Always cleaves before L, preceded by L, preceded by S, preceded by Q, except...
S_L_L_0M1M2.rules.append(Q_S_L_L_0M1M2M3)
L_L_0M1.rules.append(S_L_L_0M1M2)
L_0.rules.append(L_L_0M1)
ENZ.append(L_0)

M_0 = rule.Rule(0, "M", False, 0) # Never cleaves before M, except...
F_M_0M1 = rule.Rule(-1, "F", True, -1) # Always cleaves before M, preceded by F, except...
M_0.rules.append(F_M_0M1)
ENZ.append(M_0)

V_0 = rule.Rule(0, "V", False, 0) # Never cleaves before V, except...
F_V_0M1 = rule.Rule(-1, "F", True, -1) # Always cleaves before V, preceded by F, except...
V_0.rules.append(F_V_0M1)
G_V_0M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before V, preceded by G, except...
G_G_V_0M1M2 = rule.Rule(-2, "G", True, -1) # Always cleaves before V, preceded by G, preceded by G, except...
G_V_0M1.rules.append(G_G_V_0M1M2)
V_0.rules.append(G_V_0M1)
ENZ.append(V_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "carboxypeptidase-A1", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme membrane-dipeptidase
ENZ = []

G_0 = rule.Rule(0, "G", False, 0) # Never cleaves before G, except...
C_G_0M1 = rule.Rule(-1, "C", True, -1) # Always cleaves before G, preceded by C, except...
G_0.rules.append(C_G_0M1)
ENZ.append(G_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "membrane-dipeptidase", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme aminopeptidase-ap1
ENZ = []

A_1 = rule.Rule(0, "A", False, 1) # Never cleaves after A, except...
R_A_1M1 = rule.Rule(-1, "R", True, -1) # Always cleaves after A, preceded by R, except...
A_1.rules.append(R_A_1M1)
ENZ.append(A_1)

T_1 = rule.Rule(0, "T", False, 1) # Never cleaves after T, except...
N_T_1M1 = rule.Rule(-1, "N", True, -1) # Always cleaves after T, preceded by N, except...
T_1.rules.append(N_T_1M1)
ENZ.append(T_1)

R_0 = rule.Rule(0, "R", False, 0) # Never cleaves before R, except...
L_R_0M1 = rule.Rule(-1, "L", True, -1) # Always cleaves before R, preceded by L, except...
R_0.rules.append(L_R_0M1)
R_0A1 = rule.Rule(1, "A", False, -1) # Never cleaves before R, followed by A, except...
F_R_0A1M1 = rule.Rule(-1, "F", True, -1) # Always cleaves before R, followed by A, preceded by F, except...
R_0A1.rules.append(F_R_0A1M1)
R_0.rules.append(R_0A1)
R_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before R, followed by E, except...
R_0E2C1 = rule.Rule(1, "C", False, -1) # Never cleaves before R, followed by E, followed by C, except...
G_R_0E2C1M1 = rule.Rule(-1, "G", True, -1) # Always cleaves before R, followed by E, followed by C, preceded by G, except...
R_0E2C1.rules.append(G_R_0E2C1M1)
R_0E2.rules.append(R_0E2C1)
R_0.rules.append(R_0E2)
R_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before R, followed by P, except...
R_0P2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before R, followed by P, followed by P, except...
K_R_0P2P1M1 = rule.Rule(-1, "K", True, -1) # Always cleaves before R, followed by P, followed by P, preceded by K, except...
R_0P2P1.rules.append(K_R_0P2P1M1)
R_0P2.rules.append(R_0P2P1)
R_0.rules.append(R_0P2)
ENZ.append(R_0)

H_0 = rule.Rule(0, "H", False, 0) # Never cleaves before H, except...
L_H_0M1 = rule.Rule(-1, "L", True, -1) # Always cleaves before H, preceded by L, except...
H_0.rules.append(L_H_0M1)
H_0C2 = rule.Rule(2, "C", False, -1) # Never cleaves before H, followed by C, except...
H_0C2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before H, followed by C, followed by L, except...
Q_H_0C2L1M1 = rule.Rule(-1, "Q", True, -1) # Always cleaves before H, followed by C, followed by L, preceded by Q, except...
H_0C2L1.rules.append(Q_H_0C2L1M1)
H_0C2.rules.append(H_0C2L1)
H_0.rules.append(H_0C2)
H_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before H, followed by V, except...
H_0V2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before H, followed by V, followed by L, except...
S_H_0V2L1M1 = rule.Rule(-1, "S", True, -1) # Always cleaves before H, followed by V, followed by L, preceded by S, except...
H_0V2L1.rules.append(S_H_0V2L1M1)
H_0V2.rules.append(H_0V2L1)
H_0.rules.append(H_0V2)
ENZ.append(H_0)

L_0 = rule.Rule(0, "L", False, 0) # Never cleaves before L, except...
L_L_0M1 = rule.Rule(-1, "L", True, -1) # Always cleaves before L, preceded by L, except...
L_0.rules.append(L_L_0M1)
L_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before L, followed by E, except...
L_0E2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before L, followed by E, followed by V, except...
H_L_0E2V1M1 = rule.Rule(-1, "H", True, -1) # Always cleaves before L, followed by E, followed by V, preceded by H, except...
L_0E2V1.rules.append(H_L_0E2V1M1)
L_0E2.rules.append(L_0E2V1)
L_0E2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before L, followed by E, followed by S, except...
V_L_0E2S1M1 = rule.Rule(-1, "V", True, -1) # Always cleaves before L, followed by E, followed by S, preceded by V, except...
L_0E2S1.rules.append(V_L_0E2S1M1)
L_0E2.rules.append(L_0E2S1)
L_0.rules.append(L_0E2)
L_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before L, followed by G, except...
L_0G2C1 = rule.Rule(1, "C", False, -1) # Never cleaves before L, followed by G, followed by C, except...
H_L_0G2C1M1 = rule.Rule(-1, "H", True, -1) # Always cleaves before L, followed by G, followed by C, preceded by H, except...
L_0G2C1.rules.append(H_L_0G2C1M1)
L_0G2.rules.append(L_0G2C1)
L_0.rules.append(L_0G2)
L_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before L, followed by N, except...
L_0N2M1 = rule.Rule(1, "M", False, -1) # Never cleaves before L, followed by N, followed by M, except...
W_L_0N2M1M1 = rule.Rule(-1, "W", True, -1) # Always cleaves before L, followed by N, followed by M, preceded by W, except...
L_0N2M1.rules.append(W_L_0N2M1M1)
L_0N2.rules.append(L_0N2M1)
L_0.rules.append(L_0N2)
ENZ.append(L_0)

F_0 = rule.Rule(0, "F", False, 0) # Never cleaves before F, except...
L_F_0M1 = rule.Rule(-1, "L", True, -1) # Always cleaves before F, preceded by L, except...
F_0.rules.append(L_F_0M1)
F_F_0M1 = rule.Rule(-1, "F", True, -1) # Always cleaves before F, preceded by F, except...
F_F_0M1F1 = rule.Rule(1, "F", True, -1) # Always cleaves before F, preceded by F, followed by F, except...
F_F_0M1.rules.append(F_F_0M1F1)
F_0.rules.append(F_F_0M1)
F_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before F, followed by S, except...
F_0S2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before F, followed by S, followed by T, except...
T_F_0S2T1M1 = rule.Rule(-1, "T", True, -1) # Always cleaves before F, followed by S, followed by T, preceded by T, except...
F_0S2T1.rules.append(T_F_0S2T1M1)
F_0S2.rules.append(F_0S2T1)
F_0.rules.append(F_0S2)
F_0R2 = rule.Rule(2, "R", False, -1) # Never cleaves before F, followed by R, except...
F_0R2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before F, followed by R, followed by G, except...
V_F_0R2G1M1 = rule.Rule(-1, "V", True, -1) # Always cleaves before F, followed by R, followed by G, preceded by V, except...
F_0R2G1.rules.append(V_F_0R2G1M1)
F_0R2.rules.append(F_0R2G1)
F_0.rules.append(F_0R2)
F_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before F, followed by A, except...
F_0A2R1 = rule.Rule(1, "R", False, -1) # Never cleaves before F, followed by A, followed by R, except...
M_F_0A2R1M1 = rule.Rule(-1, "M", True, -1) # Always cleaves before F, followed by A, followed by R, preceded by M, except...
F_0A2R1.rules.append(M_F_0A2R1M1)
F_0A2.rules.append(F_0A2R1)
F_0.rules.append(F_0A2)
ENZ.append(F_0)

W_0 = rule.Rule(0, "W", False, 0) # Never cleaves before W, except...
L_W_0M1 = rule.Rule(-1, "L", True, -1) # Always cleaves before W, preceded by L, except...
W_0.rules.append(L_W_0M1)
W_0M2 = rule.Rule(2, "M", False, -1) # Never cleaves before W, followed by M, except...
W_0M2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before W, followed by M, followed by L, except...
Q_W_0M2L1M1 = rule.Rule(-1, "Q", True, -1) # Always cleaves before W, followed by M, followed by L, preceded by Q, except...
W_0M2L1.rules.append(Q_W_0M2L1M1)
W_0M2.rules.append(W_0M2L1)
W_0.rules.append(W_0M2)
W_0F2 = rule.Rule(2, "F", False, -1) # Never cleaves before W, followed by F, except...
W_0F2M1 = rule.Rule(1, "M", False, -1) # Never cleaves before W, followed by F, followed by M, except...
L_W_0F2M1M1 = rule.Rule(-1, "L", True, -1) # Always cleaves before W, followed by F, followed by M, preceded by L, except...
W_0F2M1.rules.append(L_W_0F2M1M1)
W_0F2.rules.append(W_0F2M1)
W_0.rules.append(W_0F2)
ENZ.append(W_0)

Y_0 = rule.Rule(0, "Y", False, 0) # Never cleaves before Y, except...
L_Y_0M1 = rule.Rule(-1, "L", True, -1) # Always cleaves before Y, preceded by L, except...
Y_0.rules.append(L_Y_0M1)
Y_0M2 = rule.Rule(2, "M", False, -1) # Never cleaves before Y, followed by M, except...
Y_0M2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before Y, followed by M, followed by S, except...
S_Y_0M2S1M1 = rule.Rule(-1, "S", True, -1) # Always cleaves before Y, followed by M, followed by S, preceded by S, except...
Y_0M2S1.rules.append(S_Y_0M2S1M1)
Y_0M2.rules.append(Y_0M2S1)
Y_0.rules.append(Y_0M2)
ENZ.append(Y_0)

D_0 = rule.Rule(0, "D", False, 0) # Never cleaves before D, except...
D_0F1 = rule.Rule(1, "F", False, -1) # Never cleaves before D, followed by F, except...
M_D_0F1M1 = rule.Rule(-1, "M", True, -1) # Always cleaves before D, followed by F, preceded by M, except...
D_0F1.rules.append(M_D_0F1M1)
D_0.rules.append(D_0F1)
D_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before D, followed by A, except...
D_0A2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before D, followed by A, followed by S, except...
F_D_0A2S1M1 = rule.Rule(-1, "F", True, -1) # Always cleaves before D, followed by A, followed by S, preceded by F, except...
D_0A2S1.rules.append(F_D_0A2S1M1)
D_0A2.rules.append(D_0A2S1)
D_0.rules.append(D_0A2)
ENZ.append(D_0)

N_0 = rule.Rule(0, "N", False, 0) # Never cleaves before N, except...
N_0T1 = rule.Rule(1, "T", False, -1) # Never cleaves before N, followed by T, except...
M_N_0T1M1 = rule.Rule(-1, "M", True, -1) # Always cleaves before N, followed by T, preceded by M, except...
N_0T1.rules.append(M_N_0T1M1)
N_0.rules.append(N_0T1)
N_0H2 = rule.Rule(2, "H", False, -1) # Never cleaves before N, followed by H, except...
N_0H2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before N, followed by H, followed by Q, except...
V_N_0H2Q1M1 = rule.Rule(-1, "V", True, -1) # Always cleaves before N, followed by H, followed by Q, preceded by V, except...
N_0H2Q1.rules.append(V_N_0H2Q1M1)
N_0H2.rules.append(N_0H2Q1)
N_0.rules.append(N_0H2)
ENZ.append(N_0)

T_0 = rule.Rule(0, "T", False, 0) # Never cleaves before T, except...
T_0K2 = rule.Rule(2, "K", False, -1) # Never cleaves before T, followed by K, except...
T_0K2M1 = rule.Rule(1, "M", False, -1) # Never cleaves before T, followed by K, followed by M, except...
Q_T_0K2M1M1 = rule.Rule(-1, "Q", True, -1) # Always cleaves before T, followed by K, followed by M, preceded by Q, except...
T_0K2M1.rules.append(Q_T_0K2M1M1)
T_0K2.rules.append(T_0K2M1)
T_0.rules.append(T_0K2)
T_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before T, followed by T, except...
T_0T2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before T, followed by T, followed by Q, except...
V_T_0T2Q1M1 = rule.Rule(-1, "V", True, -1) # Always cleaves before T, followed by T, followed by Q, preceded by V, except...
T_0T2Q1.rules.append(V_T_0T2Q1M1)
T_0T2.rules.append(T_0T2Q1)
T_0T2F1 = rule.Rule(1, "F", False, -1) # Never cleaves before T, followed by T, followed by F, except...
G_T_0T2F1M1 = rule.Rule(-1, "G", True, -1) # Always cleaves before T, followed by T, followed by F, preceded by G, except...
T_0T2F1.rules.append(G_T_0T2F1M1)
T_0T2.rules.append(T_0T2F1)
T_0.rules.append(T_0T2)
T_0D2 = rule.Rule(2, "D", False, -1) # Never cleaves before T, followed by D, except...
T_0D2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before T, followed by D, followed by S, except...
F_T_0D2S1M1 = rule.Rule(-1, "F", True, -1) # Always cleaves before T, followed by D, followed by S, preceded by F, except...
T_0D2S1.rules.append(F_T_0D2S1M1)
T_0D2.rules.append(T_0D2S1)
T_0.rules.append(T_0D2)
ENZ.append(T_0)

V_0 = rule.Rule(0, "V", False, 0) # Never cleaves before V, except...
V_0Q2 = rule.Rule(2, "Q", False, -1) # Never cleaves before V, followed by Q, except...
V_0Q2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before V, followed by Q, followed by T, except...
I_V_0Q2T1M1 = rule.Rule(-1, "I", True, -1) # Always cleaves before V, followed by Q, followed by T, preceded by I, except...
V_0Q2T1.rules.append(I_V_0Q2T1M1)
V_0Q2.rules.append(V_0Q2T1)
V_0Q2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before V, followed by Q, followed by N, except...
F_V_0Q2N1M1 = rule.Rule(-1, "F", True, -1) # Always cleaves before V, followed by Q, followed by N, preceded by F, except...
V_0Q2N1.rules.append(F_V_0Q2N1M1)
V_0Q2.rules.append(V_0Q2N1)
V_0.rules.append(V_0Q2)
V_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before V, followed by A, except...
V_0A2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before V, followed by A, followed by E, except...
L_V_0A2E1M1 = rule.Rule(-1, "L", True, -1) # Always cleaves before V, followed by A, followed by E, preceded by L, except...
V_0A2E1.rules.append(L_V_0A2E1M1)
V_0A2.rules.append(V_0A2E1)
V_0.rules.append(V_0A2)
V_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before V, followed by G, except...
V_0G2F1 = rule.Rule(1, "F", False, -1) # Never cleaves before V, followed by G, followed by F, except...
K_V_0G2F1M1 = rule.Rule(-1, "K", True, -1) # Always cleaves before V, followed by G, followed by F, preceded by K, except...
V_0G2F1.rules.append(K_V_0G2F1M1)
V_0G2.rules.append(V_0G2F1)
V_0.rules.append(V_0G2)
V_0W2 = rule.Rule(2, "W", False, -1) # Never cleaves before V, followed by W, except...
V_0W2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before V, followed by W, followed by Q, except...
F_V_0W2Q1M1 = rule.Rule(-1, "F", True, -1) # Always cleaves before V, followed by W, followed by Q, preceded by F, except...
V_0W2Q1.rules.append(F_V_0W2Q1M1)
V_0W2.rules.append(V_0W2Q1)
V_0.rules.append(V_0W2)
ENZ.append(V_0)

I_0 = rule.Rule(0, "I", False, 0) # Never cleaves before I, except...
I_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before I, followed by T, except...
I_0T2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before I, followed by T, followed by V, except...
L_I_0T2V1M1 = rule.Rule(-1, "L", True, -1) # Always cleaves before I, followed by T, followed by V, preceded by L, except...
I_0T2V1.rules.append(L_I_0T2V1M1)
I_0T2.rules.append(I_0T2V1)
I_0.rules.append(I_0T2)
ENZ.append(I_0)

G_0 = rule.Rule(0, "G", False, 0) # Never cleaves before G, except...
G_0D2 = rule.Rule(2, "D", False, -1) # Never cleaves before G, followed by D, except...
G_0D2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before G, followed by D, followed by L, except...
K_G_0D2L1M1 = rule.Rule(-1, "K", True, -1) # Always cleaves before G, followed by D, followed by L, preceded by K, except...
G_0D2L1.rules.append(K_G_0D2L1M1)
G_0D2.rules.append(G_0D2L1)
G_0.rules.append(G_0D2)
G_0F2 = rule.Rule(2, "F", False, -1) # Never cleaves before G, followed by F, except...
G_0F2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before G, followed by F, followed by T, except...
Q_G_0F2T1M1 = rule.Rule(-1, "Q", True, -1) # Always cleaves before G, followed by F, followed by T, preceded by Q, except...
G_0F2T1.rules.append(Q_G_0F2T1M1)
G_0F2.rules.append(G_0F2T1)
G_0.rules.append(G_0F2)
G_0H2 = rule.Rule(2, "H", False, -1) # Never cleaves before G, followed by H, except...
G_0H2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before G, followed by H, followed by S, except...
C_G_0H2S1M1 = rule.Rule(-1, "C", True, -1) # Always cleaves before G, followed by H, followed by S, preceded by C, except...
G_0H2S1.rules.append(C_G_0H2S1M1)
G_0H2.rules.append(G_0H2S1)
G_0.rules.append(G_0H2)
G_0C2 = rule.Rule(2, "C", False, -1) # Never cleaves before G, followed by C, except...
G_0C2R1 = rule.Rule(1, "R", False, -1) # Never cleaves before G, followed by C, followed by R, except...
F_G_0C2R1M1 = rule.Rule(-1, "F", True, -1) # Always cleaves before G, followed by C, followed by R, preceded by F, except...
G_0C2R1.rules.append(F_G_0C2R1M1)
G_0C2.rules.append(G_0C2R1)
G_0.rules.append(G_0C2)
ENZ.append(G_0)

K_0 = rule.Rule(0, "K", False, 0) # Never cleaves before K, except...
K_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before K, followed by L, except...
K_0L2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before K, followed by L, followed by G, except...
M_K_0L2G1M1 = rule.Rule(-1, "M", True, -1) # Always cleaves before K, followed by L, followed by G, preceded by M, except...
K_0L2G1.rules.append(M_K_0L2G1M1)
K_0L2.rules.append(K_0L2G1)
K_0.rules.append(K_0L2)
K_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before K, followed by P, except...
K_0P2R1 = rule.Rule(1, "R", False, -1) # Never cleaves before K, followed by P, followed by R, except...
M_K_0P2R1M1 = rule.Rule(-1, "M", True, -1) # Always cleaves before K, followed by P, followed by R, preceded by M, except...
K_0P2R1.rules.append(M_K_0P2R1M1)
K_0P2.rules.append(K_0P2R1)
K_0.rules.append(K_0P2)
ENZ.append(K_0)

Q_0 = rule.Rule(0, "Q", False, 0) # Never cleaves before Q, except...
Q_0M2 = rule.Rule(2, "M", False, -1) # Never cleaves before Q, followed by M, except...
Q_0M2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before Q, followed by M, followed by T, except...
T_Q_0M2T1M1 = rule.Rule(-1, "T", True, -1) # Always cleaves before Q, followed by M, followed by T, preceded by T, except...
Q_0M2T1.rules.append(T_Q_0M2T1M1)
Q_0M2.rules.append(Q_0M2T1)
Q_0.rules.append(Q_0M2)
Q_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before Q, followed by T, except...
Q_0T2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before Q, followed by T, followed by G, except...
S_Q_0T2G1M1 = rule.Rule(-1, "S", True, -1) # Always cleaves before Q, followed by T, followed by G, preceded by S, except...
Q_0T2G1.rules.append(S_Q_0T2G1M1)
Q_0T2.rules.append(Q_0T2G1)
Q_0.rules.append(Q_0T2)
Q_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before Q, followed by L, except...
Q_0L2H1 = rule.Rule(1, "H", False, -1) # Never cleaves before Q, followed by L, followed by H, except...
N_Q_0L2H1M1 = rule.Rule(-1, "N", True, -1) # Always cleaves before Q, followed by L, followed by H, preceded by N, except...
Q_0L2H1.rules.append(N_Q_0L2H1M1)
Q_0L2.rules.append(Q_0L2H1)
Q_0L2W1 = rule.Rule(1, "W", False, -1) # Never cleaves before Q, followed by L, followed by W, except...
V_Q_0L2W1M1 = rule.Rule(-1, "V", True, -1) # Always cleaves before Q, followed by L, followed by W, preceded by V, except...
Q_0L2W1.rules.append(V_Q_0L2W1M1)
Q_0L2.rules.append(Q_0L2W1)
Q_0.rules.append(Q_0L2)
ENZ.append(Q_0)

M_0 = rule.Rule(0, "M", False, 0) # Never cleaves before M, except...
M_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before M, followed by G, except...
M_0G2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before M, followed by G, followed by K, except...
T_M_0G2K1M1 = rule.Rule(-1, "T", True, -1) # Always cleaves before M, followed by G, followed by K, preceded by T, except...
M_0G2K1.rules.append(T_M_0G2K1M1)
M_0G2.rules.append(M_0G2K1)
M_0.rules.append(M_0G2)
M_0F2 = rule.Rule(2, "F", False, -1) # Never cleaves before M, followed by F, except...
M_0F2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before M, followed by F, followed by D, except...
W_M_0F2D1M1 = rule.Rule(-1, "W", True, -1) # Always cleaves before M, followed by F, followed by D, preceded by W, except...
M_0F2D1.rules.append(W_M_0F2D1M1)
M_0F2.rules.append(M_0F2D1)
M_0.rules.append(M_0F2)
M_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before M, followed by T, except...
M_0T2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before M, followed by T, followed by N, except...
L_M_0T2N1M1 = rule.Rule(-1, "L", True, -1) # Always cleaves before M, followed by T, followed by N, preceded by L, except...
M_0T2N1.rules.append(L_M_0T2N1M1)
M_0T2.rules.append(M_0T2N1)
M_0.rules.append(M_0T2)
M_0R2 = rule.Rule(2, "R", False, -1) # Never cleaves before M, followed by R, except...
M_0R2F1 = rule.Rule(1, "F", False, -1) # Never cleaves before M, followed by R, followed by F, except...
W_M_0R2F1M1 = rule.Rule(-1, "W", True, -1) # Always cleaves before M, followed by R, followed by F, preceded by W, except...
M_0R2F1.rules.append(W_M_0R2F1M1)
M_0R2.rules.append(M_0R2F1)
M_0.rules.append(M_0R2)
M_0H2 = rule.Rule(2, "H", False, -1) # Never cleaves before M, followed by H, except...
M_0H2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before M, followed by H, followed by E, except...
S_M_0H2E1M1 = rule.Rule(-1, "S", True, -1) # Always cleaves before M, followed by H, followed by E, preceded by S, except...
M_0H2E1.rules.append(S_M_0H2E1M1)
M_0H2.rules.append(M_0H2E1)
M_0.rules.append(M_0H2)
ENZ.append(M_0)

S_0 = rule.Rule(0, "S", False, 0) # Never cleaves before S, except...
S_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before S, followed by G, except...
S_0G2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before S, followed by G, followed by Q, except...
H_S_0G2Q1M1 = rule.Rule(-1, "H", True, -1) # Always cleaves before S, followed by G, followed by Q, preceded by H, except...
S_0G2Q1.rules.append(H_S_0G2Q1M1)
S_0G2.rules.append(S_0G2Q1)
S_0G2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before S, followed by G, followed by E, except...
L_S_0G2E1M1 = rule.Rule(-1, "L", True, -1) # Always cleaves before S, followed by G, followed by E, preceded by L, except...
S_0G2E1.rules.append(L_S_0G2E1M1)
S_0G2.rules.append(S_0G2E1)
S_0.rules.append(S_0G2)
S_0Y2 = rule.Rule(2, "Y", False, -1) # Never cleaves before S, followed by Y, except...
S_0Y2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before S, followed by Y, followed by D, except...
T_S_0Y2D1M1 = rule.Rule(-1, "T", True, -1) # Always cleaves before S, followed by Y, followed by D, preceded by T, except...
S_0Y2D1.rules.append(T_S_0Y2D1M1)
S_0Y2.rules.append(S_0Y2D1)
S_0.rules.append(S_0Y2)
S_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before S, followed by L, except...
S_0L2H1 = rule.Rule(1, "H", False, -1) # Never cleaves before S, followed by L, followed by H, except...
G_S_0L2H1M1 = rule.Rule(-1, "G", True, -1) # Always cleaves before S, followed by L, followed by H, preceded by G, except...
S_0L2H1.rules.append(G_S_0L2H1M1)
S_0L2.rules.append(S_0L2H1)
S_0.rules.append(S_0L2)
S_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before S, followed by E, except...
S_0E2M1 = rule.Rule(1, "M", False, -1) # Never cleaves before S, followed by E, followed by M, except...
Y_S_0E2M1M1 = rule.Rule(-1, "Y", True, -1) # Always cleaves before S, followed by E, followed by M, preceded by Y, except...
S_0E2M1.rules.append(Y_S_0E2M1M1)
S_0E2.rules.append(S_0E2M1)
S_0.rules.append(S_0E2)
ENZ.append(S_0)

C_0 = rule.Rule(0, "C", False, 0) # Never cleaves before C, except...
C_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before C, followed by S, except...
C_0S2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before C, followed by S, followed by G, except...
L_C_0S2G1M1 = rule.Rule(-1, "L", True, -1) # Always cleaves before C, followed by S, followed by G, preceded by L, except...
C_0S2G1.rules.append(L_C_0S2G1M1)
C_0S2.rules.append(C_0S2G1)
C_0.rules.append(C_0S2)
C_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before C, followed by L, except...
C_0L2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before C, followed by L, followed by E, except...
R_C_0L2E1M1 = rule.Rule(-1, "R", True, -1) # Always cleaves before C, followed by L, followed by E, preceded by R, except...
C_0L2E1.rules.append(R_C_0L2E1M1)
C_0L2.rules.append(C_0L2E1)
C_0.rules.append(C_0L2)
ENZ.append(C_0)

E_0 = rule.Rule(0, "E", False, 0) # Never cleaves before E, except...
E_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before E, followed by E, except...
E_0E2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before E, followed by E, followed by G, except...
S_E_0E2G1M1 = rule.Rule(-1, "S", True, -1) # Always cleaves before E, followed by E, followed by G, preceded by S, except...
E_0E2G1.rules.append(S_E_0E2G1M1)
E_0E2.rules.append(E_0E2G1)
E_0.rules.append(E_0E2)
E_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before E, followed by A, except...
E_0A2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before E, followed by A, followed by T, except...
K_E_0A2T1M1 = rule.Rule(-1, "K", True, -1) # Always cleaves before E, followed by A, followed by T, preceded by K, except...
E_0A2T1.rules.append(K_E_0A2T1M1)
E_0A2.rules.append(E_0A2T1)
E_0.rules.append(E_0A2)
E_0F2 = rule.Rule(2, "F", False, -1) # Never cleaves before E, followed by F, except...
E_0F2H1 = rule.Rule(1, "H", False, -1) # Never cleaves before E, followed by F, followed by H, except...
M_E_0F2H1M1 = rule.Rule(-1, "M", True, -1) # Always cleaves before E, followed by F, followed by H, preceded by M, except...
E_0F2H1.rules.append(M_E_0F2H1M1)
E_0F2.rules.append(E_0F2H1)
E_0.rules.append(E_0F2)
ENZ.append(E_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "aminopeptidase-ap1", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme PSMD14_peptidase
ENZ = []

K_0 = rule.Rule(0, "K", False, 0) # Never cleaves before K, except...
K_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before K, followed by I, except...
K_0I2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before K, followed by I, followed by T, except...
G_K_0I2T1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before K, followed by I, followed by T, preceded by G, except...
G_G_K_0I2T1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before K, followed by I, followed by T, preceded by G, preceded by G, except...
R_G_G_K_0I2T1M1M2M3 = rule.Rule(-3, "R", True, -1) # Always cleaves before K, followed by I, followed by T, preceded by G, preceded by G, preceded by R, except...
G_G_K_0I2T1M1M2.rules.append(R_G_G_K_0I2T1M1M2M3)
G_K_0I2T1M1.rules.append(G_G_K_0I2T1M1M2)
K_0I2T1.rules.append(G_K_0I2T1M1)
K_0I2.rules.append(K_0I2T1)
K_0.rules.append(K_0I2)
K_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before K, followed by S, except...
K_0S2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before K, followed by S, followed by E, except...
G_K_0S2E1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before K, followed by S, followed by E, preceded by G, except...
G_G_K_0S2E1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before K, followed by S, followed by E, preceded by G, preceded by G, except...
R_G_G_K_0S2E1M1M2M3 = rule.Rule(-3, "R", True, -1) # Always cleaves before K, followed by S, followed by E, preceded by G, preceded by G, preceded by R, except...
G_G_K_0S2E1M1M2.rules.append(R_G_G_K_0S2E1M1M2M3)
G_K_0S2E1M1.rules.append(G_G_K_0S2E1M1M2)
K_0S2E1.rules.append(G_K_0S2E1M1)
K_0S2.rules.append(K_0S2E1)
K_0.rules.append(K_0S2)
ENZ.append(K_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "PSMD14_peptidase", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme kexin
ENZ = []

R_1 = rule.Rule(0, "R", False, 1) # Never cleaves after R, except...
K_R_1M1 = rule.Rule(-1, "K", False, -1) # Never cleaves after R, preceded by K, except...
T_K_R_1M1M2 = rule.Rule(-2, "T", True, -1) # Always cleaves after R, preceded by K, preceded by T, except...
K_R_1M1.rules.append(T_K_R_1M1M2)
R_1.rules.append(K_R_1M1)
R_R_1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves after R, preceded by R, except...
Q_R_R_1M1M2 = rule.Rule(-2, "Q", True, -1) # Always cleaves after R, preceded by R, preceded by Q, except...
R_R_1M1.rules.append(Q_R_R_1M1M2)
R_1.rules.append(R_R_1M1)
ENZ.append(R_1)

M_0 = rule.Rule(0, "M", False, 0) # Never cleaves before M, except...
M_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before M, followed by I, except...
M_0I2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before M, followed by I, followed by P, except...
R_M_0I2P1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before M, followed by I, followed by P, preceded by R, except...
K_R_M_0I2P1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before M, followed by I, followed by P, preceded by R, preceded by K, except...
A_K_R_M_0I2P1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before M, followed by I, followed by P, preceded by R, preceded by K, preceded by A, except...
K_R_M_0I2P1M1M2.rules.append(A_K_R_M_0I2P1M1M2M3)
R_M_0I2P1M1.rules.append(K_R_M_0I2P1M1M2)
M_0I2P1.rules.append(R_M_0I2P1M1)
M_0I2.rules.append(M_0I2P1)
M_0.rules.append(M_0I2)
M_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before M, followed by V, except...
M_0V2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before M, followed by V, followed by P, except...
R_M_0V2P1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before M, followed by V, followed by P, preceded by R, except...
K_R_M_0V2P1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before M, followed by V, followed by P, preceded by R, preceded by K, except...
R_K_R_M_0V2P1M1M2M3 = rule.Rule(-3, "R", True, -1) # Always cleaves before M, followed by V, followed by P, preceded by R, preceded by K, preceded by R, except...
K_R_M_0V2P1M1M2.rules.append(R_K_R_M_0V2P1M1M2M3)
Q_K_R_M_0V2P1M1M2M3 = rule.Rule(-3, "Q", True, -1) # Always cleaves before M, followed by V, followed by P, preceded by R, preceded by K, preceded by Q, except...
K_R_M_0V2P1M1M2.rules.append(Q_K_R_M_0V2P1M1M2M3)
R_M_0V2P1M1.rules.append(K_R_M_0V2P1M1M2)
M_0V2P1.rules.append(R_M_0V2P1M1)
M_0V2.rules.append(M_0V2P1)
M_0.rules.append(M_0V2)
ENZ.append(M_0)

D_0 = rule.Rule(0, "D", False, 0) # Never cleaves before D, except...
D_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before D, followed by N, except...
D_0N2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before D, followed by N, followed by A, except...
R_D_0N2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by N, followed by A, preceded by R, except...
K_R_D_0N2A1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by N, followed by A, preceded by R, preceded by K, except...
S_K_R_D_0N2A1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before D, followed by N, followed by A, preceded by R, preceded by K, preceded by S, except...
K_R_D_0N2A1M1M2.rules.append(S_K_R_D_0N2A1M1M2M3)
T_K_R_D_0N2A1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before D, followed by N, followed by A, preceded by R, preceded by K, preceded by T, except...
K_R_D_0N2A1M1M2.rules.append(T_K_R_D_0N2A1M1M2M3)
G_K_R_D_0N2A1M1M2M3 = rule.Rule(-3, "G", True, -1) # Always cleaves before D, followed by N, followed by A, preceded by R, preceded by K, preceded by G, except...
K_R_D_0N2A1M1M2.rules.append(G_K_R_D_0N2A1M1M2M3)
R_D_0N2A1M1.rules.append(K_R_D_0N2A1M1M2)
D_0N2A1.rules.append(R_D_0N2A1M1)
D_0N2.rules.append(D_0N2A1)
D_0.rules.append(D_0N2)
D_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before D, followed by S, except...
D_0S2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before D, followed by S, followed by V, except...
R_D_0S2V1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by S, followed by V, preceded by R, except...
K_R_D_0S2V1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by S, followed by V, preceded by R, preceded by K, except...
T_K_R_D_0S2V1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before D, followed by S, followed by V, preceded by R, preceded by K, preceded by T, except...
K_R_D_0S2V1M1M2.rules.append(T_K_R_D_0S2V1M1M2M3)
N_K_R_D_0S2V1M1M2M3 = rule.Rule(-3, "N", True, -1) # Always cleaves before D, followed by S, followed by V, preceded by R, preceded by K, preceded by N, except...
K_R_D_0S2V1M1M2.rules.append(N_K_R_D_0S2V1M1M2M3)
R_D_0S2V1M1.rules.append(K_R_D_0S2V1M1M2)
D_0S2V1.rules.append(R_D_0S2V1M1)
D_0S2.rules.append(D_0S2V1)
D_0S2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before D, followed by S, followed by G, except...
R_D_0S2G1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by S, followed by G, preceded by R, except...
R_R_D_0S2G1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before D, followed by S, followed by G, preceded by R, preceded by R, except...
S_R_R_D_0S2G1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before D, followed by S, followed by G, preceded by R, preceded by R, preceded by S, except...
R_R_D_0S2G1M1M2.rules.append(S_R_R_D_0S2G1M1M2M3)
R_D_0S2G1M1.rules.append(R_R_D_0S2G1M1M2)
D_0S2G1.rules.append(R_D_0S2G1M1)
D_0S2.rules.append(D_0S2G1)
D_0S2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before D, followed by S, followed by A, except...
R_D_0S2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by S, followed by A, preceded by R, except...
K_R_D_0S2A1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by S, followed by A, preceded by R, preceded by K, except...
Y_K_R_D_0S2A1M1M2M3 = rule.Rule(-3, "Y", True, -1) # Always cleaves before D, followed by S, followed by A, preceded by R, preceded by K, preceded by Y, except...
K_R_D_0S2A1M1M2.rules.append(Y_K_R_D_0S2A1M1M2M3)
R_D_0S2A1M1.rules.append(K_R_D_0S2A1M1M2)
D_0S2A1.rules.append(R_D_0S2A1M1)
D_0S2.rules.append(D_0S2A1)
D_0.rules.append(D_0S2)
D_0Q2 = rule.Rule(2, "Q", False, -1) # Never cleaves before D, followed by Q, except...
D_0Q2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before D, followed by Q, followed by V, except...
R_D_0Q2V1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by Q, followed by V, preceded by R, except...
K_R_D_0Q2V1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by Q, followed by V, preceded by R, preceded by K, except...
V_K_R_D_0Q2V1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before D, followed by Q, followed by V, preceded by R, preceded by K, preceded by V, except...
K_R_D_0Q2V1M1M2.rules.append(V_K_R_D_0Q2V1M1M2M3)
R_D_0Q2V1M1.rules.append(K_R_D_0Q2V1M1M2)
D_0Q2V1.rules.append(R_D_0Q2V1M1)
D_0Q2.rules.append(D_0Q2V1)
D_0.rules.append(D_0Q2)
D_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before D, followed by V, except...
D_0V2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before D, followed by V, followed by V, except...
R_D_0V2V1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by V, followed by V, preceded by R, except...
K_R_D_0V2V1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by V, followed by V, preceded by R, preceded by K, except...
A_K_R_D_0V2V1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by V, followed by V, preceded by R, preceded by K, preceded by A, except...
K_R_D_0V2V1M1M2.rules.append(A_K_R_D_0V2V1M1M2M3)
E_K_R_D_0V2V1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before D, followed by V, followed by V, preceded by R, preceded by K, preceded by E, except...
K_R_D_0V2V1M1M2.rules.append(E_K_R_D_0V2V1M1M2M3)
N_K_R_D_0V2V1M1M2M3 = rule.Rule(-3, "N", True, -1) # Always cleaves before D, followed by V, followed by V, preceded by R, preceded by K, preceded by N, except...
K_R_D_0V2V1M1M2.rules.append(N_K_R_D_0V2V1M1M2M3)
R_D_0V2V1M1.rules.append(K_R_D_0V2V1M1M2)
D_0V2V1.rules.append(R_D_0V2V1M1)
D_0V2.rules.append(D_0V2V1)
D_0V2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before D, followed by V, followed by G, except...
R_D_0V2G1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by V, followed by G, preceded by R, except...
K_R_D_0V2G1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by V, followed by G, preceded by R, preceded by K, except...
A_K_R_D_0V2G1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by V, followed by G, preceded by R, preceded by K, preceded by A, except...
K_R_D_0V2G1M1M2.rules.append(A_K_R_D_0V2G1M1M2M3)
R_D_0V2G1M1.rules.append(K_R_D_0V2G1M1M2)
D_0V2G1.rules.append(R_D_0V2G1M1)
D_0V2.rules.append(D_0V2G1)
D_0V2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before D, followed by V, followed by L, except...
R_D_0V2L1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by V, followed by L, preceded by R, except...
K_R_D_0V2L1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by V, followed by L, preceded by R, preceded by K, except...
E_K_R_D_0V2L1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before D, followed by V, followed by L, preceded by R, preceded by K, preceded by E, except...
K_R_D_0V2L1M1M2.rules.append(E_K_R_D_0V2L1M1M2M3)
N_K_R_D_0V2L1M1M2M3 = rule.Rule(-3, "N", True, -1) # Always cleaves before D, followed by V, followed by L, preceded by R, preceded by K, preceded by N, except...
K_R_D_0V2L1M1M2.rules.append(N_K_R_D_0V2L1M1M2M3)
R_D_0V2L1M1.rules.append(K_R_D_0V2L1M1M2)
D_0V2L1.rules.append(R_D_0V2L1M1)
D_0V2.rules.append(D_0V2L1)
D_0V2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before D, followed by V, followed by S, except...
R_D_0V2S1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by V, followed by S, preceded by R, except...
K_R_D_0V2S1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by V, followed by S, preceded by R, preceded by K, except...
H_K_R_D_0V2S1M1M2M3 = rule.Rule(-3, "H", True, -1) # Always cleaves before D, followed by V, followed by S, preceded by R, preceded by K, preceded by H, except...
K_R_D_0V2S1M1M2.rules.append(H_K_R_D_0V2S1M1M2M3)
R_D_0V2S1M1.rules.append(K_R_D_0V2S1M1M2)
D_0V2S1.rules.append(R_D_0V2S1M1)
D_0V2.rules.append(D_0V2S1)
D_0V2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before D, followed by V, followed by Q, except...
R_D_0V2Q1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by V, followed by Q, preceded by R, except...
K_R_D_0V2Q1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by V, followed by Q, preceded by R, preceded by K, except...
K_K_R_D_0V2Q1M1M2M3 = rule.Rule(-3, "K", True, -1) # Always cleaves before D, followed by V, followed by Q, preceded by R, preceded by K, preceded by K, except...
K_R_D_0V2Q1M1M2.rules.append(K_K_R_D_0V2Q1M1M2M3)
R_D_0V2Q1M1.rules.append(K_R_D_0V2Q1M1M2)
D_0V2Q1.rules.append(R_D_0V2Q1M1)
D_0V2.rules.append(D_0V2Q1)
D_0V2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before D, followed by V, followed by D, except...
R_D_0V2D1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by V, followed by D, preceded by R, except...
K_R_D_0V2D1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by V, followed by D, preceded by R, preceded by K, except...
H_K_R_D_0V2D1M1M2M3 = rule.Rule(-3, "H", True, -1) # Always cleaves before D, followed by V, followed by D, preceded by R, preceded by K, preceded by H, except...
K_R_D_0V2D1M1M2.rules.append(H_K_R_D_0V2D1M1M2M3)
R_D_0V2D1M1.rules.append(K_R_D_0V2D1M1M2)
D_0V2D1.rules.append(R_D_0V2D1M1)
D_0V2.rules.append(D_0V2D1)
D_0.rules.append(D_0V2)
D_0K2 = rule.Rule(2, "K", False, -1) # Never cleaves before D, followed by K, except...
D_0K2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before D, followed by K, followed by D, except...
R_D_0K2D1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by K, followed by D, preceded by R, except...
K_R_D_0K2D1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by K, followed by D, preceded by R, preceded by K, except...
N_K_R_D_0K2D1M1M2M3 = rule.Rule(-3, "N", True, -1) # Always cleaves before D, followed by K, followed by D, preceded by R, preceded by K, preceded by N, except...
K_R_D_0K2D1M1M2.rules.append(N_K_R_D_0K2D1M1M2M3)
R_D_0K2D1M1.rules.append(K_R_D_0K2D1M1M2)
D_0K2D1.rules.append(R_D_0K2D1M1)
D_0K2.rules.append(D_0K2D1)
D_0K2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before D, followed by K, followed by A, except...
R_D_0K2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by K, followed by A, preceded by R, except...
K_R_D_0K2A1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by K, followed by A, preceded by R, preceded by K, except...
A_K_R_D_0K2A1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by K, followed by A, preceded by R, preceded by K, preceded by A, except...
K_R_D_0K2A1M1M2.rules.append(A_K_R_D_0K2A1M1M2M3)
R_D_0K2A1M1.rules.append(K_R_D_0K2A1M1M2)
D_0K2A1.rules.append(R_D_0K2A1M1)
D_0K2.rules.append(D_0K2A1)
D_0K2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before D, followed by K, followed by Q, except...
R_D_0K2Q1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by K, followed by Q, preceded by R, except...
K_R_D_0K2Q1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by K, followed by Q, preceded by R, preceded by K, except...
K_K_R_D_0K2Q1M1M2M3 = rule.Rule(-3, "K", True, -1) # Always cleaves before D, followed by K, followed by Q, preceded by R, preceded by K, preceded by K, except...
K_R_D_0K2Q1M1M2.rules.append(K_K_R_D_0K2Q1M1M2M3)
R_D_0K2Q1M1.rules.append(K_R_D_0K2Q1M1M2)
D_0K2Q1.rules.append(R_D_0K2Q1M1)
D_0K2.rules.append(D_0K2Q1)
D_0K2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before D, followed by K, followed by P, except...
R_D_0K2P1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by K, followed by P, preceded by R, except...
K_R_D_0K2P1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by K, followed by P, preceded by R, preceded by K, except...
F_K_R_D_0K2P1M1M2M3 = rule.Rule(-3, "F", True, -1) # Always cleaves before D, followed by K, followed by P, preceded by R, preceded by K, preceded by F, except...
K_R_D_0K2P1M1M2.rules.append(F_K_R_D_0K2P1M1M2M3)
R_D_0K2P1M1.rules.append(K_R_D_0K2P1M1M2)
D_0K2P1.rules.append(R_D_0K2P1M1)
D_0K2.rules.append(D_0K2P1)
D_0K2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before D, followed by K, followed by V, except...
R_D_0K2V1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by K, followed by V, preceded by R, except...
K_R_D_0K2V1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by K, followed by V, preceded by R, preceded by K, except...
C_K_R_D_0K2V1M1M2M3 = rule.Rule(-3, "C", True, -1) # Always cleaves before D, followed by K, followed by V, preceded by R, preceded by K, preceded by C, except...
K_R_D_0K2V1M1M2.rules.append(C_K_R_D_0K2V1M1M2M3)
R_D_0K2V1M1.rules.append(K_R_D_0K2V1M1M2)
D_0K2V1.rules.append(R_D_0K2V1M1)
K_D_0K2V1M1 = rule.Rule(-1, "K", False, -1) # Never cleaves before D, followed by K, followed by V, preceded by K, except...
K_K_D_0K2V1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by K, followed by V, preceded by K, preceded by K, except...
E_K_K_D_0K2V1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before D, followed by K, followed by V, preceded by K, preceded by K, preceded by E, except...
K_K_D_0K2V1M1M2.rules.append(E_K_K_D_0K2V1M1M2M3)
K_D_0K2V1M1.rules.append(K_K_D_0K2V1M1M2)
D_0K2V1.rules.append(K_D_0K2V1M1)
D_0K2.rules.append(D_0K2V1)
D_0.rules.append(D_0K2)
D_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before D, followed by E, except...
D_0E2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before D, followed by E, followed by D, except...
R_D_0E2D1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by E, followed by D, preceded by R, except...
K_R_D_0E2D1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by E, followed by D, preceded by R, preceded by K, except...
V_K_R_D_0E2D1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before D, followed by E, followed by D, preceded by R, preceded by K, preceded by V, except...
K_R_D_0E2D1M1M2.rules.append(V_K_R_D_0E2D1M1M2M3)
R_D_0E2D1M1.rules.append(K_R_D_0E2D1M1M2)
D_0E2D1.rules.append(R_D_0E2D1M1)
D_0E2.rules.append(D_0E2D1)
D_0E2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before D, followed by E, followed by T, except...
R_D_0E2T1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by E, followed by T, preceded by R, except...
K_R_D_0E2T1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by E, followed by T, preceded by R, preceded by K, except...
K_K_R_D_0E2T1M1M2M3 = rule.Rule(-3, "K", True, -1) # Always cleaves before D, followed by E, followed by T, preceded by R, preceded by K, preceded by K, except...
K_R_D_0E2T1M1M2.rules.append(K_K_R_D_0E2T1M1M2M3)
N_K_R_D_0E2T1M1M2M3 = rule.Rule(-3, "N", True, -1) # Always cleaves before D, followed by E, followed by T, preceded by R, preceded by K, preceded by N, except...
K_R_D_0E2T1M1M2.rules.append(N_K_R_D_0E2T1M1M2M3)
R_D_0E2T1M1.rules.append(K_R_D_0E2T1M1M2)
D_0E2T1.rules.append(R_D_0E2T1M1)
D_0E2.rules.append(D_0E2T1)
D_0E2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before D, followed by E, followed by A, except...
R_D_0E2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by E, followed by A, preceded by R, except...
K_R_D_0E2A1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by E, followed by A, preceded by R, preceded by K, except...
T_K_R_D_0E2A1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before D, followed by E, followed by A, preceded by R, preceded by K, preceded by T, except...
K_R_D_0E2A1M1M2.rules.append(T_K_R_D_0E2A1M1M2M3)
R_D_0E2A1M1.rules.append(K_R_D_0E2A1M1M2)
D_0E2A1.rules.append(R_D_0E2A1M1)
D_0E2.rules.append(D_0E2A1)
D_0.rules.append(D_0E2)
D_0D2 = rule.Rule(2, "D", False, -1) # Never cleaves before D, followed by D, except...
D_0D2C1 = rule.Rule(1, "C", False, -1) # Never cleaves before D, followed by D, followed by C, except...
R_D_0D2C1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by D, followed by C, preceded by R, except...
T_R_D_0D2C1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before D, followed by D, followed by C, preceded by R, preceded by T, except...
E_T_R_D_0D2C1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before D, followed by D, followed by C, preceded by R, preceded by T, preceded by E, except...
T_R_D_0D2C1M1M2.rules.append(E_T_R_D_0D2C1M1M2M3)
R_D_0D2C1M1.rules.append(T_R_D_0D2C1M1M2)
D_0D2C1.rules.append(R_D_0D2C1M1)
D_0D2.rules.append(D_0D2C1)
D_0D2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before D, followed by D, followed by E, except...
R_D_0D2E1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by D, followed by E, preceded by R, except...
K_R_D_0D2E1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by D, followed by E, preceded by R, preceded by K, except...
L_K_R_D_0D2E1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before D, followed by D, followed by E, preceded by R, preceded by K, preceded by L, except...
K_R_D_0D2E1M1M2.rules.append(L_K_R_D_0D2E1M1M2M3)
A_K_R_D_0D2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by D, followed by E, preceded by R, preceded by K, preceded by A, except...
K_R_D_0D2E1M1M2.rules.append(A_K_R_D_0D2E1M1M2M3)
R_D_0D2E1M1.rules.append(K_R_D_0D2E1M1M2)
D_0D2E1.rules.append(R_D_0D2E1M1)
D_0D2.rules.append(D_0D2E1)
D_0D2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before D, followed by D, followed by V, except...
R_D_0D2V1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by D, followed by V, preceded by R, except...
K_R_D_0D2V1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by D, followed by V, preceded by R, preceded by K, except...
I_K_R_D_0D2V1M1M2M3 = rule.Rule(-3, "I", True, -1) # Always cleaves before D, followed by D, followed by V, preceded by R, preceded by K, preceded by I, except...
K_R_D_0D2V1M1M2.rules.append(I_K_R_D_0D2V1M1M2M3)
R_D_0D2V1M1.rules.append(K_R_D_0D2V1M1M2)
D_0D2V1.rules.append(R_D_0D2V1M1)
D_0D2.rules.append(D_0D2V1)
D_0D2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before D, followed by D, followed by D, except...
R_D_0D2D1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by D, followed by D, preceded by R, except...
K_R_D_0D2D1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by D, followed by D, preceded by R, preceded by K, except...
N_K_R_D_0D2D1M1M2M3 = rule.Rule(-3, "N", True, -1) # Always cleaves before D, followed by D, followed by D, preceded by R, preceded by K, preceded by N, except...
K_R_D_0D2D1M1M2.rules.append(N_K_R_D_0D2D1M1M2M3)
R_D_0D2D1M1.rules.append(K_R_D_0D2D1M1M2)
D_0D2D1.rules.append(R_D_0D2D1M1)
D_0D2.rules.append(D_0D2D1)
D_0.rules.append(D_0D2)
D_0M2 = rule.Rule(2, "M", False, -1) # Never cleaves before D, followed by M, except...
D_0M2Y1 = rule.Rule(1, "Y", False, -1) # Never cleaves before D, followed by M, followed by Y, except...
R_D_0M2Y1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by M, followed by Y, preceded by R, except...
D_R_D_0M2Y1M1M2 = rule.Rule(-2, "D", False, -1) # Never cleaves before D, followed by M, followed by Y, preceded by R, preceded by D, except...
S_D_R_D_0M2Y1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before D, followed by M, followed by Y, preceded by R, preceded by D, preceded by S, except...
D_R_D_0M2Y1M1M2.rules.append(S_D_R_D_0M2Y1M1M2M3)
R_D_0M2Y1M1.rules.append(D_R_D_0M2Y1M1M2)
D_0M2Y1.rules.append(R_D_0M2Y1M1)
D_0M2.rules.append(D_0M2Y1)
D_0M2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before D, followed by M, followed by L, except...
R_D_0M2L1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by M, followed by L, preceded by R, except...
K_R_D_0M2L1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by M, followed by L, preceded by R, preceded by K, except...
A_K_R_D_0M2L1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by M, followed by L, preceded by R, preceded by K, preceded by A, except...
K_R_D_0M2L1M1M2.rules.append(A_K_R_D_0M2L1M1M2M3)
R_D_0M2L1M1.rules.append(K_R_D_0M2L1M1M2)
D_0M2L1.rules.append(R_D_0M2L1M1)
D_0M2.rules.append(D_0M2L1)
D_0.rules.append(D_0M2)
D_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before D, followed by I, except...
D_0I2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before D, followed by I, followed by V, except...
R_D_0I2V1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by I, followed by V, preceded by R, except...
K_R_D_0I2V1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by I, followed by V, preceded by R, preceded by K, except...
A_K_R_D_0I2V1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by I, followed by V, preceded by R, preceded by K, preceded by A, except...
K_R_D_0I2V1M1M2.rules.append(A_K_R_D_0I2V1M1M2M3)
R_D_0I2V1M1.rules.append(K_R_D_0I2V1M1M2)
D_0I2V1.rules.append(R_D_0I2V1M1)
D_0I2.rules.append(D_0I2V1)
D_0I2W1 = rule.Rule(1, "W", False, -1) # Never cleaves before D, followed by I, followed by W, except...
R_D_0I2W1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by I, followed by W, preceded by R, except...
A_R_D_0I2W1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before D, followed by I, followed by W, preceded by R, preceded by A, except...
R_A_R_D_0I2W1M1M2M3 = rule.Rule(-3, "R", True, -1) # Always cleaves before D, followed by I, followed by W, preceded by R, preceded by A, preceded by R, except...
A_R_D_0I2W1M1M2.rules.append(R_A_R_D_0I2W1M1M2M3)
R_D_0I2W1M1.rules.append(A_R_D_0I2W1M1M2)
D_0I2W1.rules.append(R_D_0I2W1M1)
D_0I2.rules.append(D_0I2W1)
D_0I2F1 = rule.Rule(1, "F", False, -1) # Never cleaves before D, followed by I, followed by F, except...
R_D_0I2F1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by I, followed by F, preceded by R, except...
K_R_D_0I2F1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by I, followed by F, preceded by R, preceded by K, except...
A_K_R_D_0I2F1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by I, followed by F, preceded by R, preceded by K, preceded by A, except...
K_R_D_0I2F1M1M2.rules.append(A_K_R_D_0I2F1M1M2M3)
R_D_0I2F1M1.rules.append(K_R_D_0I2F1M1M2)
D_0I2F1.rules.append(R_D_0I2F1M1)
D_0I2.rules.append(D_0I2F1)
D_0I2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before D, followed by I, followed by A, except...
R_D_0I2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by I, followed by A, preceded by R, except...
R_R_D_0I2A1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before D, followed by I, followed by A, preceded by R, preceded by R, except...
T_R_R_D_0I2A1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before D, followed by I, followed by A, preceded by R, preceded by R, preceded by T, except...
R_R_D_0I2A1M1M2.rules.append(T_R_R_D_0I2A1M1M2M3)
R_D_0I2A1M1.rules.append(R_R_D_0I2A1M1M2)
D_0I2A1.rules.append(R_D_0I2A1M1)
D_0I2.rules.append(D_0I2A1)
D_0I2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before D, followed by I, followed by N, except...
R_D_0I2N1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by I, followed by N, preceded by R, except...
K_R_D_0I2N1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by I, followed by N, preceded by R, preceded by K, except...
M_K_R_D_0I2N1M1M2M3 = rule.Rule(-3, "M", True, -1) # Always cleaves before D, followed by I, followed by N, preceded by R, preceded by K, preceded by M, except...
K_R_D_0I2N1M1M2.rules.append(M_K_R_D_0I2N1M1M2M3)
R_D_0I2N1M1.rules.append(K_R_D_0I2N1M1M2)
D_0I2N1.rules.append(R_D_0I2N1M1)
D_0I2.rules.append(D_0I2N1)
D_0.rules.append(D_0I2)
D_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before D, followed by A, except...
D_0A2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before D, followed by A, followed by G, except...
R_D_0A2G1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by A, followed by G, preceded by R, except...
K_R_D_0A2G1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by A, followed by G, preceded by R, preceded by K, except...
T_K_R_D_0A2G1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before D, followed by A, followed by G, preceded by R, preceded by K, preceded by T, except...
K_R_D_0A2G1M1M2.rules.append(T_K_R_D_0A2G1M1M2M3)
R_D_0A2G1M1.rules.append(K_R_D_0A2G1M1M2)
D_0A2G1.rules.append(R_D_0A2G1M1)
D_0A2.rules.append(D_0A2G1)
D_0A2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before D, followed by A, followed by L, except...
R_D_0A2L1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by A, followed by L, preceded by R, except...
K_R_D_0A2L1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by A, followed by L, preceded by R, preceded by K, except...
Q_K_R_D_0A2L1M1M2M3 = rule.Rule(-3, "Q", True, -1) # Always cleaves before D, followed by A, followed by L, preceded by R, preceded by K, preceded by Q, except...
K_R_D_0A2L1M1M2.rules.append(Q_K_R_D_0A2L1M1M2M3)
R_D_0A2L1M1.rules.append(K_R_D_0A2L1M1M2)
D_0A2L1.rules.append(R_D_0A2L1M1)
D_0A2.rules.append(D_0A2L1)
D_0A2Y1 = rule.Rule(1, "Y", False, -1) # Never cleaves before D, followed by A, followed by Y, except...
R_D_0A2Y1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by A, followed by Y, preceded by R, except...
K_R_D_0A2Y1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by A, followed by Y, preceded by R, preceded by K, except...
M_K_R_D_0A2Y1M1M2M3 = rule.Rule(-3, "M", True, -1) # Always cleaves before D, followed by A, followed by Y, preceded by R, preceded by K, preceded by M, except...
K_R_D_0A2Y1M1M2.rules.append(M_K_R_D_0A2Y1M1M2M3)
R_D_0A2Y1M1.rules.append(K_R_D_0A2Y1M1M2)
D_0A2Y1.rules.append(R_D_0A2Y1M1)
D_0A2.rules.append(D_0A2Y1)
D_0A2M1 = rule.Rule(1, "M", False, -1) # Never cleaves before D, followed by A, followed by M, except...
R_D_0A2M1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by A, followed by M, preceded by R, except...
K_R_D_0A2M1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by A, followed by M, preceded by R, preceded by K, except...
F_K_R_D_0A2M1M1M2M3 = rule.Rule(-3, "F", True, -1) # Always cleaves before D, followed by A, followed by M, preceded by R, preceded by K, preceded by F, except...
K_R_D_0A2M1M1M2.rules.append(F_K_R_D_0A2M1M1M2M3)
R_D_0A2M1M1.rules.append(K_R_D_0A2M1M1M2)
D_0A2M1.rules.append(R_D_0A2M1M1)
D_0A2.rules.append(D_0A2M1)
D_0A2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before D, followed by A, followed by V, except...
R_D_0A2V1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by A, followed by V, preceded by R, except...
K_R_D_0A2V1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by A, followed by V, preceded by R, preceded by K, except...
A_K_R_D_0A2V1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by A, followed by V, preceded by R, preceded by K, preceded by A, except...
K_R_D_0A2V1M1M2.rules.append(A_K_R_D_0A2V1M1M2M3)
H_K_R_D_0A2V1M1M2M3 = rule.Rule(-3, "H", True, -1) # Always cleaves before D, followed by A, followed by V, preceded by R, preceded by K, preceded by H, except...
K_R_D_0A2V1M1M2.rules.append(H_K_R_D_0A2V1M1M2M3)
R_D_0A2V1M1.rules.append(K_R_D_0A2V1M1M2)
D_0A2V1.rules.append(R_D_0A2V1M1)
D_0A2.rules.append(D_0A2V1)
D_0.rules.append(D_0A2)
D_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before D, followed by L, except...
D_0L2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before D, followed by L, followed by G, except...
R_D_0L2G1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by L, followed by G, preceded by R, except...
K_R_D_0L2G1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by L, followed by G, preceded by R, preceded by K, except...
A_K_R_D_0L2G1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by L, followed by G, preceded by R, preceded by K, preceded by A, except...
K_R_D_0L2G1M1M2.rules.append(A_K_R_D_0L2G1M1M2M3)
R_D_0L2G1M1.rules.append(K_R_D_0L2G1M1M2)
D_0L2G1.rules.append(R_D_0L2G1M1)
D_0L2.rules.append(D_0L2G1)
D_0L2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before D, followed by L, followed by A, except...
R_D_0L2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by L, followed by A, preceded by R, except...
K_R_D_0L2A1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by L, followed by A, preceded by R, preceded by K, except...
T_K_R_D_0L2A1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before D, followed by L, followed by A, preceded by R, preceded by K, preceded by T, except...
K_R_D_0L2A1M1M2.rules.append(T_K_R_D_0L2A1M1M2M3)
R_D_0L2A1M1.rules.append(K_R_D_0L2A1M1M2)
D_0L2A1.rules.append(R_D_0L2A1M1)
D_0L2.rules.append(D_0L2A1)
D_0.rules.append(D_0L2)
D_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before D, followed by G, except...
D_0G2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before D, followed by G, followed by A, except...
R_D_0G2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by G, followed by A, preceded by R, except...
K_R_D_0G2A1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by G, followed by A, preceded by R, preceded by K, except...
V_K_R_D_0G2A1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before D, followed by G, followed by A, preceded by R, preceded by K, preceded by V, except...
K_R_D_0G2A1M1M2.rules.append(V_K_R_D_0G2A1M1M2M3)
R_D_0G2A1M1.rules.append(K_R_D_0G2A1M1M2)
D_0G2A1.rules.append(R_D_0G2A1M1)
D_0G2.rules.append(D_0G2A1)
D_0.rules.append(D_0G2)
D_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before D, followed by P, except...
D_0P2Y1 = rule.Rule(1, "Y", False, -1) # Never cleaves before D, followed by P, followed by Y, except...
R_D_0P2Y1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by P, followed by Y, preceded by R, except...
E_R_D_0P2Y1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before D, followed by P, followed by Y, preceded by R, preceded by E, except...
A_E_R_D_0P2Y1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by P, followed by Y, preceded by R, preceded by E, preceded by A, except...
E_R_D_0P2Y1M1M2.rules.append(A_E_R_D_0P2Y1M1M2M3)
R_D_0P2Y1M1.rules.append(E_R_D_0P2Y1M1M2)
D_0P2Y1.rules.append(R_D_0P2Y1M1)
D_0P2.rules.append(D_0P2Y1)
D_0P2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before D, followed by P, followed by I, except...
R_D_0P2I1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by P, followed by I, preceded by R, except...
K_R_D_0P2I1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by P, followed by I, preceded by R, preceded by K, except...
C_K_R_D_0P2I1M1M2M3 = rule.Rule(-3, "C", True, -1) # Always cleaves before D, followed by P, followed by I, preceded by R, preceded by K, preceded by C, except...
K_R_D_0P2I1M1M2.rules.append(C_K_R_D_0P2I1M1M2M3)
R_D_0P2I1M1.rules.append(K_R_D_0P2I1M1M2)
D_0P2I1.rules.append(R_D_0P2I1M1)
D_0P2.rules.append(D_0P2I1)
D_0.rules.append(D_0P2)
D_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before D, followed by T, except...
D_0T2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before D, followed by T, followed by V, except...
R_D_0T2V1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by T, followed by V, preceded by R, except...
K_R_D_0T2V1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by T, followed by V, preceded by R, preceded by K, except...
E_K_R_D_0T2V1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before D, followed by T, followed by V, preceded by R, preceded by K, preceded by E, except...
K_R_D_0T2V1M1M2.rules.append(E_K_R_D_0T2V1M1M2M3)
R_D_0T2V1M1.rules.append(K_R_D_0T2V1M1M2)
D_0T2V1.rules.append(R_D_0T2V1M1)
D_0T2.rules.append(D_0T2V1)
D_0.rules.append(D_0T2)
ENZ.append(D_0)

S_0 = rule.Rule(0, "S", False, 0) # Never cleaves before S, except...
S_0R2 = rule.Rule(2, "R", False, -1) # Never cleaves before S, followed by R, except...
S_0R2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before S, followed by R, followed by A, except...
R_S_0R2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before S, followed by R, followed by A, preceded by R, except...
R_R_S_0R2A1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before S, followed by R, followed by A, preceded by R, preceded by R, except...
F_R_R_S_0R2A1M1M2M3 = rule.Rule(-3, "F", True, -1) # Always cleaves before S, followed by R, followed by A, preceded by R, preceded by R, preceded by F, except...
R_R_S_0R2A1M1M2.rules.append(F_R_R_S_0R2A1M1M2M3)
R_S_0R2A1M1.rules.append(R_R_S_0R2A1M1M2)
S_0R2A1.rules.append(R_S_0R2A1M1)
S_0R2.rules.append(S_0R2A1)
S_0R2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before S, followed by R, followed by E, except...
R_S_0R2E1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before S, followed by R, followed by E, preceded by R, except...
K_R_S_0R2E1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before S, followed by R, followed by E, preceded by R, preceded by K, except...
K_K_R_S_0R2E1M1M2M3 = rule.Rule(-3, "K", True, -1) # Always cleaves before S, followed by R, followed by E, preceded by R, preceded by K, preceded by K, except...
K_R_S_0R2E1M1M2.rules.append(K_K_R_S_0R2E1M1M2M3)
R_S_0R2E1M1.rules.append(K_R_S_0R2E1M1M2)
S_0R2E1.rules.append(R_S_0R2E1M1)
S_0R2.rules.append(S_0R2E1)
S_0.rules.append(S_0R2)
S_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before S, followed by V, except...
S_0V2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before S, followed by V, followed by A, except...
R_S_0V2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before S, followed by V, followed by A, preceded by R, except...
K_R_S_0V2A1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before S, followed by V, followed by A, preceded by R, preceded by K, except...
S_K_R_S_0V2A1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before S, followed by V, followed by A, preceded by R, preceded by K, preceded by S, except...
K_R_S_0V2A1M1M2.rules.append(S_K_R_S_0V2A1M1M2M3)
R_S_0V2A1M1.rules.append(K_R_S_0V2A1M1M2)
S_0V2A1.rules.append(R_S_0V2A1M1)
S_0V2.rules.append(S_0V2A1)
S_0V2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before S, followed by V, followed by L, except...
R_S_0V2L1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before S, followed by V, followed by L, preceded by R, except...
K_R_S_0V2L1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before S, followed by V, followed by L, preceded by R, preceded by K, except...
V_K_R_S_0V2L1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before S, followed by V, followed by L, preceded by R, preceded by K, preceded by V, except...
K_R_S_0V2L1M1M2.rules.append(V_K_R_S_0V2L1M1M2M3)
R_S_0V2L1M1.rules.append(K_R_S_0V2L1M1M2)
S_0V2L1.rules.append(R_S_0V2L1M1)
S_0V2.rules.append(S_0V2L1)
S_0.rules.append(S_0V2)
S_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before S, followed by S, except...
S_0S2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before S, followed by S, followed by K, except...
R_S_0S2K1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before S, followed by S, followed by K, preceded by R, except...
K_R_S_0S2K1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before S, followed by S, followed by K, preceded by R, preceded by K, except...
Q_K_R_S_0S2K1M1M2M3 = rule.Rule(-3, "Q", True, -1) # Always cleaves before S, followed by S, followed by K, preceded by R, preceded by K, preceded by Q, except...
K_R_S_0S2K1M1M2.rules.append(Q_K_R_S_0S2K1M1M2M3)
R_S_0S2K1M1.rules.append(K_R_S_0S2K1M1M2)
S_0S2K1.rules.append(R_S_0S2K1M1)
S_0S2.rules.append(S_0S2K1)
S_0S2Y1 = rule.Rule(1, "Y", False, -1) # Never cleaves before S, followed by S, followed by Y, except...
R_S_0S2Y1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before S, followed by S, followed by Y, preceded by R, except...
K_R_S_0S2Y1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before S, followed by S, followed by Y, preceded by R, preceded by K, except...
G_K_R_S_0S2Y1M1M2M3 = rule.Rule(-3, "G", True, -1) # Always cleaves before S, followed by S, followed by Y, preceded by R, preceded by K, preceded by G, except...
K_R_S_0S2Y1M1M2.rules.append(G_K_R_S_0S2Y1M1M2M3)
R_S_0S2Y1M1.rules.append(K_R_S_0S2Y1M1M2)
S_0S2Y1.rules.append(R_S_0S2Y1M1)
S_0S2.rules.append(S_0S2Y1)
S_0.rules.append(S_0S2)
S_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before S, followed by E, except...
S_0E2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before S, followed by E, followed by A, except...
R_S_0E2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before S, followed by E, followed by A, preceded by R, except...
R_R_S_0E2A1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before S, followed by E, followed by A, preceded by R, preceded by R, except...
G_R_R_S_0E2A1M1M2M3 = rule.Rule(-3, "G", True, -1) # Always cleaves before S, followed by E, followed by A, preceded by R, preceded by R, preceded by G, except...
R_R_S_0E2A1M1M2.rules.append(G_R_R_S_0E2A1M1M2M3)
R_S_0E2A1M1.rules.append(R_R_S_0E2A1M1M2)
S_0E2A1.rules.append(R_S_0E2A1M1)
S_0E2.rules.append(S_0E2A1)
S_0E2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before S, followed by E, followed by P, except...
R_S_0E2P1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before S, followed by E, followed by P, preceded by R, except...
K_R_S_0E2P1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before S, followed by E, followed by P, preceded by R, preceded by K, except...
A_K_R_S_0E2P1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before S, followed by E, followed by P, preceded by R, preceded by K, preceded by A, except...
K_R_S_0E2P1M1M2.rules.append(A_K_R_S_0E2P1M1M2M3)
R_S_0E2P1M1.rules.append(K_R_S_0E2P1M1M2)
S_0E2P1.rules.append(R_S_0E2P1M1)
S_0E2.rules.append(S_0E2P1)
S_0.rules.append(S_0E2)
S_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before S, followed by I, except...
S_0I2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before S, followed by I, followed by I, except...
R_S_0I2I1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before S, followed by I, followed by I, preceded by R, except...
K_R_S_0I2I1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before S, followed by I, followed by I, preceded by R, preceded by K, except...
T_K_R_S_0I2I1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before S, followed by I, followed by I, preceded by R, preceded by K, preceded by T, except...
K_R_S_0I2I1M1M2.rules.append(T_K_R_S_0I2I1M1M2M3)
R_S_0I2I1M1.rules.append(K_R_S_0I2I1M1M2)
S_0I2I1.rules.append(R_S_0I2I1M1)
S_0I2.rules.append(S_0I2I1)
S_0.rules.append(S_0I2)
S_0D2 = rule.Rule(2, "D", False, -1) # Never cleaves before S, followed by D, except...
S_0D2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before S, followed by D, followed by P, except...
R_S_0D2P1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before S, followed by D, followed by P, preceded by R, except...
K_R_S_0D2P1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before S, followed by D, followed by P, preceded by R, preceded by K, except...
E_K_R_S_0D2P1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before S, followed by D, followed by P, preceded by R, preceded by K, preceded by E, except...
K_R_S_0D2P1M1M2.rules.append(E_K_R_S_0D2P1M1M2M3)
R_S_0D2P1M1.rules.append(K_R_S_0D2P1M1M2)
S_0D2P1.rules.append(R_S_0D2P1M1)
S_0D2.rules.append(S_0D2P1)
S_0.rules.append(S_0D2)
S_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before S, followed by G, except...
S_0G2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before S, followed by G, followed by N, except...
R_S_0G2N1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before S, followed by G, followed by N, preceded by R, except...
K_R_S_0G2N1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before S, followed by G, followed by N, preceded by R, preceded by K, except...
V_K_R_S_0G2N1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before S, followed by G, followed by N, preceded by R, preceded by K, preceded by V, except...
K_R_S_0G2N1M1M2.rules.append(V_K_R_S_0G2N1M1M2M3)
S_K_R_S_0G2N1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before S, followed by G, followed by N, preceded by R, preceded by K, preceded by S, except...
K_R_S_0G2N1M1M2.rules.append(S_K_R_S_0G2N1M1M2M3)
R_S_0G2N1M1.rules.append(K_R_S_0G2N1M1M2)
S_0G2N1.rules.append(R_S_0G2N1M1)
S_0G2.rules.append(S_0G2N1)
S_0.rules.append(S_0G2)
S_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before S, followed by L, except...
S_0L2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before S, followed by L, followed by N, except...
R_S_0L2N1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before S, followed by L, followed by N, preceded by R, except...
K_R_S_0L2N1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before S, followed by L, followed by N, preceded by R, preceded by K, except...
K_K_R_S_0L2N1M1M2M3 = rule.Rule(-3, "K", True, -1) # Always cleaves before S, followed by L, followed by N, preceded by R, preceded by K, preceded by K, except...
K_R_S_0L2N1M1M2.rules.append(K_K_R_S_0L2N1M1M2M3)
R_S_0L2N1M1.rules.append(K_R_S_0L2N1M1M2)
S_0L2N1.rules.append(R_S_0L2N1M1)
S_0L2.rules.append(S_0L2N1)
S_0.rules.append(S_0L2)
S_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before S, followed by N, except...
S_0N2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before S, followed by N, followed by N, except...
R_S_0N2N1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before S, followed by N, followed by N, preceded by R, except...
K_R_S_0N2N1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before S, followed by N, followed by N, preceded by R, preceded by K, except...
R_K_R_S_0N2N1M1M2M3 = rule.Rule(-3, "R", True, -1) # Always cleaves before S, followed by N, followed by N, preceded by R, preceded by K, preceded by R, except...
K_R_S_0N2N1M1M2.rules.append(R_K_R_S_0N2N1M1M2M3)
R_S_0N2N1M1.rules.append(K_R_S_0N2N1M1M2)
S_0N2N1.rules.append(R_S_0N2N1M1)
S_0N2.rules.append(S_0N2N1)
S_0.rules.append(S_0N2)
ENZ.append(S_0)

E_0 = rule.Rule(0, "E", False, 0) # Never cleaves before E, except...
E_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before E, followed by N, except...
E_0N2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before E, followed by N, followed by A, except...
R_E_0N2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by N, followed by A, preceded by R, except...
K_R_E_0N2A1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before E, followed by N, followed by A, preceded by R, preceded by K, except...
R_K_R_E_0N2A1M1M2M3 = rule.Rule(-3, "R", True, -1) # Always cleaves before E, followed by N, followed by A, preceded by R, preceded by K, preceded by R, except...
K_R_E_0N2A1M1M2.rules.append(R_K_R_E_0N2A1M1M2M3)
K_K_R_E_0N2A1M1M2M3 = rule.Rule(-3, "K", True, -1) # Always cleaves before E, followed by N, followed by A, preceded by R, preceded by K, preceded by K, except...
K_R_E_0N2A1M1M2.rules.append(K_K_R_E_0N2A1M1M2M3)
Y_K_R_E_0N2A1M1M2M3 = rule.Rule(-3, "Y", True, -1) # Always cleaves before E, followed by N, followed by A, preceded by R, preceded by K, preceded by Y, except...
K_R_E_0N2A1M1M2.rules.append(Y_K_R_E_0N2A1M1M2M3)
R_E_0N2A1M1.rules.append(K_R_E_0N2A1M1M2)
E_0N2A1.rules.append(R_E_0N2A1M1)
E_0N2.rules.append(E_0N2A1)
E_0N2Y1 = rule.Rule(1, "Y", False, -1) # Never cleaves before E, followed by N, followed by Y, except...
R_E_0N2Y1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by N, followed by Y, preceded by R, except...
K_R_E_0N2Y1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before E, followed by N, followed by Y, preceded by R, preceded by K, except...
R_K_R_E_0N2Y1M1M2M3 = rule.Rule(-3, "R", True, -1) # Always cleaves before E, followed by N, followed by Y, preceded by R, preceded by K, preceded by R, except...
K_R_E_0N2Y1M1M2.rules.append(R_K_R_E_0N2Y1M1M2M3)
R_E_0N2Y1M1.rules.append(K_R_E_0N2Y1M1M2)
E_0N2Y1.rules.append(R_E_0N2Y1M1)
E_0N2.rules.append(E_0N2Y1)
E_0.rules.append(E_0N2)
E_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before E, followed by E, except...
E_0E2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before E, followed by E, followed by A, except...
R_E_0E2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by E, followed by A, preceded by R, except...
K_R_E_0E2A1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before E, followed by E, followed by A, preceded by R, preceded by K, except...
Y_K_R_E_0E2A1M1M2M3 = rule.Rule(-3, "Y", True, -1) # Always cleaves before E, followed by E, followed by A, preceded by R, preceded by K, preceded by Y, except...
K_R_E_0E2A1M1M2.rules.append(Y_K_R_E_0E2A1M1M2M3)
D_K_R_E_0E2A1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before E, followed by E, followed by A, preceded by R, preceded by K, preceded by D, except...
K_R_E_0E2A1M1M2.rules.append(D_K_R_E_0E2A1M1M2M3)
R_E_0E2A1M1.rules.append(K_R_E_0E2A1M1M2)
E_0E2A1.rules.append(R_E_0E2A1M1)
E_0E2.rules.append(E_0E2A1)
E_0E2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before E, followed by E, followed by L, except...
R_E_0E2L1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by E, followed by L, preceded by R, except...
K_R_E_0E2L1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before E, followed by E, followed by L, preceded by R, preceded by K, except...
F_K_R_E_0E2L1M1M2M3 = rule.Rule(-3, "F", True, -1) # Always cleaves before E, followed by E, followed by L, preceded by R, preceded by K, preceded by F, except...
K_R_E_0E2L1M1M2.rules.append(F_K_R_E_0E2L1M1M2M3)
R_E_0E2L1M1.rules.append(K_R_E_0E2L1M1M2)
E_0E2L1.rules.append(R_E_0E2L1M1)
E_0E2.rules.append(E_0E2L1)
E_0E2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before E, followed by E, followed by D, except...
R_E_0E2D1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by E, followed by D, preceded by R, except...
K_R_E_0E2D1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before E, followed by E, followed by D, preceded by R, preceded by K, except...
K_K_R_E_0E2D1M1M2M3 = rule.Rule(-3, "K", True, -1) # Always cleaves before E, followed by E, followed by D, preceded by R, preceded by K, preceded by K, except...
K_R_E_0E2D1M1M2.rules.append(K_K_R_E_0E2D1M1M2M3)
R_E_0E2D1M1.rules.append(K_R_E_0E2D1M1M2)
E_0E2D1.rules.append(R_E_0E2D1M1)
E_0E2.rules.append(E_0E2D1)
E_0.rules.append(E_0E2)
E_0D2 = rule.Rule(2, "D", False, -1) # Never cleaves before E, followed by D, except...
E_0D2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before E, followed by D, followed by A, except...
R_E_0D2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by D, followed by A, preceded by R, except...
K_R_E_0D2A1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before E, followed by D, followed by A, preceded by R, preceded by K, except...
Y_K_R_E_0D2A1M1M2M3 = rule.Rule(-3, "Y", True, -1) # Always cleaves before E, followed by D, followed by A, preceded by R, preceded by K, preceded by Y, except...
K_R_E_0D2A1M1M2.rules.append(Y_K_R_E_0D2A1M1M2M3)
R_E_0D2A1M1.rules.append(K_R_E_0D2A1M1M2)
E_0D2A1.rules.append(R_E_0D2A1M1)
E_0D2.rules.append(E_0D2A1)
E_0.rules.append(E_0D2)
E_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before E, followed by I, except...
E_0I2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before E, followed by I, followed by D, except...
R_E_0I2D1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by I, followed by D, preceded by R, except...
K_R_E_0I2D1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before E, followed by I, followed by D, preceded by R, preceded by K, except...
N_K_R_E_0I2D1M1M2M3 = rule.Rule(-3, "N", True, -1) # Always cleaves before E, followed by I, followed by D, preceded by R, preceded by K, preceded by N, except...
K_R_E_0I2D1M1M2.rules.append(N_K_R_E_0I2D1M1M2M3)
R_E_0I2D1M1.rules.append(K_R_E_0I2D1M1M2)
E_0I2D1.rules.append(R_E_0I2D1M1)
E_0I2.rules.append(E_0I2D1)
E_0.rules.append(E_0I2)
E_0K2 = rule.Rule(2, "K", False, -1) # Never cleaves before E, followed by K, except...
E_0K2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before E, followed by K, followed by A, except...
R_E_0K2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by K, followed by A, preceded by R, except...
K_R_E_0K2A1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before E, followed by K, followed by A, preceded by R, preceded by K, except...
S_K_R_E_0K2A1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before E, followed by K, followed by A, preceded by R, preceded by K, preceded by S, except...
K_R_E_0K2A1M1M2.rules.append(S_K_R_E_0K2A1M1M2M3)
E_K_R_E_0K2A1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before E, followed by K, followed by A, preceded by R, preceded by K, preceded by E, except...
K_R_E_0K2A1M1M2.rules.append(E_K_R_E_0K2A1M1M2M3)
R_E_0K2A1M1.rules.append(K_R_E_0K2A1M1M2)
E_0K2A1.rules.append(R_E_0K2A1M1)
E_0K2.rules.append(E_0K2A1)
E_0K2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before E, followed by K, followed by G, except...
R_E_0K2G1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by K, followed by G, preceded by R, except...
K_R_E_0K2G1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before E, followed by K, followed by G, preceded by R, preceded by K, except...
S_K_R_E_0K2G1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before E, followed by K, followed by G, preceded by R, preceded by K, preceded by S, except...
K_R_E_0K2G1M1M2.rules.append(S_K_R_E_0K2G1M1M2M3)
R_E_0K2G1M1.rules.append(K_R_E_0K2G1M1M2)
E_0K2G1.rules.append(R_E_0K2G1M1)
E_0K2.rules.append(E_0K2G1)
E_0K2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before E, followed by K, followed by P, except...
R_E_0K2P1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by K, followed by P, preceded by R, except...
K_R_E_0K2P1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before E, followed by K, followed by P, preceded by R, preceded by K, except...
D_K_R_E_0K2P1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before E, followed by K, followed by P, preceded by R, preceded by K, preceded by D, except...
K_R_E_0K2P1M1M2.rules.append(D_K_R_E_0K2P1M1M2M3)
R_E_0K2P1M1.rules.append(K_R_E_0K2P1M1M2)
E_0K2P1.rules.append(R_E_0K2P1M1)
E_0K2.rules.append(E_0K2P1)
E_0.rules.append(E_0K2)
E_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before E, followed by V, except...
E_0V2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before E, followed by V, followed by P, except...
R_E_0V2P1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by V, followed by P, preceded by R, except...
K_R_E_0V2P1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before E, followed by V, followed by P, preceded by R, preceded by K, except...
D_K_R_E_0V2P1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before E, followed by V, followed by P, preceded by R, preceded by K, preceded by D, except...
K_R_E_0V2P1M1M2.rules.append(D_K_R_E_0V2P1M1M2M3)
R_E_0V2P1M1.rules.append(K_R_E_0V2P1M1M2)
E_0V2P1.rules.append(R_E_0V2P1M1)
E_0V2.rules.append(E_0V2P1)
E_0V2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before E, followed by V, followed by V, except...
R_E_0V2V1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by V, followed by V, preceded by R, except...
K_R_E_0V2V1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before E, followed by V, followed by V, preceded by R, preceded by K, except...
H_K_R_E_0V2V1M1M2M3 = rule.Rule(-3, "H", True, -1) # Always cleaves before E, followed by V, followed by V, preceded by R, preceded by K, preceded by H, except...
K_R_E_0V2V1M1M2.rules.append(H_K_R_E_0V2V1M1M2M3)
S_K_R_E_0V2V1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before E, followed by V, followed by V, preceded by R, preceded by K, preceded by S, except...
K_R_E_0V2V1M1M2.rules.append(S_K_R_E_0V2V1M1M2M3)
R_E_0V2V1M1.rules.append(K_R_E_0V2V1M1M2)
E_0V2V1.rules.append(R_E_0V2V1M1)
E_0V2.rules.append(E_0V2V1)
E_0V2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before E, followed by V, followed by D, except...
R_E_0V2D1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by V, followed by D, preceded by R, except...
K_R_E_0V2D1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before E, followed by V, followed by D, preceded by R, preceded by K, except...
V_K_R_E_0V2D1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before E, followed by V, followed by D, preceded by R, preceded by K, preceded by V, except...
K_R_E_0V2D1M1M2.rules.append(V_K_R_E_0V2D1M1M2M3)
H_K_R_E_0V2D1M1M2M3 = rule.Rule(-3, "H", True, -1) # Always cleaves before E, followed by V, followed by D, preceded by R, preceded by K, preceded by H, except...
K_R_E_0V2D1M1M2.rules.append(H_K_R_E_0V2D1M1M2M3)
R_E_0V2D1M1.rules.append(K_R_E_0V2D1M1M2)
E_0V2D1.rules.append(R_E_0V2D1M1)
E_0V2.rules.append(E_0V2D1)
E_0.rules.append(E_0V2)
E_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before E, followed by G, except...
E_0G2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before E, followed by G, followed by D, except...
R_E_0G2D1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by G, followed by D, preceded by R, except...
K_R_E_0G2D1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before E, followed by G, followed by D, preceded by R, preceded by K, except...
N_K_R_E_0G2D1M1M2M3 = rule.Rule(-3, "N", True, -1) # Always cleaves before E, followed by G, followed by D, preceded by R, preceded by K, preceded by N, except...
K_R_E_0G2D1M1M2.rules.append(N_K_R_E_0G2D1M1M2M3)
R_E_0G2D1M1.rules.append(K_R_E_0G2D1M1M2)
E_0G2D1.rules.append(R_E_0G2D1M1)
E_0G2.rules.append(E_0G2D1)
E_0G2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before E, followed by G, followed by E, except...
R_E_0G2E1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by G, followed by E, preceded by R, except...
K_R_E_0G2E1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before E, followed by G, followed by E, preceded by R, preceded by K, except...
Q_K_R_E_0G2E1M1M2M3 = rule.Rule(-3, "Q", True, -1) # Always cleaves before E, followed by G, followed by E, preceded by R, preceded by K, preceded by Q, except...
K_R_E_0G2E1M1M2.rules.append(Q_K_R_E_0G2E1M1M2M3)
R_E_0G2E1M1.rules.append(K_R_E_0G2E1M1M2)
E_0G2E1.rules.append(R_E_0G2E1M1)
E_0G2.rules.append(E_0G2E1)
E_0G2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before E, followed by G, followed by A, except...
R_E_0G2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by G, followed by A, preceded by R, except...
K_R_E_0G2A1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before E, followed by G, followed by A, preceded by R, preceded by K, except...
H_K_R_E_0G2A1M1M2M3 = rule.Rule(-3, "H", True, -1) # Always cleaves before E, followed by G, followed by A, preceded by R, preceded by K, preceded by H, except...
K_R_E_0G2A1M1M2.rules.append(H_K_R_E_0G2A1M1M2M3)
R_E_0G2A1M1.rules.append(K_R_E_0G2A1M1M2)
E_0G2A1.rules.append(R_E_0G2A1M1)
E_0G2.rules.append(E_0G2A1)
E_0.rules.append(E_0G2)
E_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before E, followed by L, except...
E_0L2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before E, followed by L, followed by S, except...
R_E_0L2S1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by L, followed by S, preceded by R, except...
K_R_E_0L2S1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before E, followed by L, followed by S, preceded by R, preceded by K, except...
S_K_R_E_0L2S1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before E, followed by L, followed by S, preceded by R, preceded by K, preceded by S, except...
K_R_E_0L2S1M1M2.rules.append(S_K_R_E_0L2S1M1M2M3)
R_E_0L2S1M1.rules.append(K_R_E_0L2S1M1M2)
E_0L2S1.rules.append(R_E_0L2S1M1)
E_0L2.rules.append(E_0L2S1)
E_0.rules.append(E_0L2)
E_0Q2 = rule.Rule(2, "Q", False, -1) # Never cleaves before E, followed by Q, except...
E_0Q2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before E, followed by Q, followed by S, except...
R_E_0Q2S1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by Q, followed by S, preceded by R, except...
K_R_E_0Q2S1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before E, followed by Q, followed by S, preceded by R, preceded by K, except...
D_K_R_E_0Q2S1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before E, followed by Q, followed by S, preceded by R, preceded by K, preceded by D, except...
K_R_E_0Q2S1M1M2.rules.append(D_K_R_E_0Q2S1M1M2M3)
R_E_0Q2S1M1.rules.append(K_R_E_0Q2S1M1M2)
E_0Q2S1.rules.append(R_E_0Q2S1M1)
E_0Q2.rules.append(E_0Q2S1)
E_0Q2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before E, followed by Q, followed by E, except...
R_E_0Q2E1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by Q, followed by E, preceded by R, except...
K_R_E_0Q2E1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before E, followed by Q, followed by E, preceded by R, preceded by K, except...
T_K_R_E_0Q2E1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before E, followed by Q, followed by E, preceded by R, preceded by K, preceded by T, except...
K_R_E_0Q2E1M1M2.rules.append(T_K_R_E_0Q2E1M1M2M3)
R_E_0Q2E1M1.rules.append(K_R_E_0Q2E1M1M2)
E_0Q2E1.rules.append(R_E_0Q2E1M1)
E_0Q2.rules.append(E_0Q2E1)
E_0Q2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before E, followed by Q, followed by N, except...
R_E_0Q2N1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by Q, followed by N, preceded by R, except...
K_R_E_0Q2N1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before E, followed by Q, followed by N, preceded by R, preceded by K, except...
I_K_R_E_0Q2N1M1M2M3 = rule.Rule(-3, "I", True, -1) # Always cleaves before E, followed by Q, followed by N, preceded by R, preceded by K, preceded by I, except...
K_R_E_0Q2N1M1M2.rules.append(I_K_R_E_0Q2N1M1M2M3)
R_E_0Q2N1M1.rules.append(K_R_E_0Q2N1M1M2)
E_0Q2N1.rules.append(R_E_0Q2N1M1)
E_0Q2.rules.append(E_0Q2N1)
E_0.rules.append(E_0Q2)
E_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before E, followed by S, except...
E_0S2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before E, followed by S, followed by T, except...
R_E_0S2T1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by S, followed by T, preceded by R, except...
K_R_E_0S2T1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before E, followed by S, followed by T, preceded by R, preceded by K, except...
A_K_R_E_0S2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before E, followed by S, followed by T, preceded by R, preceded by K, preceded by A, except...
K_R_E_0S2T1M1M2.rules.append(A_K_R_E_0S2T1M1M2M3)
R_E_0S2T1M1.rules.append(K_R_E_0S2T1M1M2)
E_0S2T1.rules.append(R_E_0S2T1M1)
E_0S2.rules.append(E_0S2T1)
E_0.rules.append(E_0S2)
E_0M2 = rule.Rule(2, "M", False, -1) # Never cleaves before E, followed by M, except...
E_0M2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before E, followed by M, followed by I, except...
R_E_0M2I1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by M, followed by I, preceded by R, except...
K_R_E_0M2I1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before E, followed by M, followed by I, preceded by R, preceded by K, except...
S_K_R_E_0M2I1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before E, followed by M, followed by I, preceded by R, preceded by K, preceded by S, except...
K_R_E_0M2I1M1M2.rules.append(S_K_R_E_0M2I1M1M2M3)
A_K_R_E_0M2I1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before E, followed by M, followed by I, preceded by R, preceded by K, preceded by A, except...
K_R_E_0M2I1M1M2.rules.append(A_K_R_E_0M2I1M1M2M3)
R_E_0M2I1M1.rules.append(K_R_E_0M2I1M1M2)
E_0M2I1.rules.append(R_E_0M2I1M1)
E_0M2.rules.append(E_0M2I1)
E_0.rules.append(E_0M2)
E_0H2 = rule.Rule(2, "H", False, -1) # Never cleaves before E, followed by H, except...
E_0H2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before E, followed by H, followed by L, except...
R_E_0H2L1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by H, followed by L, preceded by R, except...
K_R_E_0H2L1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before E, followed by H, followed by L, preceded by R, preceded by K, except...
K_K_R_E_0H2L1M1M2M3 = rule.Rule(-3, "K", True, -1) # Always cleaves before E, followed by H, followed by L, preceded by R, preceded by K, preceded by K, except...
K_R_E_0H2L1M1M2.rules.append(K_K_R_E_0H2L1M1M2M3)
R_E_0H2L1M1.rules.append(K_R_E_0H2L1M1M2)
E_0H2L1.rules.append(R_E_0H2L1M1)
E_0H2.rules.append(E_0H2L1)
E_0.rules.append(E_0H2)
E_0C2 = rule.Rule(2, "C", False, -1) # Never cleaves before E, followed by C, except...
E_0C2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before E, followed by C, followed by D, except...
R_E_0C2D1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by C, followed by D, preceded by R, except...
K_R_E_0C2D1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before E, followed by C, followed by D, preceded by R, preceded by K, except...
I_K_R_E_0C2D1M1M2M3 = rule.Rule(-3, "I", True, -1) # Always cleaves before E, followed by C, followed by D, preceded by R, preceded by K, preceded by I, except...
K_R_E_0C2D1M1M2.rules.append(I_K_R_E_0C2D1M1M2M3)
R_E_0C2D1M1.rules.append(K_R_E_0C2D1M1M2)
E_0C2D1.rules.append(R_E_0C2D1M1)
E_0C2.rules.append(E_0C2D1)
E_0.rules.append(E_0C2)
E_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before E, followed by A, except...
E_0A2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before E, followed by A, followed by A, except...
R_E_0A2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by A, followed by A, preceded by R, except...
K_R_E_0A2A1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before E, followed by A, followed by A, preceded by R, preceded by K, except...
H_K_R_E_0A2A1M1M2M3 = rule.Rule(-3, "H", True, -1) # Always cleaves before E, followed by A, followed by A, preceded by R, preceded by K, preceded by H, except...
K_R_E_0A2A1M1M2.rules.append(H_K_R_E_0A2A1M1M2M3)
R_E_0A2A1M1.rules.append(K_R_E_0A2A1M1M2)
E_0A2A1.rules.append(R_E_0A2A1M1)
E_0A2.rules.append(E_0A2A1)
E_0.rules.append(E_0A2)
ENZ.append(E_0)

A_0 = rule.Rule(0, "A", False, 0) # Never cleaves before A, except...
A_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before A, followed by S, except...
A_0S2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before A, followed by S, followed by S, except...
R_A_0S2S1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by S, followed by S, preceded by R, except...
K_R_A_0S2S1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by S, followed by S, preceded by R, preceded by K, except...
A_K_R_A_0S2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by S, followed by S, preceded by R, preceded by K, preceded by A, except...
K_R_A_0S2S1M1M2.rules.append(A_K_R_A_0S2S1M1M2M3)
R_A_0S2S1M1.rules.append(K_R_A_0S2S1M1M2)
A_0S2S1.rules.append(R_A_0S2S1M1)
A_0S2.rules.append(A_0S2S1)
A_0S2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before A, followed by S, followed by A, except...
R_A_0S2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by S, followed by A, preceded by R, except...
K_R_A_0S2A1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by S, followed by A, preceded by R, preceded by K, except...
A_K_R_A_0S2A1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by S, followed by A, preceded by R, preceded by K, preceded by A, except...
K_R_A_0S2A1M1M2.rules.append(A_K_R_A_0S2A1M1M2M3)
R_A_0S2A1M1.rules.append(K_R_A_0S2A1M1M2)
A_0S2A1.rules.append(R_A_0S2A1M1)
A_0S2.rules.append(A_0S2A1)
A_0S2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before A, followed by S, followed by D, except...
R_A_0S2D1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by S, followed by D, preceded by R, except...
R_R_A_0S2D1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before A, followed by S, followed by D, preceded by R, preceded by R, except...
Q_R_R_A_0S2D1M1M2M3 = rule.Rule(-3, "Q", True, -1) # Always cleaves before A, followed by S, followed by D, preceded by R, preceded by R, preceded by Q, except...
R_R_A_0S2D1M1M2.rules.append(Q_R_R_A_0S2D1M1M2M3)
R_A_0S2D1M1.rules.append(R_R_A_0S2D1M1M2)
A_0S2D1.rules.append(R_A_0S2D1M1)
A_0S2.rules.append(A_0S2D1)
A_0S2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before A, followed by S, followed by V, except...
R_A_0S2V1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by S, followed by V, preceded by R, except...
K_R_A_0S2V1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by S, followed by V, preceded by R, preceded by K, except...
A_K_R_A_0S2V1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by S, followed by V, preceded by R, preceded by K, preceded by A, except...
K_R_A_0S2V1M1M2.rules.append(A_K_R_A_0S2V1M1M2M3)
R_A_0S2V1M1.rules.append(K_R_A_0S2V1M1M2)
A_0S2V1.rules.append(R_A_0S2V1M1)
A_0S2.rules.append(A_0S2V1)
A_0.rules.append(A_0S2)
A_0D2 = rule.Rule(2, "D", False, -1) # Never cleaves before A, followed by D, except...
A_0D2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before A, followed by D, followed by D, except...
R_A_0D2D1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by D, followed by D, preceded by R, except...
K_R_A_0D2D1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by D, followed by D, preceded by R, preceded by K, except...
A_K_R_A_0D2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by D, followed by D, preceded by R, preceded by K, preceded by A, except...
K_R_A_0D2D1M1M2.rules.append(A_K_R_A_0D2D1M1M2M3)
E_K_R_A_0D2D1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before A, followed by D, followed by D, preceded by R, preceded by K, preceded by E, except...
K_R_A_0D2D1M1M2.rules.append(E_K_R_A_0D2D1M1M2M3)
R_A_0D2D1M1.rules.append(K_R_A_0D2D1M1M2)
A_0D2D1.rules.append(R_A_0D2D1M1)
A_0D2.rules.append(A_0D2D1)
A_0D2R1 = rule.Rule(1, "R", False, -1) # Never cleaves before A, followed by D, followed by R, except...
R_A_0D2R1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by D, followed by R, preceded by R, except...
S_R_A_0D2R1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before A, followed by D, followed by R, preceded by R, preceded by S, except...
V_S_R_A_0D2R1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by D, followed by R, preceded by R, preceded by S, preceded by V, except...
S_R_A_0D2R1M1M2.rules.append(V_S_R_A_0D2R1M1M2M3)
R_A_0D2R1M1.rules.append(S_R_A_0D2R1M1M2)
A_0D2R1.rules.append(R_A_0D2R1M1)
A_0D2.rules.append(A_0D2R1)
A_0.rules.append(A_0D2)
A_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before A, followed by N, except...
A_0N2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before A, followed by N, followed by D, except...
R_A_0N2D1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by N, followed by D, preceded by R, except...
K_R_A_0N2D1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by N, followed by D, preceded by R, preceded by K, except...
T_K_R_A_0N2D1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before A, followed by N, followed by D, preceded by R, preceded by K, preceded by T, except...
K_R_A_0N2D1M1M2.rules.append(T_K_R_A_0N2D1M1M2M3)
R_A_0N2D1M1.rules.append(K_R_A_0N2D1M1M2)
A_0N2D1.rules.append(R_A_0N2D1M1)
A_0N2.rules.append(A_0N2D1)
A_0.rules.append(A_0N2)
A_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before A, followed by G, except...
A_0G2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before A, followed by G, followed by N, except...
R_A_0G2N1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by G, followed by N, preceded by R, except...
K_R_A_0G2N1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by G, followed by N, preceded by R, preceded by K, except...
N_K_R_A_0G2N1M1M2M3 = rule.Rule(-3, "N", True, -1) # Always cleaves before A, followed by G, followed by N, preceded by R, preceded by K, preceded by N, except...
K_R_A_0G2N1M1M2.rules.append(N_K_R_A_0G2N1M1M2M3)
R_A_0G2N1M1.rules.append(K_R_A_0G2N1M1M2)
A_0G2N1.rules.append(R_A_0G2N1M1)
A_0G2.rules.append(A_0G2N1)
A_0G2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before A, followed by G, followed by D, except...
R_A_0G2D1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by G, followed by D, preceded by R, except...
K_R_A_0G2D1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by G, followed by D, preceded by R, preceded by K, except...
K_K_R_A_0G2D1M1M2M3 = rule.Rule(-3, "K", True, -1) # Always cleaves before A, followed by G, followed by D, preceded by R, preceded by K, preceded by K, except...
K_R_A_0G2D1M1M2.rules.append(K_K_R_A_0G2D1M1M2M3)
S_K_R_A_0G2D1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by G, followed by D, preceded by R, preceded by K, preceded by S, except...
K_R_A_0G2D1M1M2.rules.append(S_K_R_A_0G2D1M1M2M3)
D_K_R_A_0G2D1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before A, followed by G, followed by D, preceded by R, preceded by K, preceded by D, except...
K_R_A_0G2D1M1M2.rules.append(D_K_R_A_0G2D1M1M2M3)
R_A_0G2D1M1.rules.append(K_R_A_0G2D1M1M2)
A_0G2D1.rules.append(R_A_0G2D1M1)
A_0G2.rules.append(A_0G2D1)
A_0G2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before A, followed by G, followed by V, except...
R_A_0G2V1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by G, followed by V, preceded by R, except...
K_R_A_0G2V1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by G, followed by V, preceded by R, preceded by K, except...
E_K_R_A_0G2V1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before A, followed by G, followed by V, preceded by R, preceded by K, preceded by E, except...
K_R_A_0G2V1M1M2.rules.append(E_K_R_A_0G2V1M1M2M3)
R_A_0G2V1M1.rules.append(K_R_A_0G2V1M1M2)
A_0G2V1.rules.append(R_A_0G2V1M1)
A_0G2.rules.append(A_0G2V1)
A_0.rules.append(A_0G2)
A_0K2 = rule.Rule(2, "K", False, -1) # Never cleaves before A, followed by K, except...
A_0K2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before A, followed by K, followed by E, except...
R_A_0K2E1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by K, followed by E, preceded by R, except...
K_R_A_0K2E1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by K, followed by E, preceded by R, preceded by K, except...
D_K_R_A_0K2E1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before A, followed by K, followed by E, preceded by R, preceded by K, preceded by D, except...
K_R_A_0K2E1M1M2.rules.append(D_K_R_A_0K2E1M1M2M3)
R_A_0K2E1M1.rules.append(K_R_A_0K2E1M1M2)
A_0K2E1.rules.append(R_A_0K2E1M1)
A_0K2.rules.append(A_0K2E1)
A_0K2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before A, followed by K, followed by Q, except...
R_A_0K2Q1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by K, followed by Q, preceded by R, except...
K_R_A_0K2Q1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by K, followed by Q, preceded by R, preceded by K, except...
D_K_R_A_0K2Q1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before A, followed by K, followed by Q, preceded by R, preceded by K, preceded by D, except...
K_R_A_0K2Q1M1M2.rules.append(D_K_R_A_0K2Q1M1M2M3)
R_A_0K2Q1M1.rules.append(K_R_A_0K2Q1M1M2)
A_0K2Q1.rules.append(R_A_0K2Q1M1)
A_0K2.rules.append(A_0K2Q1)
A_0.rules.append(A_0K2)
A_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before A, followed by A, except...
A_0A2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before A, followed by A, followed by V, except...
R_A_0A2V1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by A, followed by V, preceded by R, except...
K_R_A_0A2V1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by A, followed by V, preceded by R, preceded by K, except...
M_K_R_A_0A2V1M1M2M3 = rule.Rule(-3, "M", True, -1) # Always cleaves before A, followed by A, followed by V, preceded by R, preceded by K, preceded by M, except...
K_R_A_0A2V1M1M2.rules.append(M_K_R_A_0A2V1M1M2M3)
H_K_R_A_0A2V1M1M2M3 = rule.Rule(-3, "H", True, -1) # Always cleaves before A, followed by A, followed by V, preceded by R, preceded by K, preceded by H, except...
K_R_A_0A2V1M1M2.rules.append(H_K_R_A_0A2V1M1M2M3)
S_K_R_A_0A2V1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by A, followed by V, preceded by R, preceded by K, preceded by S, except...
K_R_A_0A2V1M1M2.rules.append(S_K_R_A_0A2V1M1M2M3)
R_A_0A2V1M1.rules.append(K_R_A_0A2V1M1M2)
R_R_A_0A2V1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before A, followed by A, followed by V, preceded by R, preceded by R, except...
D_R_R_A_0A2V1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before A, followed by A, followed by V, preceded by R, preceded by R, preceded by D, except...
R_R_A_0A2V1M1M2.rules.append(D_R_R_A_0A2V1M1M2M3)
R_A_0A2V1M1.rules.append(R_R_A_0A2V1M1M2)
A_0A2V1.rules.append(R_A_0A2V1M1)
A_0A2.rules.append(A_0A2V1)
A_0A2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before A, followed by A, followed by A, except...
R_A_0A2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by A, followed by A, preceded by R, except...
K_R_A_0A2A1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by A, followed by A, preceded by R, preceded by K, except...
A_K_R_A_0A2A1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by A, followed by A, preceded by R, preceded by K, preceded by A, except...
K_R_A_0A2A1M1M2.rules.append(A_K_R_A_0A2A1M1M2M3)
R_A_0A2A1M1.rules.append(K_R_A_0A2A1M1M2)
A_0A2A1.rules.append(R_A_0A2A1M1)
A_0A2.rules.append(A_0A2A1)
A_0A2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before A, followed by A, followed by I, except...
R_A_0A2I1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by A, followed by I, preceded by R, except...
K_R_A_0A2I1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by A, followed by I, preceded by R, preceded by K, except...
H_K_R_A_0A2I1M1M2M3 = rule.Rule(-3, "H", True, -1) # Always cleaves before A, followed by A, followed by I, preceded by R, preceded by K, preceded by H, except...
K_R_A_0A2I1M1M2.rules.append(H_K_R_A_0A2I1M1M2M3)
R_A_0A2I1M1.rules.append(K_R_A_0A2I1M1M2)
A_0A2I1.rules.append(R_A_0A2I1M1)
A_0A2.rules.append(A_0A2I1)
A_0.rules.append(A_0A2)
A_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before A, followed by V, except...
A_0V2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before A, followed by V, followed by P, except...
R_A_0V2P1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by V, followed by P, preceded by R, except...
K_R_A_0V2P1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by V, followed by P, preceded by R, preceded by K, except...
H_K_R_A_0V2P1M1M2M3 = rule.Rule(-3, "H", True, -1) # Always cleaves before A, followed by V, followed by P, preceded by R, preceded by K, preceded by H, except...
K_R_A_0V2P1M1M2.rules.append(H_K_R_A_0V2P1M1M2M3)
R_A_0V2P1M1.rules.append(K_R_A_0V2P1M1M2)
A_0V2P1.rules.append(R_A_0V2P1M1)
A_0V2.rules.append(A_0V2P1)
A_0V2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before A, followed by V, followed by V, except...
R_A_0V2V1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by V, followed by V, preceded by R, except...
K_R_A_0V2V1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by V, followed by V, preceded by R, preceded by K, except...
D_K_R_A_0V2V1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before A, followed by V, followed by V, preceded by R, preceded by K, preceded by D, except...
K_R_A_0V2V1M1M2.rules.append(D_K_R_A_0V2V1M1M2M3)
R_A_0V2V1M1.rules.append(K_R_A_0V2V1M1M2)
A_0V2V1.rules.append(R_A_0V2V1M1)
A_0V2.rules.append(A_0V2V1)
A_0V2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before A, followed by V, followed by E, except...
R_A_0V2E1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by V, followed by E, preceded by R, except...
R_R_A_0V2E1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before A, followed by V, followed by E, preceded by R, preceded by R, except...
A_R_R_A_0V2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by V, followed by E, preceded by R, preceded by R, preceded by A, except...
R_R_A_0V2E1M1M2.rules.append(A_R_R_A_0V2E1M1M2M3)
R_A_0V2E1M1.rules.append(R_R_A_0V2E1M1M2)
A_0V2E1.rules.append(R_A_0V2E1M1)
A_0V2.rules.append(A_0V2E1)
A_0V2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before A, followed by V, followed by A, except...
R_A_0V2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by V, followed by A, preceded by R, except...
K_R_A_0V2A1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by V, followed by A, preceded by R, preceded by K, except...
E_K_R_A_0V2A1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before A, followed by V, followed by A, preceded by R, preceded by K, preceded by E, except...
K_R_A_0V2A1M1M2.rules.append(E_K_R_A_0V2A1M1M2M3)
R_A_0V2A1M1.rules.append(K_R_A_0V2A1M1M2)
A_0V2A1.rules.append(R_A_0V2A1M1)
A_0V2.rules.append(A_0V2A1)
A_0.rules.append(A_0V2)
A_0H2 = rule.Rule(2, "H", False, -1) # Never cleaves before A, followed by H, except...
A_0H2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before A, followed by H, followed by V, except...
R_A_0H2V1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by H, followed by V, preceded by R, except...
K_R_A_0H2V1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by H, followed by V, preceded by R, preceded by K, except...
E_K_R_A_0H2V1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before A, followed by H, followed by V, preceded by R, preceded by K, preceded by E, except...
K_R_A_0H2V1M1M2.rules.append(E_K_R_A_0H2V1M1M2M3)
D_K_R_A_0H2V1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before A, followed by H, followed by V, preceded by R, preceded by K, preceded by D, except...
K_R_A_0H2V1M1M2.rules.append(D_K_R_A_0H2V1M1M2M3)
R_A_0H2V1M1.rules.append(K_R_A_0H2V1M1M2)
A_0H2V1.rules.append(R_A_0H2V1M1)
A_0H2.rules.append(A_0H2V1)
A_0H2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before A, followed by H, followed by L, except...
R_A_0H2L1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by H, followed by L, preceded by R, except...
K_R_A_0H2L1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by H, followed by L, preceded by R, preceded by K, except...
A_K_R_A_0H2L1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by H, followed by L, preceded by R, preceded by K, preceded by A, except...
K_R_A_0H2L1M1M2.rules.append(A_K_R_A_0H2L1M1M2M3)
K_K_R_A_0H2L1M1M2M3 = rule.Rule(-3, "K", True, -1) # Always cleaves before A, followed by H, followed by L, preceded by R, preceded by K, preceded by K, except...
K_R_A_0H2L1M1M2.rules.append(K_K_R_A_0H2L1M1M2M3)
I_K_R_A_0H2L1M1M2M3 = rule.Rule(-3, "I", True, -1) # Always cleaves before A, followed by H, followed by L, preceded by R, preceded by K, preceded by I, except...
K_R_A_0H2L1M1M2.rules.append(I_K_R_A_0H2L1M1M2M3)
T_K_R_A_0H2L1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before A, followed by H, followed by L, preceded by R, preceded by K, preceded by T, except...
K_R_A_0H2L1M1M2.rules.append(T_K_R_A_0H2L1M1M2M3)
R_A_0H2L1M1.rules.append(K_R_A_0H2L1M1M2)
A_0H2L1.rules.append(R_A_0H2L1M1)
A_0H2.rules.append(A_0H2L1)
A_0.rules.append(A_0H2)
A_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before A, followed by P, except...
A_0P2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before A, followed by P, followed by A, except...
R_A_0P2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by P, followed by A, preceded by R, except...
K_R_A_0P2A1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by P, followed by A, preceded by R, preceded by K, except...
G_K_R_A_0P2A1M1M2M3 = rule.Rule(-3, "G", True, -1) # Always cleaves before A, followed by P, followed by A, preceded by R, preceded by K, preceded by G, except...
K_R_A_0P2A1M1M2.rules.append(G_K_R_A_0P2A1M1M2M3)
R_A_0P2A1M1.rules.append(K_R_A_0P2A1M1M2)
A_0P2A1.rules.append(R_A_0P2A1M1)
A_0P2.rules.append(A_0P2A1)
A_0.rules.append(A_0P2)
A_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before A, followed by T, except...
A_0T2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before A, followed by T, followed by V, except...
R_A_0T2V1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by T, followed by V, preceded by R, except...
K_R_A_0T2V1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by T, followed by V, preceded by R, preceded by K, except...
R_K_R_A_0T2V1M1M2M3 = rule.Rule(-3, "R", True, -1) # Always cleaves before A, followed by T, followed by V, preceded by R, preceded by K, preceded by R, except...
K_R_A_0T2V1M1M2.rules.append(R_K_R_A_0T2V1M1M2M3)
R_A_0T2V1M1.rules.append(K_R_A_0T2V1M1M2)
A_0T2V1.rules.append(R_A_0T2V1M1)
A_0T2.rules.append(A_0T2V1)
A_0.rules.append(A_0T2)
A_0Q2 = rule.Rule(2, "Q", False, -1) # Never cleaves before A, followed by Q, except...
A_0Q2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before A, followed by Q, followed by V, except...
R_A_0Q2V1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by Q, followed by V, preceded by R, except...
K_R_A_0Q2V1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by Q, followed by V, preceded by R, preceded by K, except...
H_K_R_A_0Q2V1M1M2M3 = rule.Rule(-3, "H", True, -1) # Always cleaves before A, followed by Q, followed by V, preceded by R, preceded by K, preceded by H, except...
K_R_A_0Q2V1M1M2.rules.append(H_K_R_A_0Q2V1M1M2M3)
R_A_0Q2V1M1.rules.append(K_R_A_0Q2V1M1M2)
A_0Q2V1.rules.append(R_A_0Q2V1M1)
A_0Q2.rules.append(A_0Q2V1)
A_0.rules.append(A_0Q2)
A_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before A, followed by E, except...
A_0E2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before A, followed by E, followed by T, except...
R_A_0E2T1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by E, followed by T, preceded by R, except...
K_R_A_0E2T1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by E, followed by T, preceded by R, preceded by K, except...
H_K_R_A_0E2T1M1M2M3 = rule.Rule(-3, "H", True, -1) # Always cleaves before A, followed by E, followed by T, preceded by R, preceded by K, preceded by H, except...
K_R_A_0E2T1M1M2.rules.append(H_K_R_A_0E2T1M1M2M3)
R_A_0E2T1M1.rules.append(K_R_A_0E2T1M1M2)
A_0E2T1.rules.append(R_A_0E2T1M1)
A_0E2.rules.append(A_0E2T1)
A_0.rules.append(A_0E2)
A_0W2 = rule.Rule(2, "W", False, -1) # Never cleaves before A, followed by W, except...
A_0W2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before A, followed by W, followed by E, except...
R_A_0W2E1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by W, followed by E, preceded by R, except...
K_R_A_0W2E1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by W, followed by E, preceded by R, preceded by K, except...
K_K_R_A_0W2E1M1M2M3 = rule.Rule(-3, "K", True, -1) # Always cleaves before A, followed by W, followed by E, preceded by R, preceded by K, preceded by K, except...
K_R_A_0W2E1M1M2.rules.append(K_K_R_A_0W2E1M1M2M3)
R_A_0W2E1M1.rules.append(K_R_A_0W2E1M1M2)
A_0W2E1.rules.append(R_A_0W2E1M1)
A_0W2.rules.append(A_0W2E1)
A_0.rules.append(A_0W2)
ENZ.append(A_0)

H_0 = rule.Rule(0, "H", False, 0) # Never cleaves before H, except...
H_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before H, followed by S, except...
H_0S2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before H, followed by S, followed by T, except...
R_H_0S2T1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before H, followed by S, followed by T, preceded by R, except...
K_R_H_0S2T1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before H, followed by S, followed by T, preceded by R, preceded by K, except...
A_K_R_H_0S2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before H, followed by S, followed by T, preceded by R, preceded by K, preceded by A, except...
K_R_H_0S2T1M1M2.rules.append(A_K_R_H_0S2T1M1M2M3)
R_H_0S2T1M1.rules.append(K_R_H_0S2T1M1M2)
H_0S2T1.rules.append(R_H_0S2T1M1)
H_0S2.rules.append(H_0S2T1)
H_0S2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before H, followed by S, followed by K, except...
R_H_0S2K1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before H, followed by S, followed by K, preceded by R, except...
K_R_H_0S2K1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before H, followed by S, followed by K, preceded by R, preceded by K, except...
A_K_R_H_0S2K1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before H, followed by S, followed by K, preceded by R, preceded by K, preceded by A, except...
K_R_H_0S2K1M1M2.rules.append(A_K_R_H_0S2K1M1M2M3)
R_H_0S2K1M1.rules.append(K_R_H_0S2K1M1M2)
H_0S2K1.rules.append(R_H_0S2K1M1)
H_0S2.rules.append(H_0S2K1)
H_0.rules.append(H_0S2)
ENZ.append(H_0)

G_0 = rule.Rule(0, "G", False, 0) # Never cleaves before G, except...
G_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before G, followed by S, except...
G_0S2R1 = rule.Rule(1, "R", False, -1) # Never cleaves before G, followed by S, followed by R, except...
R_G_0S2R1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before G, followed by S, followed by R, preceded by R, except...
K_R_G_0S2R1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before G, followed by S, followed by R, preceded by R, preceded by K, except...
A_K_R_G_0S2R1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before G, followed by S, followed by R, preceded by R, preceded by K, preceded by A, except...
K_R_G_0S2R1M1M2.rules.append(A_K_R_G_0S2R1M1M2M3)
R_G_0S2R1M1.rules.append(K_R_G_0S2R1M1M2)
G_0S2R1.rules.append(R_G_0S2R1M1)
G_0S2.rules.append(G_0S2R1)
G_0.rules.append(G_0S2)
G_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before G, followed by V, except...
G_0V2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before G, followed by V, followed by P, except...
R_G_0V2P1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before G, followed by V, followed by P, preceded by R, except...
K_R_G_0V2P1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before G, followed by V, followed by P, preceded by R, preceded by K, except...
G_K_R_G_0V2P1M1M2M3 = rule.Rule(-3, "G", True, -1) # Always cleaves before G, followed by V, followed by P, preceded by R, preceded by K, preceded by G, except...
K_R_G_0V2P1M1M2.rules.append(G_K_R_G_0V2P1M1M2M3)
D_K_R_G_0V2P1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before G, followed by V, followed by P, preceded by R, preceded by K, preceded by D, except...
K_R_G_0V2P1M1M2.rules.append(D_K_R_G_0V2P1M1M2M3)
R_G_0V2P1M1.rules.append(K_R_G_0V2P1M1M2)
G_0V2P1.rules.append(R_G_0V2P1M1)
G_0V2.rules.append(G_0V2P1)
G_0V2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before G, followed by V, followed by T, except...
R_G_0V2T1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before G, followed by V, followed by T, preceded by R, except...
K_R_G_0V2T1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before G, followed by V, followed by T, preceded by R, preceded by K, except...
Q_K_R_G_0V2T1M1M2M3 = rule.Rule(-3, "Q", True, -1) # Always cleaves before G, followed by V, followed by T, preceded by R, preceded by K, preceded by Q, except...
K_R_G_0V2T1M1M2.rules.append(Q_K_R_G_0V2T1M1M2M3)
R_G_0V2T1M1.rules.append(K_R_G_0V2T1M1M2)
G_0V2T1.rules.append(R_G_0V2T1M1)
G_0V2.rules.append(G_0V2T1)
G_0V2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before G, followed by V, followed by E, except...
R_G_0V2E1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before G, followed by V, followed by E, preceded by R, except...
K_R_G_0V2E1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before G, followed by V, followed by E, preceded by R, preceded by K, except...
Y_K_R_G_0V2E1M1M2M3 = rule.Rule(-3, "Y", True, -1) # Always cleaves before G, followed by V, followed by E, preceded by R, preceded by K, preceded by Y, except...
K_R_G_0V2E1M1M2.rules.append(Y_K_R_G_0V2E1M1M2M3)
R_G_0V2E1M1.rules.append(K_R_G_0V2E1M1M2)
G_0V2E1.rules.append(R_G_0V2E1M1)
G_0V2.rules.append(G_0V2E1)
G_0V2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before G, followed by V, followed by V, except...
R_G_0V2V1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before G, followed by V, followed by V, preceded by R, except...
K_R_G_0V2V1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before G, followed by V, followed by V, preceded by R, preceded by K, except...
H_K_R_G_0V2V1M1M2M3 = rule.Rule(-3, "H", True, -1) # Always cleaves before G, followed by V, followed by V, preceded by R, preceded by K, preceded by H, except...
K_R_G_0V2V1M1M2.rules.append(H_K_R_G_0V2V1M1M2M3)
R_G_0V2V1M1.rules.append(K_R_G_0V2V1M1M2)
G_0V2V1.rules.append(R_G_0V2V1M1)
G_0V2.rules.append(G_0V2V1)
G_0.rules.append(G_0V2)
G_0D2 = rule.Rule(2, "D", False, -1) # Never cleaves before G, followed by D, except...
G_0D2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before G, followed by D, followed by G, except...
R_G_0D2G1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before G, followed by D, followed by G, preceded by R, except...
K_R_G_0D2G1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before G, followed by D, followed by G, preceded by R, preceded by K, except...
W_K_R_G_0D2G1M1M2M3 = rule.Rule(-3, "W", True, -1) # Always cleaves before G, followed by D, followed by G, preceded by R, preceded by K, preceded by W, except...
K_R_G_0D2G1M1M2.rules.append(W_K_R_G_0D2G1M1M2M3)
R_G_0D2G1M1.rules.append(K_R_G_0D2G1M1M2)
G_0D2G1.rules.append(R_G_0D2G1M1)
G_0D2.rules.append(G_0D2G1)
G_0.rules.append(G_0D2)
G_0Y2 = rule.Rule(2, "Y", False, -1) # Never cleaves before G, followed by Y, except...
G_0Y2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before G, followed by Y, followed by G, except...
R_G_0Y2G1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before G, followed by Y, followed by G, preceded by R, except...
K_R_G_0Y2G1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before G, followed by Y, followed by G, preceded by R, preceded by K, except...
Y_K_R_G_0Y2G1M1M2M3 = rule.Rule(-3, "Y", True, -1) # Always cleaves before G, followed by Y, followed by G, preceded by R, preceded by K, preceded by Y, except...
K_R_G_0Y2G1M1M2.rules.append(Y_K_R_G_0Y2G1M1M2M3)
R_G_0Y2G1M1.rules.append(K_R_G_0Y2G1M1M2)
G_0Y2G1.rules.append(R_G_0Y2G1M1)
G_0Y2.rules.append(G_0Y2G1)
G_0.rules.append(G_0Y2)
G_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before G, followed by G, except...
G_0G2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before G, followed by G, followed by G, except...
R_G_0G2G1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before G, followed by G, followed by G, preceded by R, except...
K_R_G_0G2G1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before G, followed by G, followed by G, preceded by R, preceded by K, except...
F_K_R_G_0G2G1M1M2M3 = rule.Rule(-3, "F", True, -1) # Always cleaves before G, followed by G, followed by G, preceded by R, preceded by K, preceded by F, except...
K_R_G_0G2G1M1M2.rules.append(F_K_R_G_0G2G1M1M2M3)
R_G_0G2G1M1.rules.append(K_R_G_0G2G1M1M2)
G_0G2G1.rules.append(R_G_0G2G1M1)
G_0G2.rules.append(G_0G2G1)
G_0.rules.append(G_0G2)
G_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before G, followed by A, except...
G_0A2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before G, followed by A, followed by D, except...
R_G_0A2D1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before G, followed by A, followed by D, preceded by R, except...
T_R_G_0A2D1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before G, followed by A, followed by D, preceded by R, preceded by T, except...
V_T_R_G_0A2D1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before G, followed by A, followed by D, preceded by R, preceded by T, preceded by V, except...
T_R_G_0A2D1M1M2.rules.append(V_T_R_G_0A2D1M1M2M3)
R_G_0A2D1M1.rules.append(T_R_G_0A2D1M1M2)
G_0A2D1.rules.append(R_G_0A2D1M1)
G_0A2.rules.append(G_0A2D1)
G_0.rules.append(G_0A2)
ENZ.append(G_0)

F_0 = rule.Rule(0, "F", False, 0) # Never cleaves before F, except...
F_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before F, followed by N, except...
F_0N2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before F, followed by N, followed by N, except...
R_F_0N2N1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before F, followed by N, followed by N, preceded by R, except...
R_R_F_0N2N1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before F, followed by N, followed by N, preceded by R, preceded by R, except...
F_R_R_F_0N2N1M1M2M3 = rule.Rule(-3, "F", True, -1) # Always cleaves before F, followed by N, followed by N, preceded by R, preceded by R, preceded by F, except...
R_R_F_0N2N1M1M2.rules.append(F_R_R_F_0N2N1M1M2M3)
R_F_0N2N1M1.rules.append(R_R_F_0N2N1M1M2)
F_0N2N1.rules.append(R_F_0N2N1M1)
F_0N2.rules.append(F_0N2N1)
F_0.rules.append(F_0N2)
F_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before F, followed by G, except...
F_0G2F1 = rule.Rule(1, "F", False, -1) # Never cleaves before F, followed by G, followed by F, except...
R_F_0G2F1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before F, followed by G, followed by F, preceded by R, except...
K_R_F_0G2F1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before F, followed by G, followed by F, preceded by R, preceded by K, except...
T_K_R_F_0G2F1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before F, followed by G, followed by F, preceded by R, preceded by K, preceded by T, except...
K_R_F_0G2F1M1M2.rules.append(T_K_R_F_0G2F1M1M2M3)
R_F_0G2F1M1.rules.append(K_R_F_0G2F1M1M2)
F_0G2F1.rules.append(R_F_0G2F1M1)
F_0G2.rules.append(F_0G2F1)
F_0.rules.append(F_0G2)
ENZ.append(F_0)

Q_0 = rule.Rule(0, "Q", False, 0) # Never cleaves before Q, except...
Q_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before Q, followed by L, except...
Q_0L2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before Q, followed by L, followed by A, except...
R_Q_0L2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before Q, followed by L, followed by A, preceded by R, except...
K_R_Q_0L2A1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before Q, followed by L, followed by A, preceded by R, preceded by K, except...
V_K_R_Q_0L2A1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before Q, followed by L, followed by A, preceded by R, preceded by K, preceded by V, except...
K_R_Q_0L2A1M1M2.rules.append(V_K_R_Q_0L2A1M1M2M3)
R_Q_0L2A1M1.rules.append(K_R_Q_0L2A1M1M2)
Q_0L2A1.rules.append(R_Q_0L2A1M1)
Q_0L2.rules.append(Q_0L2A1)
Q_0.rules.append(Q_0L2)
Q_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before Q, followed by V, except...
Q_0V2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before Q, followed by V, followed by A, except...
R_Q_0V2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before Q, followed by V, followed by A, preceded by R, except...
K_R_Q_0V2A1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before Q, followed by V, followed by A, preceded by R, preceded by K, except...
S_K_R_Q_0V2A1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before Q, followed by V, followed by A, preceded by R, preceded by K, preceded by S, except...
K_R_Q_0V2A1M1M2.rules.append(S_K_R_Q_0V2A1M1M2M3)
R_Q_0V2A1M1.rules.append(K_R_Q_0V2A1M1M2)
Q_0V2A1.rules.append(R_Q_0V2A1M1)
Q_0V2.rules.append(Q_0V2A1)
Q_0V2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before Q, followed by V, followed by T, except...
R_Q_0V2T1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before Q, followed by V, followed by T, preceded by R, except...
K_R_Q_0V2T1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before Q, followed by V, followed by T, preceded by R, preceded by K, except...
V_K_R_Q_0V2T1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before Q, followed by V, followed by T, preceded by R, preceded by K, preceded by V, except...
K_R_Q_0V2T1M1M2.rules.append(V_K_R_Q_0V2T1M1M2M3)
R_Q_0V2T1M1.rules.append(K_R_Q_0V2T1M1M2)
Q_0V2T1.rules.append(R_Q_0V2T1M1)
Q_0V2.rules.append(Q_0V2T1)
Q_0.rules.append(Q_0V2)
Q_0D2 = rule.Rule(2, "D", False, -1) # Never cleaves before Q, followed by D, except...
Q_0D2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before Q, followed by D, followed by S, except...
R_Q_0D2S1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before Q, followed by D, followed by S, preceded by R, except...
R_R_Q_0D2S1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before Q, followed by D, followed by S, preceded by R, preceded by R, except...
E_R_R_Q_0D2S1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before Q, followed by D, followed by S, preceded by R, preceded by R, preceded by E, except...
R_R_Q_0D2S1M1M2.rules.append(E_R_R_Q_0D2S1M1M2M3)
R_Q_0D2S1M1.rules.append(R_R_Q_0D2S1M1M2)
Q_0D2S1.rules.append(R_Q_0D2S1M1)
Q_0D2.rules.append(Q_0D2S1)
Q_0D2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before Q, followed by D, followed by I, except...
R_Q_0D2I1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before Q, followed by D, followed by I, preceded by R, except...
K_R_Q_0D2I1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before Q, followed by D, followed by I, preceded by R, preceded by K, except...
S_K_R_Q_0D2I1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before Q, followed by D, followed by I, preceded by R, preceded by K, preceded by S, except...
K_R_Q_0D2I1M1M2.rules.append(S_K_R_Q_0D2I1M1M2M3)
R_Q_0D2I1M1.rules.append(K_R_Q_0D2I1M1M2)
Q_0D2I1.rules.append(R_Q_0D2I1M1)
Q_0D2.rules.append(Q_0D2I1)
Q_0.rules.append(Q_0D2)
Q_0F2 = rule.Rule(2, "F", False, -1) # Never cleaves before Q, followed by F, except...
Q_0F2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before Q, followed by F, followed by E, except...
R_Q_0F2E1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before Q, followed by F, followed by E, preceded by R, except...
K_R_Q_0F2E1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before Q, followed by F, followed by E, preceded by R, preceded by K, except...
L_K_R_Q_0F2E1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before Q, followed by F, followed by E, preceded by R, preceded by K, preceded by L, except...
K_R_Q_0F2E1M1M2.rules.append(L_K_R_Q_0F2E1M1M2M3)
R_Q_0F2E1M1.rules.append(K_R_Q_0F2E1M1M2)
Q_0F2E1.rules.append(R_Q_0F2E1M1)
Q_0F2.rules.append(Q_0F2E1)
Q_0.rules.append(Q_0F2)
Q_0H2 = rule.Rule(2, "H", False, -1) # Never cleaves before Q, followed by H, except...
Q_0H2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before Q, followed by H, followed by L, except...
R_Q_0H2L1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before Q, followed by H, followed by L, preceded by R, except...
R_R_Q_0H2L1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before Q, followed by H, followed by L, preceded by R, preceded by R, except...
S_R_R_Q_0H2L1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before Q, followed by H, followed by L, preceded by R, preceded by R, preceded by S, except...
R_R_Q_0H2L1M1M2.rules.append(S_R_R_Q_0H2L1M1M2M3)
R_Q_0H2L1M1.rules.append(R_R_Q_0H2L1M1M2)
Q_0H2L1.rules.append(R_Q_0H2L1M1)
Q_0H2.rules.append(Q_0H2L1)
Q_0.rules.append(Q_0H2)
ENZ.append(Q_0)

I_0 = rule.Rule(0, "I", False, 0) # Never cleaves before I, except...
I_0K2 = rule.Rule(2, "K", False, -1) # Never cleaves before I, followed by K, except...
I_0K2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before I, followed by K, followed by K, except...
R_I_0K2K1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before I, followed by K, followed by K, preceded by R, except...
K_R_I_0K2K1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before I, followed by K, followed by K, preceded by R, preceded by K, except...
V_K_R_I_0K2K1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before I, followed by K, followed by K, preceded by R, preceded by K, preceded by V, except...
K_R_I_0K2K1M1M2.rules.append(V_K_R_I_0K2K1M1M2M3)
R_I_0K2K1M1.rules.append(K_R_I_0K2K1M1M2)
I_0K2K1.rules.append(R_I_0K2K1M1)
I_0K2.rules.append(I_0K2K1)
I_0.rules.append(I_0K2)
ENZ.append(I_0)

P_0 = rule.Rule(0, "P", False, 0) # Never cleaves before P, except...
P_0R2 = rule.Rule(2, "R", False, -1) # Never cleaves before P, followed by R, except...
P_0R2H1 = rule.Rule(1, "H", False, -1) # Never cleaves before P, followed by R, followed by H, except...
R_P_0R2H1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before P, followed by R, followed by H, preceded by R, except...
K_R_P_0R2H1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before P, followed by R, followed by H, preceded by R, preceded by K, except...
K_K_R_P_0R2H1M1M2M3 = rule.Rule(-3, "K", True, -1) # Always cleaves before P, followed by R, followed by H, preceded by R, preceded by K, preceded by K, except...
K_R_P_0R2H1M1M2.rules.append(K_K_R_P_0R2H1M1M2M3)
R_P_0R2H1M1.rules.append(K_R_P_0R2H1M1M2)
P_0R2H1.rules.append(R_P_0R2H1M1)
P_0R2.rules.append(P_0R2H1)
P_0.rules.append(P_0R2)
P_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before P, followed by P, except...
P_0P2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before P, followed by P, followed by A, except...
R_P_0P2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before P, followed by P, followed by A, preceded by R, except...
S_R_P_0P2A1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before P, followed by P, followed by A, preceded by R, preceded by S, except...
V_S_R_P_0P2A1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before P, followed by P, followed by A, preceded by R, preceded by S, preceded by V, except...
S_R_P_0P2A1M1M2.rules.append(V_S_R_P_0P2A1M1M2M3)
R_P_0P2A1M1.rules.append(S_R_P_0P2A1M1M2)
P_0P2A1.rules.append(R_P_0P2A1M1)
P_0P2.rules.append(P_0P2A1)
P_0.rules.append(P_0P2)
ENZ.append(P_0)

C_0 = rule.Rule(0, "C", False, 0) # Never cleaves before C, except...
C_0Y2 = rule.Rule(2, "Y", False, -1) # Never cleaves before C, followed by Y, except...
C_0Y2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before C, followed by Y, followed by N, except...
R_C_0Y2N1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before C, followed by Y, followed by N, preceded by R, except...
E_R_C_0Y2N1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before C, followed by Y, followed by N, preceded by R, preceded by E, except...
S_E_R_C_0Y2N1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before C, followed by Y, followed by N, preceded by R, preceded by E, preceded by S, except...
E_R_C_0Y2N1M1M2.rules.append(S_E_R_C_0Y2N1M1M2M3)
R_C_0Y2N1M1.rules.append(E_R_C_0Y2N1M1M2)
C_0Y2N1.rules.append(R_C_0Y2N1M1)
C_0Y2.rules.append(C_0Y2N1)
C_0.rules.append(C_0Y2)
ENZ.append(C_0)

N_0 = rule.Rule(0, "N", False, 0) # Never cleaves before N, except...
N_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before N, followed by N, except...
N_0N2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before N, followed by N, followed by D, except...
R_N_0N2D1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before N, followed by N, followed by D, preceded by R, except...
T_R_N_0N2D1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before N, followed by N, followed by D, preceded by R, preceded by T, except...
L_T_R_N_0N2D1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before N, followed by N, followed by D, preceded by R, preceded by T, preceded by L, except...
T_R_N_0N2D1M1M2.rules.append(L_T_R_N_0N2D1M1M2M3)
R_N_0N2D1M1.rules.append(T_R_N_0N2D1M1M2)
N_0N2D1.rules.append(R_N_0N2D1M1)
N_0N2.rules.append(N_0N2D1)
N_0.rules.append(N_0N2)
N_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before N, followed by I, except...
N_0I2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before N, followed by I, followed by V, except...
R_N_0I2V1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before N, followed by I, followed by V, preceded by R, except...
K_R_N_0I2V1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before N, followed by I, followed by V, preceded by R, preceded by K, except...
V_K_R_N_0I2V1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before N, followed by I, followed by V, preceded by R, preceded by K, preceded by V, except...
K_R_N_0I2V1M1M2.rules.append(V_K_R_N_0I2V1M1M2M3)
R_N_0I2V1M1.rules.append(K_R_N_0I2V1M1M2)
N_0I2V1.rules.append(R_N_0I2V1M1)
N_0I2.rules.append(N_0I2V1)
N_0.rules.append(N_0I2)
N_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before N, followed by E, except...
N_0E2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before N, followed by E, followed by A, except...
R_N_0E2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before N, followed by E, followed by A, preceded by R, except...
R_R_N_0E2A1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before N, followed by E, followed by A, preceded by R, preceded by R, except...
H_R_R_N_0E2A1M1M2M3 = rule.Rule(-3, "H", True, -1) # Always cleaves before N, followed by E, followed by A, preceded by R, preceded by R, preceded by H, except...
R_R_N_0E2A1M1M2.rules.append(H_R_R_N_0E2A1M1M2M3)
R_N_0E2A1M1.rules.append(R_R_N_0E2A1M1M2)
N_0E2A1.rules.append(R_N_0E2A1M1)
N_0E2.rules.append(N_0E2A1)
N_0.rules.append(N_0E2)
N_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before N, followed by V, except...
N_0V2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before N, followed by V, followed by E, except...
R_N_0V2E1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before N, followed by V, followed by E, preceded by R, except...
K_R_N_0V2E1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before N, followed by V, followed by E, preceded by R, preceded by K, except...
F_K_R_N_0V2E1M1M2M3 = rule.Rule(-3, "F", True, -1) # Always cleaves before N, followed by V, followed by E, preceded by R, preceded by K, preceded by F, except...
K_R_N_0V2E1M1M2.rules.append(F_K_R_N_0V2E1M1M2M3)
R_N_0V2E1M1.rules.append(K_R_N_0V2E1M1M2)
N_0V2E1.rules.append(R_N_0V2E1M1)
N_0V2.rules.append(N_0V2E1)
N_0.rules.append(N_0V2)
ENZ.append(N_0)

Y_0 = rule.Rule(0, "Y", False, 0) # Never cleaves before Y, except...
Y_0D2 = rule.Rule(2, "D", False, -1) # Never cleaves before Y, followed by D, except...
Y_0D2Y1 = rule.Rule(1, "Y", False, -1) # Never cleaves before Y, followed by D, followed by Y, except...
R_Y_0D2Y1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before Y, followed by D, followed by Y, preceded by R, except...
K_R_Y_0D2Y1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before Y, followed by D, followed by Y, preceded by R, preceded by K, except...
E_K_R_Y_0D2Y1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before Y, followed by D, followed by Y, preceded by R, preceded by K, preceded by E, except...
K_R_Y_0D2Y1M1M2.rules.append(E_K_R_Y_0D2Y1M1M2M3)
R_Y_0D2Y1M1.rules.append(K_R_Y_0D2Y1M1M2)
Y_0D2F1 = rule.Rule(1, "F", False, -1) # Never cleaves before Y, followed by D, followed by F, except...
R_Y_0D2F1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before Y, followed by D, followed by F, preceded by R, except...
K_R_Y_0D2F1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before Y, followed by D, followed by F, preceded by R, preceded by K, except...
T_K_R_Y_0D2F1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before Y, followed by D, followed by F, preceded by R, preceded by K, preceded by T, except...
K_R_Y_0D2F1M1M2.rules.append(T_K_R_Y_0D2F1M1M2M3)
R_Y_0D2F1M1.rules.append(K_R_Y_0D2F1M1M2)
Y_0D2F1.rules.append(R_Y_0D2F1M1)
Y_0D2.rules.append(Y_0D2F1)
Y_0.rules.append(Y_0D2)
Y_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before Y, followed by G, except...
Y_0G2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before Y, followed by G, followed by G, except...
R_Y_0G2G1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before Y, followed by G, followed by G, preceded by R, except...
K_R_Y_0G2G1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before Y, followed by G, followed by G, preceded by R, preceded by K, except...
D_K_R_Y_0G2G1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before Y, followed by G, followed by G, preceded by R, preceded by K, preceded by D, except...
K_R_Y_0G2G1M1M2.rules.append(D_K_R_Y_0G2G1M1M2M3)
R_Y_0G2G1M1.rules.append(K_R_Y_0G2G1M1M2)
Y_0G2G1.rules.append(R_Y_0G2G1M1)
Y_0G2.rules.append(Y_0G2G1)
Y_0.rules.append(Y_0G2)
ENZ.append(Y_0)

L_0 = rule.Rule(0, "L", False, 0) # Never cleaves before L, except...
L_0D2 = rule.Rule(2, "D", False, -1) # Never cleaves before L, followed by D, except...
L_0D2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before L, followed by D, followed by T, except...
R_L_0D2T1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before L, followed by D, followed by T, preceded by R, except...
K_R_L_0D2T1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before L, followed by D, followed by T, preceded by R, preceded by K, except...
E_K_R_L_0D2T1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before L, followed by D, followed by T, preceded by R, preceded by K, preceded by E, except...
K_R_L_0D2T1M1M2.rules.append(E_K_R_L_0D2T1M1M2M3)
R_L_0D2T1M1.rules.append(K_R_L_0D2T1M1M2)
L_0D2T1.rules.append(R_L_0D2T1M1)
L_0D2.rules.append(L_0D2T1)
L_0.rules.append(L_0D2)
L_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before L, followed by V, except...
L_0V2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before L, followed by V, followed by P, except...
R_L_0V2P1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before L, followed by V, followed by P, preceded by R, except...
K_R_L_0V2P1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before L, followed by V, followed by P, preceded by R, preceded by K, except...
F_K_R_L_0V2P1M1M2M3 = rule.Rule(-3, "F", True, -1) # Always cleaves before L, followed by V, followed by P, preceded by R, preceded by K, preceded by F, except...
K_R_L_0V2P1M1M2.rules.append(F_K_R_L_0V2P1M1M2M3)
E_K_R_L_0V2P1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before L, followed by V, followed by P, preceded by R, preceded by K, preceded by E, except...
K_R_L_0V2P1M1M2.rules.append(E_K_R_L_0V2P1M1M2M3)
R_L_0V2P1M1.rules.append(K_R_L_0V2P1M1M2)
L_0V2P1.rules.append(R_L_0V2P1M1)
L_0V2.rules.append(L_0V2P1)
L_0.rules.append(L_0V2)
L_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before L, followed by L, except...
L_0L2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before L, followed by L, followed by D, except...
R_L_0L2D1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before L, followed by L, followed by D, preceded by R, except...
K_R_L_0L2D1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before L, followed by L, followed by D, preceded by R, preceded by K, except...
E_K_R_L_0L2D1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before L, followed by L, followed by D, preceded by R, preceded by K, preceded by E, except...
K_R_L_0L2D1M1M2.rules.append(E_K_R_L_0L2D1M1M2M3)
R_L_0L2D1M1.rules.append(K_R_L_0L2D1M1M2)
L_0L2D1.rules.append(R_L_0L2D1M1)
L_0L2.rules.append(L_0L2D1)
L_0.rules.append(L_0L2)
ENZ.append(L_0)

T_0 = rule.Rule(0, "T", False, 0) # Never cleaves before T, except...
T_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before T, followed by P, except...
T_0P2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before T, followed by P, followed by P, except...
R_T_0P2P1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before T, followed by P, followed by P, preceded by R, except...
K_R_T_0P2P1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before T, followed by P, followed by P, preceded by R, preceded by K, except...
V_K_R_T_0P2P1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before T, followed by P, followed by P, preceded by R, preceded by K, preceded by V, except...
K_R_T_0P2P1M1M2.rules.append(V_K_R_T_0P2P1M1M2M3)
R_T_0P2P1M1.rules.append(K_R_T_0P2P1M1M2)
T_0P2P1.rules.append(R_T_0P2P1M1)
T_0P2.rules.append(T_0P2P1)
T_0.rules.append(T_0P2)
ENZ.append(T_0)

V_0 = rule.Rule(0, "V", False, 0) # Never cleaves before V, except...
V_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before V, followed by P, except...
V_0P2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before V, followed by P, followed by P, except...
R_V_0P2P1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before V, followed by P, followed by P, preceded by R, except...
K_R_V_0P2P1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before V, followed by P, followed by P, preceded by R, preceded by K, except...
H_K_R_V_0P2P1M1M2M3 = rule.Rule(-3, "H", True, -1) # Always cleaves before V, followed by P, followed by P, preceded by R, preceded by K, preceded by H, except...
K_R_V_0P2P1M1M2.rules.append(H_K_R_V_0P2P1M1M2M3)
R_V_0P2P1M1.rules.append(K_R_V_0P2P1M1M2)
V_0P2P1.rules.append(R_V_0P2P1M1)
V_0P2.rules.append(V_0P2P1)
V_0.rules.append(V_0P2)
ENZ.append(V_0)

R_0 = rule.Rule(0, "R", False, 0) # Never cleaves before R, except...
R_0Q2 = rule.Rule(2, "Q", False, -1) # Never cleaves before R, followed by Q, except...
R_0Q2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before R, followed by Q, followed by S, except...
R_R_0Q2S1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before R, followed by Q, followed by S, preceded by R, except...
R_R_R_0Q2S1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before R, followed by Q, followed by S, preceded by R, preceded by R, except...
H_R_R_R_0Q2S1M1M2M3 = rule.Rule(-3, "H", True, -1) # Always cleaves before R, followed by Q, followed by S, preceded by R, preceded by R, preceded by H, except...
R_R_R_0Q2S1M1M2.rules.append(H_R_R_R_0Q2S1M1M2M3)
R_R_0Q2S1M1.rules.append(R_R_R_0Q2S1M1M2)
R_0Q2S1.rules.append(R_R_0Q2S1M1)
R_0Q2.rules.append(R_0Q2S1)
R_0.rules.append(R_0Q2)
R_0H2 = rule.Rule(2, "H", False, -1) # Never cleaves before R, followed by H, except...
R_0H2F1 = rule.Rule(1, "F", False, -1) # Never cleaves before R, followed by H, followed by F, except...
R_R_0H2F1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before R, followed by H, followed by F, preceded by R, except...
V_R_R_0H2F1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before R, followed by H, followed by F, preceded by R, preceded by V, except...
E_V_R_R_0H2F1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before R, followed by H, followed by F, preceded by R, preceded by V, preceded by E, except...
V_R_R_0H2F1M1M2.rules.append(E_V_R_R_0H2F1M1M2M3)
R_R_0H2F1M1.rules.append(V_R_R_0H2F1M1M2)
R_0H2F1.rules.append(R_R_0H2F1M1)
R_0H2.rules.append(R_0H2F1)
R_0.rules.append(R_0H2)
ENZ.append(R_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "kexin", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme dipeptidyl-peptidase-IV
ENZ = []

D_0 = rule.Rule(0, "D", False, 0) # Never cleaves before D, except...
D_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before D, followed by I, except...
D_0I2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before D, followed by I, followed by A, except...
P_D_0I2A1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before D, followed by I, followed by A, preceded by P, except...
Q_P_D_0I2A1M1M2 = rule.Rule(-2, "Q", True, -1) # Always cleaves before D, followed by I, followed by A, preceded by P, preceded by Q, except...
P_D_0I2A1M1.rules.append(Q_P_D_0I2A1M1M2)
D_0I2A1.rules.append(P_D_0I2A1M1)
D_0I2.rules.append(D_0I2A1)
D_0.rules.append(D_0I2)
ENZ.append(D_0)

L_0 = rule.Rule(0, "L", False, 0) # Never cleaves before L, except...
L_0R2 = rule.Rule(2, "R", False, -1) # Never cleaves before L, followed by R, except...
L_0R2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before L, followed by R, followed by S, except...
P_L_0R2S1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before L, followed by R, followed by S, preceded by P, except...
V_P_L_0R2S1M1M2 = rule.Rule(-2, "V", True, -1) # Always cleaves before L, followed by R, followed by S, preceded by P, preceded by V, except...
P_L_0R2S1M1.rules.append(V_P_L_0R2S1M1M2)
L_0R2S1.rules.append(P_L_0R2S1M1)
L_0R2.rules.append(L_0R2S1)
L_0.rules.append(L_0R2)
L_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before L, followed by A, except...
L_0A2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before L, followed by A, followed by P, except...
P_L_0A2P1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before L, followed by A, followed by P, preceded by P, except...
V_P_L_0A2P1M1M2 = rule.Rule(-2, "V", True, -1) # Always cleaves before L, followed by A, followed by P, preceded by P, preceded by V, except...
P_L_0A2P1M1.rules.append(V_P_L_0A2P1M1M2)
L_0A2P1.rules.append(P_L_0A2P1M1)
L_0A2.rules.append(L_0A2P1)
L_0A2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before L, followed by A, followed by A, except...
P_L_0A2A1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before L, followed by A, followed by A, preceded by P, except...
A_P_L_0A2A1M1M2 = rule.Rule(-2, "A", True, -1) # Always cleaves before L, followed by A, followed by A, preceded by P, preceded by A, except...
P_L_0A2A1M1.rules.append(A_P_L_0A2A1M1M2)
L_0A2A1.rules.append(P_L_0A2A1M1)
L_0A2.rules.append(L_0A2A1)
L_0.rules.append(L_0A2)
L_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before L, followed by T, except...
L_0T2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before L, followed by T, followed by A, except...
P_L_0T2A1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before L, followed by T, followed by A, preceded by P, except...
A_P_L_0T2A1M1M2 = rule.Rule(-2, "A", True, -1) # Always cleaves before L, followed by T, followed by A, preceded by P, preceded by A, except...
P_L_0T2A1M1.rules.append(A_P_L_0T2A1M1M2)
L_0T2A1.rules.append(P_L_0T2A1M1)
L_0T2.rules.append(L_0T2A1)
L_0.rules.append(L_0T2)
ENZ.append(L_0)

M_0 = rule.Rule(0, "M", False, 0) # Never cleaves before M, except...
M_0K2 = rule.Rule(2, "K", False, -1) # Never cleaves before M, followed by K, except...
M_0K2F1 = rule.Rule(1, "F", False, -1) # Never cleaves before M, followed by K, followed by F, except...
P_M_0K2F1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before M, followed by K, followed by F, preceded by P, except...
F_P_M_0K2F1M1M2 = rule.Rule(-2, "F", True, -1) # Always cleaves before M, followed by K, followed by F, preceded by P, preceded by F, except...
P_M_0K2F1M1.rules.append(F_P_M_0K2F1M1M2)
M_0K2F1.rules.append(P_M_0K2F1M1)
M_0K2.rules.append(M_0K2F1)
M_0.rules.append(M_0K2)
ENZ.append(M_0)

V_0 = rule.Rule(0, "V", False, 0) # Never cleaves before V, except...
V_0R2 = rule.Rule(2, "R", False, -1) # Never cleaves before V, followed by R, except...
V_0R2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before V, followed by R, followed by V, except...
P_V_0R2V1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before V, followed by R, followed by V, preceded by P, except...
T_P_V_0R2V1M1M2 = rule.Rule(-2, "T", True, -1) # Always cleaves before V, followed by R, followed by V, preceded by P, preceded by T, except...
P_V_0R2V1M1.rules.append(T_P_V_0R2V1M1M2)
V_0R2V1.rules.append(P_V_0R2V1M1)
V_0R2.rules.append(V_0R2V1)
V_0.rules.append(V_0R2)
V_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before V, followed by A, except...
V_0A2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before V, followed by A, followed by S, except...
P_V_0A2S1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before V, followed by A, followed by S, preceded by P, except...
G_P_V_0A2S1M1M2 = rule.Rule(-2, "G", True, -1) # Always cleaves before V, followed by A, followed by S, preceded by P, preceded by G, except...
P_V_0A2S1M1.rules.append(G_P_V_0A2S1M1M2)
V_0A2S1.rules.append(P_V_0A2S1M1)
V_0A2.rules.append(V_0A2S1)
V_0.rules.append(V_0A2)
V_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before V, followed by L, except...
V_0L2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before V, followed by L, followed by S, except...
P_V_0L2S1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before V, followed by L, followed by S, preceded by P, except...
K_P_V_0L2S1M1M2 = rule.Rule(-2, "K", True, -1) # Always cleaves before V, followed by L, followed by S, preceded by P, preceded by K, except...
P_V_0L2S1M1.rules.append(K_P_V_0L2S1M1M2)
V_0L2S1.rules.append(P_V_0L2S1M1)
V_0L2.rules.append(V_0L2S1)
V_0.rules.append(V_0L2)
ENZ.append(V_0)

N_0 = rule.Rule(0, "N", False, 0) # Never cleaves before N, except...
N_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before N, followed by A, except...
N_0A2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before N, followed by A, followed by T, except...
C_N_0A2T1M1 = rule.Rule(-1, "C", False, -1) # Never cleaves before N, followed by A, followed by T, preceded by C, except...
A_C_N_0A2T1M1M2 = rule.Rule(-2, "A", True, -1) # Always cleaves before N, followed by A, followed by T, preceded by C, preceded by A, except...
C_N_0A2T1M1.rules.append(A_C_N_0A2T1M1M2)
N_0A2T1.rules.append(C_N_0A2T1M1)
N_0A2.rules.append(N_0A2T1)
N_0.rules.append(N_0A2)
ENZ.append(N_0)

A_0 = rule.Rule(0, "A", False, 0) # Never cleaves before A, except...
A_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before A, followed by V, except...
A_0V2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before A, followed by V, followed by S, except...
P_A_0V2S1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before A, followed by V, followed by S, preceded by P, except...
G_P_A_0V2S1M1M2 = rule.Rule(-2, "G", True, -1) # Always cleaves before A, followed by V, followed by S, preceded by P, preceded by G, except...
P_A_0V2S1M1.rules.append(G_P_A_0V2S1M1M2)
A_0V2S1.rules.append(P_A_0V2S1M1)
A_0V2.rules.append(A_0V2S1)
A_0.rules.append(A_0V2)
A_0M2 = rule.Rule(2, "M", False, -1) # Never cleaves before A, followed by M, except...
A_0M2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before A, followed by M, followed by N, except...
G_A_0M2N1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before A, followed by M, followed by N, preceded by G, except...
K_G_A_0M2N1M1M2 = rule.Rule(-2, "K", True, -1) # Always cleaves before A, followed by M, followed by N, preceded by G, preceded by K, except...
G_A_0M2N1M1.rules.append(K_G_A_0M2N1M1M2)
Y_G_A_0M2N1M1M2 = rule.Rule(-2, "Y", True, -1) # Always cleaves before A, followed by M, followed by N, preceded by G, preceded by Y, except...
G_A_0M2N1M1.rules.append(Y_G_A_0M2N1M1M2)
A_0M2N1.rules.append(G_A_0M2N1M1)
A_0M2.rules.append(A_0M2N1)
A_0.rules.append(A_0M2)
ENZ.append(A_0)

E_0 = rule.Rule(0, "E", False, 0) # Never cleaves before E, except...
E_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before E, followed by T, except...
E_0T2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before E, followed by T, followed by G, except...
A_E_0T2G1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by T, followed by G, preceded by A, except...
Y_A_E_0T2G1M1M2 = rule.Rule(-2, "Y", True, -1) # Always cleaves before E, followed by T, followed by G, preceded by A, preceded by Y, except...
A_E_0T2G1M1.rules.append(Y_A_E_0T2G1M1M2)
H_A_E_0T2G1M1M2 = rule.Rule(-2, "H", True, -1) # Always cleaves before E, followed by T, followed by G, preceded by A, preceded by H, except...
A_E_0T2G1M1.rules.append(H_A_E_0T2G1M1M2)
E_0T2G1.rules.append(A_E_0T2G1M1)
E_0T2.rules.append(E_0T2G1)
E_0.rules.append(E_0T2)
E_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before E, followed by E, except...
E_0E2F1 = rule.Rule(1, "F", False, -1) # Never cleaves before E, followed by E, followed by F, except...
D_E_0E2F1M1 = rule.Rule(-1, "D", False, -1) # Never cleaves before E, followed by E, followed by F, preceded by D, except...
H_D_E_0E2F1M1M2 = rule.Rule(-2, "H", True, -1) # Always cleaves before E, followed by E, followed by F, preceded by D, preceded by H, except...
D_E_0E2F1M1.rules.append(H_D_E_0E2F1M1M2)
E_0E2F1.rules.append(D_E_0E2F1M1)
E_0E2.rules.append(E_0E2F1)
E_0.rules.append(E_0E2)
ENZ.append(E_0)

Y_0 = rule.Rule(0, "Y", False, 0) # Never cleaves before Y, except...
Y_0M2 = rule.Rule(2, "M", False, -1) # Never cleaves before Y, followed by M, except...
Y_0M2R1 = rule.Rule(1, "R", False, -1) # Never cleaves before Y, followed by M, followed by R, except...
P_Y_0M2R1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before Y, followed by M, followed by R, preceded by P, except...
G_P_Y_0M2R1M1M2 = rule.Rule(-2, "G", True, -1) # Always cleaves before Y, followed by M, followed by R, preceded by P, preceded by G, except...
P_Y_0M2R1M1.rules.append(G_P_Y_0M2R1M1M2)
Y_0M2R1.rules.append(P_Y_0M2R1M1)
Y_0M2.rules.append(Y_0M2R1)
Y_0.rules.append(Y_0M2)
Y_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before Y, followed by S, except...
Y_0S2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before Y, followed by S, followed by S, except...
P_Y_0S2S1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before Y, followed by S, followed by S, preceded by P, except...
S_P_Y_0S2S1M1M2 = rule.Rule(-2, "S", True, -1) # Always cleaves before Y, followed by S, followed by S, preceded by P, preceded by S, except...
P_Y_0S2S1M1.rules.append(S_P_Y_0S2S1M1M2)
Y_0S2S1.rules.append(P_Y_0S2S1M1)
Y_0S2.rules.append(Y_0S2S1)
Y_0.rules.append(Y_0S2)
Y_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before Y, followed by A, except...
Y_0A2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before Y, followed by A, followed by G, except...
P_Y_0A2G1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before Y, followed by A, followed by G, preceded by P, except...
G_P_Y_0A2G1M1M2 = rule.Rule(-2, "G", True, -1) # Always cleaves before Y, followed by A, followed by G, preceded by P, preceded by G, except...
P_Y_0A2G1M1.rules.append(G_P_Y_0A2G1M1M2)
Y_0A2G1.rules.append(P_Y_0A2G1M1)
Y_0A2.rules.append(Y_0A2G1)
Y_0.rules.append(Y_0A2)
ENZ.append(Y_0)

S_0 = rule.Rule(0, "S", False, 0) # Never cleaves before S, except...
S_0K2 = rule.Rule(2, "K", False, -1) # Never cleaves before S, followed by K, except...
S_0K2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before S, followed by K, followed by L, except...
P_S_0K2L1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before S, followed by K, followed by L, preceded by P, except...
Y_P_S_0K2L1M1M2 = rule.Rule(-2, "Y", True, -1) # Always cleaves before S, followed by K, followed by L, preceded by P, preceded by Y, except...
P_S_0K2L1M1.rules.append(Y_P_S_0K2L1M1M2)
S_0K2L1.rules.append(P_S_0K2L1M1)
S_0K2.rules.append(S_0K2L1)
S_0.rules.append(S_0K2)
ENZ.append(S_0)

K_0Q2 = rule.Rule(2, "Q", False, -1) # Never cleaves before K, followed by Q, except...
K_0Q2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before K, followed by Q, followed by P, except...
P_K_0Q2P1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before K, followed by Q, followed by P, preceded by P, except...
R_P_K_0Q2P1M1M2 = rule.Rule(-2, "R", True, -1) # Always cleaves before K, followed by Q, followed by P, preceded by P, preceded by R, except...
P_K_0Q2P1M1.rules.append(R_P_K_0Q2P1M1M2)
K_0Q2P1.rules.append(P_K_0Q2P1M1)
K_0Q2.rules.append(K_0Q2P1)
K_0.rules.append(K_0Q2)
ENZ.append(K_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "dipeptidyl-peptidase-IV", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme carboxypeptidase-Y
ENZ = []

A_0 = rule.Rule(0, "A", False, 0) # Never cleaves before A, except...
A_A_0M1 = rule.Rule(-1, "A", True, -1) # Always cleaves before A, preceded by A, except...
A_0.rules.append(A_A_0M1)
ENZ.append(A_0)

R_0 = rule.Rule(0, "R", False, 0) # Never cleaves before R, except...
A_R_0M1 = rule.Rule(-1, "A", True, -1) # Always cleaves before R, preceded by A, except...
R_0.rules.append(A_R_0M1)
ENZ.append(R_0)

N_0 = rule.Rule(0, "N", False, 0) # Never cleaves before N, except...
A_N_0M1 = rule.Rule(-1, "A", True, -1) # Always cleaves before N, preceded by A, except...
N_0.rules.append(A_N_0M1)
ENZ.append(N_0)

I_0 = rule.Rule(0, "I", False, 0) # Never cleaves before I, except...
A_I_0M1 = rule.Rule(-1, "A", True, -1) # Always cleaves before I, preceded by A, except...
I_0.rules.append(A_I_0M1)
ENZ.append(I_0)

K_0 = rule.Rule(0, "K", False, 0) # Never cleaves before K, except...
A_K_0M1 = rule.Rule(-1, "A", True, -1) # Always cleaves before K, preceded by A, except...
K_0.rules.append(A_K_0M1)
ENZ.append(K_0)

M_0 = rule.Rule(0, "M", False, 0) # Never cleaves before M, except...
A_M_0M1 = rule.Rule(-1, "A", True, -1) # Always cleaves before M, preceded by A, except...
M_0.rules.append(A_M_0M1)
ENZ.append(M_0)

F_0 = rule.Rule(0, "F", False, 0) # Never cleaves before F, except...
A_F_0M1 = rule.Rule(-1, "A", True, -1) # Always cleaves before F, preceded by A, except...
F_0.rules.append(A_F_0M1)
ENZ.append(F_0)

P_0 = rule.Rule(0, "P", False, 0) # Never cleaves before P, except...
A_P_0M1 = rule.Rule(-1, "A", True, -1) # Always cleaves before P, preceded by A, except...
P_0.rules.append(A_P_0M1)
ENZ.append(P_0)

S_0 = rule.Rule(0, "S", False, 0) # Never cleaves before S, except...
A_S_0M1 = rule.Rule(-1, "A", True, -1) # Always cleaves before S, preceded by A, except...
S_0.rules.append(A_S_0M1)
ENZ.append(S_0)

V_0 = rule.Rule(0, "V", False, 0) # Never cleaves before V, except...
A_V_0M1 = rule.Rule(-1, "A", True, -1) # Always cleaves before V, preceded by A, except...
V_0.rules.append(A_V_0M1)
ENZ.append(V_0)

L_0 = rule.Rule(0, "L", False, 0) # Never cleaves before L, except...
G_L_0M1 = rule.Rule(-1, "G", True, -1) # Always cleaves before L, preceded by G, except...
L_0.rules.append(G_L_0M1)
ENZ.append(L_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "carboxypeptidase-Y", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme lysosomal-Pro-Xaa-carboxypeptidase
ENZ = []

A_0 = rule.Rule(0, "A", False, 0) # Never cleaves before A, except...
P_A_0M1 = rule.Rule(-1, "P", True, -1) # Always cleaves before A, preceded by P, except...
H_P_A_0M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before A, preceded by P, preceded by H, except...
I_H_P_A_0M1M2M3 = rule.Rule(-3, "I", True, -1) # Always cleaves before A, preceded by P, preceded by H, preceded by I, except...
H_P_A_0M1M2.rules.append(I_H_P_A_0M1M2M3)
P_A_0M1.rules.append(H_P_A_0M1M2)
A_0.rules.append(P_A_0M1)
ENZ.append(A_0)

G_0 = rule.Rule(0, "G", False, 0) # Never cleaves before G, except...
P_G_0M1 = rule.Rule(-1, "P", True, -1) # Always cleaves before G, preceded by P, except...
G_0.rules.append(P_G_0M1)
ENZ.append(G_0)

L_0 = rule.Rule(0, "L", False, 0) # Never cleaves before L, except...
P_L_0M1 = rule.Rule(-1, "P", True, -1) # Always cleaves before L, preceded by P, except...
L_0.rules.append(P_L_0M1)
ENZ.append(L_0)

F_0 = rule.Rule(0, "F", False, 0) # Never cleaves before F, except...
P_F_0M1 = rule.Rule(-1, "P", True, -1) # Always cleaves before F, preceded by P, except...
H_P_F_0M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before F, preceded by P, preceded by H, except...
I_H_P_F_0M1M2M3 = rule.Rule(-3, "I", True, -1) # Always cleaves before F, preceded by P, preceded by H, preceded by I, except...
H_P_F_0M1M2.rules.append(I_H_P_F_0M1M2M3)
P_F_0M1.rules.append(H_P_F_0M1M2)
S_P_F_0M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before F, preceded by P, preceded by S, except...
F_S_P_F_0M1M2M3 = rule.Rule(-3, "F", True, -1) # Always cleaves before F, preceded by P, preceded by S, preceded by F, except...
S_P_F_0M1M2.rules.append(F_S_P_F_0M1M2M3)
P_F_0M1.rules.append(S_P_F_0M1M2)
F_0.rules.append(P_F_0M1)
ENZ.append(F_0)

V_0 = rule.Rule(0, "V", False, 0) # Never cleaves before V, except...
P_V_0M1 = rule.Rule(-1, "P", True, -1) # Always cleaves before V, preceded by P, except...
V_0.rules.append(P_V_0M1)
ENZ.append(V_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "lysosomal-Pro-Xaa-carboxypeptidase", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme nucleoporin-145
ENZ = []

S_0 = rule.Rule(0, "S", False, 0) # Never cleaves before S, except...
S_0Y2 = rule.Rule(2, "Y", False, -1) # Never cleaves before S, followed by Y, except...
S_0Y2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before S, followed by Y, followed by K, except...
F_S_0Y2K1M1 = rule.Rule(-1, "F", False, -1) # Never cleaves before S, followed by Y, followed by K, preceded by F, except...
H_F_S_0Y2K1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before S, followed by Y, followed by K, preceded by F, preceded by H, except...
S_H_F_S_0Y2K1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before S, followed by Y, followed by K, preceded by F, preceded by H, preceded by S, except...
H_F_S_0Y2K1M1M2.rules.append(S_H_F_S_0Y2K1M1M2M3)
F_S_0Y2K1M1.rules.append(H_F_S_0Y2K1M1M2)
S_0Y2K1.rules.append(F_S_0Y2K1M1)
S_0Y2.rules.append(S_0Y2K1)
S_0.rules.append(S_0Y2)
ENZ.append(S_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "nucleoporin-145", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme archaean-proteasome
ENZ = []

S_0 = rule.Rule(0, "S", False, 0) # Never cleaves before S, except...
S_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before S, followed by L, except...
S_0L2H1 = rule.Rule(1, "H", False, -1) # Never cleaves before S, followed by L, followed by H, except...
G_S_0L2H1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before S, followed by L, followed by H, preceded by G, except...
C_G_S_0L2H1M1M2 = rule.Rule(-2, "C", False, -1) # Never cleaves before S, followed by L, followed by H, preceded by G, preceded by C, except...
L_C_G_S_0L2H1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before S, followed by L, followed by H, preceded by G, preceded by C, preceded by L, except...
C_G_S_0L2H1M1M2.rules.append(L_C_G_S_0L2H1M1M2M3)
G_S_0L2H1M1.rules.append(C_G_S_0L2H1M1M2)
S_0L2H1.rules.append(G_S_0L2H1M1)
S_0L2.rules.append(S_0L2H1)
S_0.rules.append(S_0L2)
ENZ.append(S_0)

A_0 = rule.Rule(0, "A", False, 0) # Never cleaves before A, except...
A_0Y2 = rule.Rule(2, "Y", False, -1) # Never cleaves before A, followed by Y, except...
A_0Y2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before A, followed by Y, followed by L, except...
E_A_0Y2L1M1 = rule.Rule(-1, "E", False, -1) # Never cleaves before A, followed by Y, followed by L, preceded by E, except...
V_E_A_0Y2L1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before A, followed by Y, followed by L, preceded by E, preceded by V, except...
L_V_E_A_0Y2L1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before A, followed by Y, followed by L, preceded by E, preceded by V, preceded by L, except...
V_E_A_0Y2L1M1M2.rules.append(L_V_E_A_0Y2L1M1M2M3)
E_A_0Y2L1M1.rules.append(V_E_A_0Y2L1M1M2)
A_0Y2L1.rules.append(E_A_0Y2L1M1)
A_0Y2.rules.append(A_0Y2L1)
A_0.rules.append(A_0Y2)
ENZ.append(A_0)

C_0 = rule.Rule(0, "C", False, 0) # Never cleaves before C, except...
C_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before C, followed by E, except...
C_0E2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before C, followed by E, followed by G, except...
V_C_0E2G1M1 = rule.Rule(-1, "V", False, -1) # Never cleaves before C, followed by E, followed by G, preceded by V, except...
L_V_C_0E2G1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before C, followed by E, followed by G, preceded by V, preceded by L, except...
Y_L_V_C_0E2G1M1M2M3 = rule.Rule(-3, "Y", True, -1) # Always cleaves before C, followed by E, followed by G, preceded by V, preceded by L, preceded by Y, except...
L_V_C_0E2G1M1M2.rules.append(Y_L_V_C_0E2G1M1M2M3)
V_C_0E2G1M1.rules.append(L_V_C_0E2G1M1M2)
C_0E2G1.rules.append(V_C_0E2G1M1)
C_0E2.rules.append(C_0E2G1)
C_0.rules.append(C_0E2)
ENZ.append(C_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "archaean-proteasome", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme matrix_metallopeptidase-1
ENZ = []

L_0 = rule.Rule(0, "L", False, 0) # Never cleaves before L, except...
L_0V1 = rule.Rule(1, "V", False, -1) # Never cleaves before L, followed by V, except...
Y_L_0V1M1 = rule.Rule(-1, "Y", False, -1) # Never cleaves before L, followed by V, preceded by Y, except...
L_Y_L_0V1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before L, followed by V, preceded by Y, preceded by L, except...
A_L_Y_L_0V1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before L, followed by V, preceded by Y, preceded by L, preceded by A, except...
L_Y_L_0V1M1M2.rules.append(A_L_Y_L_0V1M1M2M3)
Y_L_0V1M1.rules.append(L_Y_L_0V1M1M2)
L_0V1.rules.append(Y_L_0V1M1)
L_0V1V2 = rule.Rule(2, "V", True, -1) # Always cleaves before L, followed by V, followed by V, except...
L_0V1.rules.append(L_0V1V2)
L_0V1E2 = rule.Rule(2, "E", True, -1) # Always cleaves before L, followed by V, followed by E, except...
L_0V1.rules.append(L_0V1E2)
L_0V1S2 = rule.Rule(2, "S", True, -1) # Always cleaves before L, followed by V, followed by S, except...
L_0V1.rules.append(L_0V1S2)
L_0V1Q2 = rule.Rule(2, "Q", True, -1) # Always cleaves before L, followed by V, followed by Q, except...
L_0V1.rules.append(L_0V1Q2)
L_0.rules.append(L_0V1)
L_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before L, followed by V, except...
L_0V2R1 = rule.Rule(1, "R", False, -1) # Never cleaves before L, followed by V, followed by R, except...
A_L_0V2R1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before L, followed by V, followed by R, preceded by A, except...
L_A_L_0V2R1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before L, followed by V, followed by R, preceded by A, preceded by L, except...
A_L_A_L_0V2R1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before L, followed by V, followed by R, preceded by A, preceded by L, preceded by A, except...
L_A_L_0V2R1M1M2.rules.append(A_L_A_L_0V2R1M1M2M3)
A_L_0V2R1M1.rules.append(L_A_L_0V2R1M1M2)
L_0V2R1.rules.append(A_L_0V2R1M1)
G_L_0V2R1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before L, followed by V, followed by R, preceded by G, except...
E_G_L_0V2R1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before L, followed by V, followed by R, preceded by G, preceded by E, except...
P_E_G_L_0V2R1M1M2M3 = rule.Rule(-3, "P", True, -1) # Always cleaves before L, followed by V, followed by R, preceded by G, preceded by E, preceded by P, except...
E_G_L_0V2R1M1M2.rules.append(P_E_G_L_0V2R1M1M2M3)
G_L_0V2R1M1.rules.append(E_G_L_0V2R1M1M2)
L_0V2R1.rules.append(G_L_0V2R1M1)
L_0V2.rules.append(L_0V2R1)
L_0V2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before L, followed by V, followed by K, except...
T_L_0V2K1M1 = rule.Rule(-1, "T", False, -1) # Never cleaves before L, followed by V, followed by K, preceded by T, except...
E_T_L_0V2K1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before L, followed by V, followed by K, preceded by T, preceded by E, except...
A_E_T_L_0V2K1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before L, followed by V, followed by K, preceded by T, preceded by E, preceded by A, except...
E_T_L_0V2K1M1M2.rules.append(A_E_T_L_0V2K1M1M2M3)
T_L_0V2K1M1.rules.append(E_T_L_0V2K1M1M2)
L_0V2K1.rules.append(T_L_0V2K1M1)
L_0V2.rules.append(L_0V2K1)
L_0V2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before L, followed by V, followed by G, except...
G_L_0V2G1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before L, followed by V, followed by G, preceded by G, except...
A_G_L_0V2G1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before L, followed by V, followed by G, preceded by G, preceded by A, except...
G_A_G_L_0V2G1M1M2M3 = rule.Rule(-3, "G", True, -1) # Always cleaves before L, followed by V, followed by G, preceded by G, preceded by A, preceded by G, except...
A_G_L_0V2G1M1M2.rules.append(G_A_G_L_0V2G1M1M2M3)
G_L_0V2G1M1.rules.append(A_G_L_0V2G1M1M2)
L_0V2G1.rules.append(G_L_0V2G1M1)
L_0V2.rules.append(L_0V2G1)
L_0V2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before L, followed by V, followed by N, except...
A_L_0V2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before L, followed by V, followed by N, preceded by A, except...
D_A_L_0V2N1M1M2 = rule.Rule(-2, "D", False, -1) # Never cleaves before L, followed by V, followed by N, preceded by A, preceded by D, except...
P_D_A_L_0V2N1M1M2M3 = rule.Rule(-3, "P", True, -1) # Always cleaves before L, followed by V, followed by N, preceded by A, preceded by D, preceded by P, except...
D_A_L_0V2N1M1M2.rules.append(P_D_A_L_0V2N1M1M2M3)
A_L_0V2N1M1.rules.append(D_A_L_0V2N1M1M2)
L_0V2N1.rules.append(A_L_0V2N1M1)
L_0V2.rules.append(L_0V2N1)
L_0.rules.append(L_0V2)
L_0M2 = rule.Rule(2, "M", False, -1) # Never cleaves before L, followed by M, except...
L_0M2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before L, followed by M, followed by A, except...
A_L_0M2A1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before L, followed by M, followed by A, preceded by A, except...
Q_A_L_0M2A1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before L, followed by M, followed by A, preceded by A, preceded by Q, except...
P_Q_A_L_0M2A1M1M2M3 = rule.Rule(-3, "P", True, -1) # Always cleaves before L, followed by M, followed by A, preceded by A, preceded by Q, preceded by P, except...
Q_A_L_0M2A1M1M2.rules.append(P_Q_A_L_0M2A1M1M2M3)
A_L_0M2A1M1.rules.append(Q_A_L_0M2A1M1M2)
L_0M2A1.rules.append(A_L_0M2A1M1)
L_0M2.rules.append(L_0M2A1)
L_0.rules.append(L_0M2)
L_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before L, followed by A, except...
L_0A2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before L, followed by A, followed by E, except...
F_L_0A2E1M1 = rule.Rule(-1, "F", False, -1) # Never cleaves before L, followed by A, followed by E, preceded by F, except...
M_F_L_0A2E1M1M2 = rule.Rule(-2, "M", False, -1) # Never cleaves before L, followed by A, followed by E, preceded by F, preceded by M, except...
A_M_F_L_0A2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before L, followed by A, followed by E, preceded by F, preceded by M, preceded by A, except...
M_F_L_0A2E1M1M2.rules.append(A_M_F_L_0A2E1M1M2M3)
F_L_0A2E1M1.rules.append(M_F_L_0A2E1M1M2)
L_0A2E1.rules.append(F_L_0A2E1M1)
L_0A2.rules.append(L_0A2E1)
L_0A2W1 = rule.Rule(1, "W", False, -1) # Never cleaves before L, followed by A, followed by W, except...
A_L_0A2W1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before L, followed by A, followed by W, preceded by A, except...
L_A_L_0A2W1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before L, followed by A, followed by W, preceded by A, preceded by L, except...
P_L_A_L_0A2W1M1M2M3 = rule.Rule(-3, "P", True, -1) # Always cleaves before L, followed by A, followed by W, preceded by A, preceded by L, preceded by P, except...
L_A_L_0A2W1M1M2.rules.append(P_L_A_L_0A2W1M1M2M3)
A_L_0A2W1M1.rules.append(L_A_L_0A2W1M1M2)
L_0A2W1.rules.append(A_L_0A2W1M1)
L_0A2.rules.append(L_0A2W1)
L_0.rules.append(L_0A2)
L_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before L, followed by S, except...
L_0S2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before L, followed by S, followed by E, except...
F_L_0S2E1M1 = rule.Rule(-1, "F", False, -1) # Never cleaves before L, followed by S, followed by E, preceded by F, except...
A_F_L_0S2E1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before L, followed by S, followed by E, preceded by F, preceded by A, except...
D_A_F_L_0S2E1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before L, followed by S, followed by E, preceded by F, preceded by A, preceded by D, except...
A_F_L_0S2E1M1M2.rules.append(D_A_F_L_0S2E1M1M2M3)
F_L_0S2E1M1.rules.append(A_F_L_0S2E1M1M2)
L_0S2E1.rules.append(F_L_0S2E1M1)
L_0S2.rules.append(L_0S2E1)
L_0.rules.append(L_0S2)
L_0K2 = rule.Rule(2, "K", False, -1) # Never cleaves before L, followed by K, except...
L_0K2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before L, followed by K, followed by S, except...
G_L_0K2S1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before L, followed by K, followed by S, preceded by G, except...
K_G_L_0K2S1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before L, followed by K, followed by S, preceded by G, preceded by K, except...
M_K_G_L_0K2S1M1M2M3 = rule.Rule(-3, "M", True, -1) # Always cleaves before L, followed by K, followed by S, preceded by G, preceded by K, preceded by M, except...
K_G_L_0K2S1M1M2.rules.append(M_K_G_L_0K2S1M1M2M3)
G_L_0K2S1M1.rules.append(K_G_L_0K2S1M1M2)
L_0K2S1.rules.append(G_L_0K2S1M1)
L_0K2.rules.append(L_0K2S1)
L_0.rules.append(L_0K2)
L_0R2 = rule.Rule(2, "R", False, -1) # Never cleaves before L, followed by R, except...
L_0R2R1 = rule.Rule(1, "R", False, -1) # Never cleaves before L, followed by R, followed by R, except...
F_L_0R2R1M1 = rule.Rule(-1, "F", False, -1) # Never cleaves before L, followed by R, followed by R, preceded by F, except...
N_F_L_0R2R1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before L, followed by R, followed by R, preceded by F, preceded by N, except...
K_N_F_L_0R2R1M1M2M3 = rule.Rule(-3, "K", True, -1) # Always cleaves before L, followed by R, followed by R, preceded by F, preceded by N, preceded by K, except...
N_F_L_0R2R1M1M2.rules.append(K_N_F_L_0R2R1M1M2M3)
F_L_0R2R1M1.rules.append(N_F_L_0R2R1M1M2)
L_0R2R1.rules.append(F_L_0R2R1M1)
L_0R2.rules.append(L_0R2R1)
L_0.rules.append(L_0R2)
L_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before L, followed by G, except...
L_0G2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before L, followed by G, followed by L, except...
G_L_0G2L1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before L, followed by G, followed by L, preceded by G, except...
Q_G_L_0G2L1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before L, followed by G, followed by L, preceded by G, preceded by Q, except...
P_Q_G_L_0G2L1M1M2M3 = rule.Rule(-3, "P", True, -1) # Always cleaves before L, followed by G, followed by L, preceded by G, preceded by Q, preceded by P, except...
Q_G_L_0G2L1M1M2.rules.append(P_Q_G_L_0G2L1M1M2M3)
G_L_0G2L1M1.rules.append(Q_G_L_0G2L1M1M2)
L_0G2L1.rules.append(G_L_0G2L1M1)
L_0G2.rules.append(L_0G2L1)
L_0G2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before L, followed by G, followed by A, except...
G_L_0G2A1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before L, followed by G, followed by A, preceded by G, except...
Q_G_L_0G2A1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before L, followed by G, followed by A, preceded by G, preceded by Q, except...
P_Q_G_L_0G2A1M1M2M3 = rule.Rule(-3, "P", True, -1) # Always cleaves before L, followed by G, followed by A, preceded by G, preceded by Q, preceded by P, except...
Q_G_L_0G2A1M1M2.rules.append(P_Q_G_L_0G2A1M1M2M3)
G_L_0G2A1M1.rules.append(Q_G_L_0G2A1M1M2)
L_0G2A1.rules.append(G_L_0G2A1M1)
L_0G2.rules.append(L_0G2A1)
L_0.rules.append(L_0G2)
L_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before L, followed by P, except...
L_0P2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before L, followed by P, followed by L, except...
Y_L_0P2L1M1 = rule.Rule(-1, "Y", False, -1) # Never cleaves before L, followed by P, followed by L, preceded by Y, except...
A_Y_L_0P2L1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before L, followed by P, followed by L, preceded by Y, preceded by A, except...
R_A_Y_L_0P2L1M1M2M3 = rule.Rule(-3, "R", True, -1) # Always cleaves before L, followed by P, followed by L, preceded by Y, preceded by A, preceded by R, except...
A_Y_L_0P2L1M1M2.rules.append(R_A_Y_L_0P2L1M1M2M3)
Y_L_0P2L1M1.rules.append(A_Y_L_0P2L1M1M2)
L_0P2L1.rules.append(Y_L_0P2L1M1)
L_0P2.rules.append(L_0P2L1)
L_0.rules.append(L_0P2)
L_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before L, followed by E, except...
L_0E2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before L, followed by E, followed by T, except...
V_L_0E2T1M1 = rule.Rule(-1, "V", False, -1) # Never cleaves before L, followed by E, followed by T, preceded by V, except...
F_V_L_0E2T1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before L, followed by E, followed by T, preceded by V, preceded by F, except...
Q_F_V_L_0E2T1M1M2M3 = rule.Rule(-3, "Q", True, -1) # Always cleaves before L, followed by E, followed by T, preceded by V, preceded by F, preceded by Q, except...
F_V_L_0E2T1M1M2.rules.append(Q_F_V_L_0E2T1M1M2M3)
V_L_0E2T1M1.rules.append(F_V_L_0E2T1M1M2)
L_0E2T1.rules.append(V_L_0E2T1M1)
L_0E2.rules.append(L_0E2T1)
L_0.rules.append(L_0E2)
L_0H2 = rule.Rule(2, "H", False, -1) # Never cleaves before L, followed by H, except...
L_0H2M1 = rule.Rule(1, "M", False, -1) # Never cleaves before L, followed by H, followed by M, except...
K_L_0H2M1M1 = rule.Rule(-1, "K", False, -1) # Never cleaves before L, followed by H, followed by M, preceded by K, except...
L_K_L_0H2M1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before L, followed by H, followed by M, preceded by K, preceded by L, except...
P_L_K_L_0H2M1M1M2M3 = rule.Rule(-3, "P", True, -1) # Always cleaves before L, followed by H, followed by M, preceded by K, preceded by L, preceded by P, except...
L_K_L_0H2M1M1M2.rules.append(P_L_K_L_0H2M1M1M2M3)
K_L_0H2M1M1.rules.append(L_K_L_0H2M1M1M2)
L_0H2M1.rules.append(K_L_0H2M1M1)
L_0H2.rules.append(L_0H2M1)
L_0.rules.append(L_0H2)
ENZ.append(L_0)

F_0 = rule.Rule(0, "F", False, 0) # Never cleaves before F, except...
F_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before F, followed by G, except...
F_0G2F1 = rule.Rule(1, "F", False, -1) # Never cleaves before F, followed by G, followed by F, except...
N_F_0G2F1M1 = rule.Rule(-1, "N", False, -1) # Never cleaves before F, followed by G, followed by F, preceded by N, except...
E_N_F_0G2F1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before F, followed by G, followed by F, preceded by N, preceded by E, except...
P_E_N_F_0G2F1M1M2M3 = rule.Rule(-3, "P", True, -1) # Always cleaves before F, followed by G, followed by F, preceded by N, preceded by E, preceded by P, except...
E_N_F_0G2F1M1M2.rules.append(P_E_N_F_0G2F1M1M2M3)
N_F_0G2F1M1.rules.append(E_N_F_0G2F1M1M2)
F_0G2F1.rules.append(N_F_0G2F1M1)
F_0G2.rules.append(F_0G2F1)
F_0.rules.append(F_0G2)
F_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before F, followed by E, except...
F_0E2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before F, followed by E, followed by S, except...
A_F_0E2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before F, followed by E, followed by S, preceded by A, except...
S_A_F_0E2S1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before F, followed by E, followed by S, preceded by A, preceded by S, except...
P_S_A_F_0E2S1M1M2M3 = rule.Rule(-3, "P", True, -1) # Always cleaves before F, followed by E, followed by S, preceded by A, preceded by S, preceded by P, except...
S_A_F_0E2S1M1M2.rules.append(P_S_A_F_0E2S1M1M2M3)
A_F_0E2S1M1.rules.append(S_A_F_0E2S1M1M2)
F_0E2S1.rules.append(A_F_0E2S1M1)
F_0E2.rules.append(F_0E2S1)
F_0.rules.append(F_0E2)
F_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before F, followed by L, except...
F_0L2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before F, followed by L, followed by V, except...
Q_F_0L2V1M1 = rule.Rule(-1, "Q", False, -1) # Never cleaves before F, followed by L, followed by V, preceded by Q, except...
A_Q_F_0L2V1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before F, followed by L, followed by V, preceded by Q, preceded by A, except...
V_A_Q_F_0L2V1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before F, followed by L, followed by V, preceded by Q, preceded by A, preceded by V, except...
A_Q_F_0L2V1M1M2.rules.append(V_A_Q_F_0L2V1M1M2M3)
Q_F_0L2V1M1.rules.append(A_Q_F_0L2V1M1M2)
F_0L2V1.rules.append(Q_F_0L2V1M1)
F_0L2.rules.append(F_0L2V1)
F_0.rules.append(F_0L2)
F_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before F, followed by T, except...
F_0T2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before F, followed by T, followed by Q, except...
R_F_0T2Q1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before F, followed by T, followed by Q, preceded by R, except...
G_R_F_0T2Q1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before F, followed by T, followed by Q, preceded by R, preceded by G, except...
L_G_R_F_0T2Q1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before F, followed by T, followed by Q, preceded by R, preceded by G, preceded by L, except...
G_R_F_0T2Q1M1M2.rules.append(L_G_R_F_0T2Q1M1M2M3)
R_F_0T2Q1M1.rules.append(G_R_F_0T2Q1M1M2)
F_0T2Q1.rules.append(R_F_0T2Q1M1)
F_0T2.rules.append(F_0T2Q1)
F_0.rules.append(F_0T2)
ENZ.append(F_0)

V_0 = rule.Rule(0, "V", False, 0) # Never cleaves before V, except...
V_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before V, followed by A, except...
V_0A2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before V, followed by A, followed by V, except...
P_V_0A2V1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before V, followed by A, followed by V, preceded by P, except...
L_P_V_0A2V1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before V, followed by A, followed by V, preceded by P, preceded by L, except...
S_L_P_V_0A2V1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before V, followed by A, followed by V, preceded by P, preceded by L, preceded by S, except...
L_P_V_0A2V1M1M2.rules.append(S_L_P_V_0A2V1M1M2M3)
P_V_0A2V1M1.rules.append(L_P_V_0A2V1M1M2)
V_0A2V1.rules.append(P_V_0A2V1M1)
V_0A2.rules.append(V_0A2V1)
V_0A2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before V, followed by A, followed by I, except...
S_V_0A2I1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before V, followed by A, followed by I, preceded by S, except...
S_S_V_0A2I1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before V, followed by A, followed by I, preceded by S, preceded by S, except...
P_S_S_V_0A2I1M1M2M3 = rule.Rule(-3, "P", True, -1) # Always cleaves before V, followed by A, followed by I, preceded by S, preceded by S, preceded by P, except...
S_S_V_0A2I1M1M2.rules.append(P_S_S_V_0A2I1M1M2M3)
S_V_0A2I1M1.rules.append(S_S_V_0A2I1M1M2)
V_0A2I1.rules.append(S_V_0A2I1M1)
V_0A2.rules.append(V_0A2I1)
V_0.rules.append(V_0A2)
V_0H2 = rule.Rule(2, "H", False, -1) # Never cleaves before V, followed by H, except...
V_0H2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before V, followed by H, followed by V, except...
G_V_0H2V1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before V, followed by H, followed by V, preceded by G, except...
E_G_V_0H2V1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before V, followed by H, followed by V, preceded by G, preceded by E, except...
K_E_G_V_0H2V1M1M2M3 = rule.Rule(-3, "K", True, -1) # Always cleaves before V, followed by H, followed by V, preceded by G, preceded by E, preceded by K, except...
E_G_V_0H2V1M1M2.rules.append(K_E_G_V_0H2V1M1M2M3)
G_V_0H2V1M1.rules.append(E_G_V_0H2V1M1M2)
V_0H2V1.rules.append(G_V_0H2V1M1)
V_0H2.rules.append(V_0H2V1)
V_0.rules.append(V_0H2)
V_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before V, followed by G, except...
V_0G2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before V, followed by G, followed by T, except...
V_V_0G2T1M1 = rule.Rule(-1, "V", False, -1) # Never cleaves before V, followed by G, followed by T, preceded by V, except...
A_V_V_0G2T1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before V, followed by G, followed by T, preceded by V, preceded by A, except...
G_A_V_V_0G2T1M1M2M3 = rule.Rule(-3, "G", True, -1) # Always cleaves before V, followed by G, followed by T, preceded by V, preceded by A, preceded by G, except...
A_V_V_0G2T1M1M2.rules.append(G_A_V_V_0G2T1M1M2M3)
V_V_0G2T1M1.rules.append(A_V_V_0G2T1M1M2)
V_0G2T1.rules.append(V_V_0G2T1M1)
V_0G2.rules.append(V_0G2T1)
V_0.rules.append(V_0G2)
V_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before V, followed by T, except...
V_0T2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before V, followed by T, followed by L, except...
F_V_0T2L1M1 = rule.Rule(-1, "F", False, -1) # Never cleaves before V, followed by T, followed by L, preceded by F, except...
Q_F_V_0T2L1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before V, followed by T, followed by L, preceded by F, preceded by Q, except...
A_Q_F_V_0T2L1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before V, followed by T, followed by L, preceded by F, preceded by Q, preceded by A, except...
Q_F_V_0T2L1M1M2.rules.append(A_Q_F_V_0T2L1M1M2M3)
F_V_0T2L1M1.rules.append(Q_F_V_0T2L1M1M2)
V_0T2L1.rules.append(F_V_0T2L1M1)
V_0T2.rules.append(V_0T2L1)
V_0.rules.append(V_0T2)
V_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before V, followed by E, except...
V_0E2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before V, followed by E, followed by V, except...
G_V_0E2V1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before V, followed by E, followed by V, preceded by G, except...
L_G_V_0E2V1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before V, followed by E, followed by V, preceded by G, preceded by L, except...
G_L_G_V_0E2V1M1M2M3 = rule.Rule(-3, "G", True, -1) # Always cleaves before V, followed by E, followed by V, preceded by G, preceded by L, preceded by G, except...
L_G_V_0E2V1M1M2.rules.append(G_L_G_V_0E2V1M1M2M3)
G_V_0E2V1M1.rules.append(L_G_V_0E2V1M1M2)
V_0E2V1.rules.append(G_V_0E2V1M1)
V_0E2.rules.append(V_0E2V1)
V_0.rules.append(V_0E2)
ENZ.append(V_0)

M_0 = rule.Rule(0, "M", False, 0) # Never cleaves before M, except...
M_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before M, followed by A, except...
M_0A2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before M, followed by A, followed by S, except...
A_M_0A2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before M, followed by A, followed by S, preceded by A, except...
L_A_M_0A2S1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before M, followed by A, followed by S, preceded by A, preceded by L, except...
A_L_A_M_0A2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before M, followed by A, followed by S, preceded by A, preceded by L, preceded by A, except...
L_A_M_0A2S1M1M2.rules.append(A_L_A_M_0A2S1M1M2M3)
A_M_0A2S1M1.rules.append(L_A_M_0A2S1M1M2)
M_0A2S1.rules.append(A_M_0A2S1M1)
M_0A2.rules.append(M_0A2S1)
M_0.rules.append(M_0A2)
M_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before M, followed by I, except...
M_0I2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before M, followed by I, followed by S, except...
P_M_0I2S1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before M, followed by I, followed by S, preceded by P, except...
I_P_M_0I2S1M1M2 = rule.Rule(-2, "I", False, -1) # Never cleaves before M, followed by I, followed by S, preceded by P, preceded by I, except...
A_I_P_M_0I2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before M, followed by I, followed by S, preceded by P, preceded by I, preceded by A, except...
I_P_M_0I2S1M1M2.rules.append(A_I_P_M_0I2S1M1M2M3)
P_M_0I2S1M1.rules.append(I_P_M_0I2S1M1M2)
M_0I2S1.rules.append(P_M_0I2S1M1)
M_0I2.rules.append(M_0I2S1)
M_0.rules.append(M_0I2)
M_0Q2 = rule.Rule(2, "Q", False, -1) # Never cleaves before M, followed by Q, except...
M_0Q2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before M, followed by Q, followed by K, except...
V_M_0Q2K1M1 = rule.Rule(-1, "V", False, -1) # Never cleaves before M, followed by Q, followed by K, preceded by V, except...
K_V_M_0Q2K1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before M, followed by Q, followed by K, preceded by V, preceded by K, except...
L_K_V_M_0Q2K1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before M, followed by Q, followed by K, preceded by V, preceded by K, preceded by L, except...
K_V_M_0Q2K1M1M2.rules.append(L_K_V_M_0Q2K1M1M2M3)
V_M_0Q2K1M1.rules.append(K_V_M_0Q2K1M1M2)
M_0Q2K1.rules.append(V_M_0Q2K1M1)
M_0Q2.rules.append(M_0Q2K1)
M_0.rules.append(M_0Q2)
M_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before M, followed by T, except...
M_0T2R1 = rule.Rule(1, "R", False, -1) # Never cleaves before M, followed by T, followed by R, except...
A_M_0T2R1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before M, followed by T, followed by R, preceded by A, except...
K_A_M_0T2R1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before M, followed by T, followed by R, preceded by A, preceded by K, except...
L_K_A_M_0T2R1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before M, followed by T, followed by R, preceded by A, preceded by K, preceded by L, except...
K_A_M_0T2R1M1M2.rules.append(L_K_A_M_0T2R1M1M2M3)
A_M_0T2R1M1.rules.append(K_A_M_0T2R1M1M2)
M_0T2R1.rules.append(A_M_0T2R1M1)
M_0T2.rules.append(M_0T2R1)
M_0.rules.append(M_0T2)
M_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before M, followed by G, except...
M_0G2R1 = rule.Rule(1, "R", False, -1) # Never cleaves before M, followed by G, followed by R, except...
E_M_0G2R1M1 = rule.Rule(-1, "E", False, -1) # Never cleaves before M, followed by G, followed by R, preceded by E, except...
A_E_M_0G2R1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before M, followed by G, followed by R, preceded by E, preceded by A, except...
V_A_E_M_0G2R1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before M, followed by G, followed by R, preceded by E, preceded by A, preceded by V, except...
A_E_M_0G2R1M1M2.rules.append(V_A_E_M_0G2R1M1M2M3)
E_M_0G2R1M1.rules.append(A_E_M_0G2R1M1M2)
M_0G2R1.rules.append(E_M_0G2R1M1)
M_0G2.rules.append(M_0G2R1)
M_0.rules.append(M_0G2)
M_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before M, followed by E, except...
M_0E2R1 = rule.Rule(1, "R", False, -1) # Never cleaves before M, followed by E, followed by R, except...
D_M_0E2R1M1 = rule.Rule(-1, "D", False, -1) # Never cleaves before M, followed by E, followed by R, preceded by D, except...
S_D_M_0E2R1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before M, followed by E, followed by R, preceded by D, preceded by S, except...
Y_S_D_M_0E2R1M1M2M3 = rule.Rule(-3, "Y", True, -1) # Always cleaves before M, followed by E, followed by R, preceded by D, preceded by S, preceded by Y, except...
S_D_M_0E2R1M1M2.rules.append(Y_S_D_M_0E2R1M1M2M3)
D_M_0E2R1M1.rules.append(S_D_M_0E2R1M1M2)
M_0E2R1.rules.append(D_M_0E2R1M1)
M_0E2.rules.append(M_0E2R1)
M_0.rules.append(M_0E2)
ENZ.append(M_0)

A_0 = rule.Rule(0, "A", False, 0) # Never cleaves before A, except...
A_0K2 = rule.Rule(2, "K", False, -1) # Never cleaves before A, followed by K, except...
A_0K2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before A, followed by K, followed by E, except...
A_A_0K2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by K, followed by E, preceded by A, except...
A_A_A_0K2E1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before A, followed by K, followed by E, preceded by A, preceded by A, except...
V_A_A_A_0K2E1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by K, followed by E, preceded by A, preceded by A, preceded by V, except...
A_A_A_0K2E1M1M2.rules.append(V_A_A_A_0K2E1M1M2M3)
A_A_0K2E1M1.rules.append(A_A_A_0K2E1M1M2)
A_0K2E1.rules.append(A_A_0K2E1M1)
A_0K2.rules.append(A_0K2E1)
A_0.rules.append(A_0K2)
A_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before A, followed by G, except...
A_0G2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before A, followed by G, followed by T, except...
A_A_0G2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by G, followed by T, preceded by A, except...
A_A_A_0G2T1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before A, followed by G, followed by T, preceded by A, preceded by A, except...
I_A_A_A_0G2T1M1M2M3 = rule.Rule(-3, "I", True, -1) # Always cleaves before A, followed by G, followed by T, preceded by A, preceded by A, preceded by I, except...
A_A_A_0G2T1M1M2.rules.append(I_A_A_A_0G2T1M1M2M3)
A_A_0G2T1M1.rules.append(A_A_A_0G2T1M1M2)
A_0G2T1.rules.append(A_A_0G2T1M1)
A_0G2.rules.append(A_0G2T1)
A_0.rules.append(A_0G2)
A_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before A, followed by L, except...
A_0L2Y1 = rule.Rule(1, "Y", False, -1) # Never cleaves before A, followed by L, followed by Y, except...
R_A_0L2Y1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by L, followed by Y, preceded by R, except...
L_R_A_0L2Y1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by L, followed by Y, preceded by R, preceded by L, except...
R_L_R_A_0L2Y1M1M2M3 = rule.Rule(-3, "R", True, -1) # Always cleaves before A, followed by L, followed by Y, preceded by R, preceded by L, preceded by R, except...
L_R_A_0L2Y1M1M2.rules.append(R_L_R_A_0L2Y1M1M2M3)
R_A_0L2Y1M1.rules.append(L_R_A_0L2Y1M1M2)
A_0L2Y1.rules.append(R_A_0L2Y1M1)
A_0L2.rules.append(A_0L2Y1)
A_0.rules.append(A_0L2)
A_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before A, followed by E, except...
A_0E2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before A, followed by E, followed by K, except...
S_A_0E2K1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before A, followed by E, followed by K, preceded by S, except...
R_S_A_0E2K1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before A, followed by E, followed by K, preceded by S, preceded by R, except...
P_R_S_A_0E2K1M1M2M3 = rule.Rule(-3, "P", True, -1) # Always cleaves before A, followed by E, followed by K, preceded by S, preceded by R, preceded by P, except...
R_S_A_0E2K1M1M2.rules.append(P_R_S_A_0E2K1M1M2M3)
S_A_0E2K1M1.rules.append(R_S_A_0E2K1M1M2)
A_0E2K1.rules.append(S_A_0E2K1M1)
A_0E2.rules.append(A_0E2K1)
A_0.rules.append(A_0E2)
A_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before A, followed by N, except...
A_0N2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before A, followed by N, followed by I, except...
K_A_0N2I1M1 = rule.Rule(-1, "K", False, -1) # Never cleaves before A, followed by N, followed by I, preceded by K, except...
T_K_A_0N2I1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before A, followed by N, followed by I, preceded by K, preceded by T, except...
I_T_K_A_0N2I1M1M2M3 = rule.Rule(-3, "I", True, -1) # Always cleaves before A, followed by N, followed by I, preceded by K, preceded by T, preceded by I, except...
T_K_A_0N2I1M1M2.rules.append(I_T_K_A_0N2I1M1M2M3)
K_A_0N2I1M1.rules.append(T_K_A_0N2I1M1M2)
A_0N2I1.rules.append(K_A_0N2I1M1)
A_0N2.rules.append(A_0N2I1)
A_0N2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before A, followed by N, followed by L, except...
D_A_0N2L1M1 = rule.Rule(-1, "D", False, -1) # Never cleaves before A, followed by N, followed by L, preceded by D, except...
P_D_A_0N2L1M1M2 = rule.Rule(-2, "P", False, -1) # Never cleaves before A, followed by N, followed by L, preceded by D, preceded by P, except...
Q_P_D_A_0N2L1M1M2M3 = rule.Rule(-3, "Q", True, -1) # Always cleaves before A, followed by N, followed by L, preceded by D, preceded by P, preceded by Q, except...
P_D_A_0N2L1M1M2.rules.append(Q_P_D_A_0N2L1M1M2M3)
D_A_0N2L1M1.rules.append(P_D_A_0N2L1M1M2)
A_0N2L1.rules.append(D_A_0N2L1M1)
A_0N2.rules.append(A_0N2L1)
A_0.rules.append(A_0N2)
ENZ.append(A_0)

Q_0 = rule.Rule(0, "Q", False, 0) # Never cleaves before Q, except...
Q_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before Q, followed by T, except...
Q_0T2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before Q, followed by T, followed by K, except...
A_Q_0T2K1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by T, followed by K, preceded by A, except...
V_A_Q_0T2K1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before Q, followed by T, followed by K, preceded by A, preceded by V, except...
A_V_A_Q_0T2K1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by T, followed by K, preceded by A, preceded by V, preceded by A, except...
V_A_Q_0T2K1M1M2.rules.append(A_V_A_Q_0T2K1M1M2M3)
A_Q_0T2K1M1.rules.append(V_A_Q_0T2K1M1M2)
Q_0T2K1.rules.append(A_Q_0T2K1M1)
Q_0T2.rules.append(Q_0T2K1)
Q_0.rules.append(Q_0T2)
Q_0Y2 = rule.Rule(2, "Y", False, -1) # Never cleaves before Q, followed by Y, except...
Q_0Y2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before Q, followed by Y, followed by D, except...
Y_Q_0Y2D1M1 = rule.Rule(-1, "Y", False, -1) # Never cleaves before Q, followed by Y, followed by D, preceded by Y, except...
G_Y_Q_0Y2D1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before Q, followed by Y, followed by D, preceded by Y, preceded by G, except...
E_G_Y_Q_0Y2D1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before Q, followed by Y, followed by D, preceded by Y, preceded by G, preceded by E, except...
G_Y_Q_0Y2D1M1M2.rules.append(E_G_Y_Q_0Y2D1M1M2M3)
Y_Q_0Y2D1M1.rules.append(G_Y_Q_0Y2D1M1M2)
Q_0Y2D1.rules.append(Y_Q_0Y2D1M1)
Q_0Y2.rules.append(Q_0Y2D1)
Q_0.rules.append(Q_0Y2)
Q_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before Q, followed by A, except...
Q_0A2M1 = rule.Rule(1, "M", False, -1) # Never cleaves before Q, followed by A, followed by M, except...
L_Q_0A2M1M1 = rule.Rule(-1, "L", False, -1) # Never cleaves before Q, followed by A, followed by M, preceded by L, except...
S_L_Q_0A2M1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before Q, followed by A, followed by M, preceded by L, preceded by S, except...
P_S_L_Q_0A2M1M1M2M3 = rule.Rule(-3, "P", True, -1) # Always cleaves before Q, followed by A, followed by M, preceded by L, preceded by S, preceded by P, except...
S_L_Q_0A2M1M1M2.rules.append(P_S_L_Q_0A2M1M1M2M3)
L_Q_0A2M1M1.rules.append(S_L_Q_0A2M1M1M2)
Q_0A2M1.rules.append(L_Q_0A2M1M1)
Q_0A2.rules.append(Q_0A2M1)
Q_0.rules.append(Q_0A2)
ENZ.append(Q_0)

D_0 = rule.Rule(0, "D", False, 0) # Never cleaves before D, except...
D_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before D, followed by E, except...
D_0E2Y1 = rule.Rule(1, "Y", False, -1) # Never cleaves before D, followed by E, followed by Y, except...
Q_D_0E2Y1M1 = rule.Rule(-1, "Q", False, -1) # Never cleaves before D, followed by E, followed by Y, preceded by Q, except...
Y_Q_D_0E2Y1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before D, followed by E, followed by Y, preceded by Q, preceded by Y, except...
G_Y_Q_D_0E2Y1M1M2M3 = rule.Rule(-3, "G", True, -1) # Always cleaves before D, followed by E, followed by Y, preceded by Q, preceded by Y, preceded by G, except...
Y_Q_D_0E2Y1M1M2.rules.append(G_Y_Q_D_0E2Y1M1M2M3)
Q_D_0E2Y1M1.rules.append(Y_Q_D_0E2Y1M1M2)
D_0E2Y1.rules.append(Q_D_0E2Y1M1)
D_0E2.rules.append(D_0E2Y1)
D_0.rules.append(D_0E2)
D_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before D, followed by L, except...
D_0L2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before D, followed by L, followed by Q, except...
K_D_0L2Q1M1 = rule.Rule(-1, "K", False, -1) # Never cleaves before D, followed by L, followed by Q, preceded by K, except...
K_K_D_0L2Q1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by L, followed by Q, preceded by K, preceded by K, except...
V_K_K_D_0L2Q1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before D, followed by L, followed by Q, preceded by K, preceded by K, preceded by V, except...
K_K_D_0L2Q1M1M2.rules.append(V_K_K_D_0L2Q1M1M2M3)
K_D_0L2Q1M1.rules.append(K_K_D_0L2Q1M1M2)
D_0L2Q1.rules.append(K_D_0L2Q1M1)
D_0L2.rules.append(D_0L2Q1)
D_0.rules.append(D_0L2)
ENZ.append(D_0)

S_0 = rule.Rule(0, "S", False, 0) # Never cleaves before S, except...
S_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before S, followed by T, except...
S_0T2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before S, followed by T, followed by K, except...
G_S_0T2K1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before S, followed by T, followed by K, preceded by G, except...
V_G_S_0T2K1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before S, followed by T, followed by K, preceded by G, preceded by V, except...
Y_V_G_S_0T2K1M1M2M3 = rule.Rule(-3, "Y", True, -1) # Always cleaves before S, followed by T, followed by K, preceded by G, preceded by V, preceded by Y, except...
V_G_S_0T2K1M1M2.rules.append(Y_V_G_S_0T2K1M1M2M3)
G_S_0T2K1M1.rules.append(V_G_S_0T2K1M1M2)
S_0T2K1.rules.append(G_S_0T2K1M1)
S_0T2.rules.append(S_0T2K1)
S_0.rules.append(S_0T2)
S_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before S, followed by I, except...
S_0I2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before S, followed by I, followed by K, except...
H_S_0I2K1M1 = rule.Rule(-1, "H", False, -1) # Never cleaves before S, followed by I, followed by K, preceded by H, except...
L_H_S_0I2K1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before S, followed by I, followed by K, preceded by H, preceded by L, except...
P_L_H_S_0I2K1M1M2M3 = rule.Rule(-3, "P", True, -1) # Always cleaves before S, followed by I, followed by K, preceded by H, preceded by L, preceded by P, except...
L_H_S_0I2K1M1M2.rules.append(P_L_H_S_0I2K1M1M2M3)
H_S_0I2K1M1.rules.append(L_H_S_0I2K1M1M2)
S_0I2K1.rules.append(H_S_0I2K1M1)
S_0I2.rules.append(S_0I2K1)
S_0.rules.append(S_0I2)
S_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before S, followed by L, except...
S_0L2F1 = rule.Rule(1, "F", False, -1) # Never cleaves before S, followed by L, followed by F, except...
R_S_0L2F1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before S, followed by L, followed by F, preceded by R, except...
P_R_S_0L2F1M1M2 = rule.Rule(-2, "P", False, -1) # Never cleaves before S, followed by L, followed by F, preceded by R, preceded by P, except...
D_P_R_S_0L2F1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before S, followed by L, followed by F, preceded by R, preceded by P, preceded by D, except...
P_R_S_0L2F1M1M2.rules.append(D_P_R_S_0L2F1M1M2M3)
R_S_0L2F1M1.rules.append(P_R_S_0L2F1M1M2)
S_0L2F1.rules.append(R_S_0L2F1M1)
S_0L2.rules.append(S_0L2F1)
S_0.rules.append(S_0L2)
ENZ.append(S_0)

T_0 = rule.Rule(0, "T", False, 0) # Never cleaves before T, except...
T_0Q2 = rule.Rule(2, "Q", False, -1) # Never cleaves before T, followed by Q, except...
T_0Q2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before T, followed by Q, followed by K, except...
K_T_0Q2K1M1 = rule.Rule(-1, "K", False, -1) # Never cleaves before T, followed by Q, followed by K, preceded by K, except...
E_K_T_0Q2K1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before T, followed by Q, followed by K, preceded by K, preceded by E, except...
A_E_K_T_0Q2K1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before T, followed by Q, followed by K, preceded by K, preceded by E, preceded by A, except...
E_K_T_0Q2K1M1M2.rules.append(A_E_K_T_0Q2K1M1M2M3)
K_T_0Q2K1M1.rules.append(E_K_T_0Q2K1M1M2)
T_0Q2K1.rules.append(K_T_0Q2K1M1)
T_0Q2.rules.append(T_0Q2K1)
T_0.rules.append(T_0Q2)
T_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before T, followed by V, except...
T_0V2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before T, followed by V, followed by G, except...
V_T_0V2G1M1 = rule.Rule(-1, "V", False, -1) # Never cleaves before T, followed by V, followed by G, preceded by V, except...
V_V_T_0V2G1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before T, followed by V, followed by G, preceded by V, preceded by V, except...
A_V_V_T_0V2G1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before T, followed by V, followed by G, preceded by V, preceded by V, preceded by A, except...
V_V_T_0V2G1M1M2.rules.append(A_V_V_T_0V2G1M1M2M3)
V_T_0V2G1M1.rules.append(V_V_T_0V2G1M1M2)
T_0V2G1.rules.append(V_T_0V2G1M1)
T_0V2.rules.append(T_0V2G1)
T_0.rules.append(T_0V2)
ENZ.append(T_0)

I_0 = rule.Rule(0, "I", False, 0) # Never cleaves before I, except...
I_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before I, followed by A, except...
I_0A2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before I, followed by A, followed by N, except...
A_I_0A2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before I, followed by A, followed by N, preceded by A, except...
D_A_I_0A2N1M1M2 = rule.Rule(-2, "D", False, -1) # Never cleaves before I, followed by A, followed by N, preceded by A, preceded by D, except...
P_D_A_I_0A2N1M1M2M3 = rule.Rule(-3, "P", True, -1) # Always cleaves before I, followed by A, followed by N, preceded by A, preceded by D, preceded by P, except...
D_A_I_0A2N1M1M2.rules.append(P_D_A_I_0A2N1M1M2M3)
A_I_0A2N1M1.rules.append(D_A_I_0A2N1M1M2)
I_0A2N1.rules.append(A_I_0A2N1M1)
I_0A2.rules.append(I_0A2N1)
I_0A2R1 = rule.Rule(1, "R", False, -1) # Never cleaves before I, followed by A, followed by R, except...
M_I_0A2R1M1 = rule.Rule(-1, "M", False, -1) # Never cleaves before I, followed by A, followed by R, preceded by M, except...
T_M_I_0A2R1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before I, followed by A, followed by R, preceded by M, preceded by T, except...
P_T_M_I_0A2R1M1M2M3 = rule.Rule(-3, "P", True, -1) # Always cleaves before I, followed by A, followed by R, preceded by M, preceded by T, preceded by P, except...
T_M_I_0A2R1M1M2.rules.append(P_T_M_I_0A2R1M1M2M3)
M_I_0A2R1M1.rules.append(T_M_I_0A2R1M1M2)
I_0A2R1.rules.append(M_I_0A2R1M1)
I_0A2.rules.append(I_0A2R1)
I_0A2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before I, followed by A, followed by Q, except...
H_I_0A2Q1M1 = rule.Rule(-1, "H", False, -1) # Never cleaves before I, followed by A, followed by Q, preceded by H, except...
I_H_I_0A2Q1M1M2 = rule.Rule(-2, "I", False, -1) # Never cleaves before I, followed by A, followed by Q, preceded by H, preceded by I, except...
A_I_H_I_0A2Q1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before I, followed by A, followed by Q, preceded by H, preceded by I, preceded by A, except...
I_H_I_0A2Q1M1M2.rules.append(A_I_H_I_0A2Q1M1M2M3)
H_I_0A2Q1M1.rules.append(I_H_I_0A2Q1M1M2)
I_0A2Q1.rules.append(H_I_0A2Q1M1)
I_0A2.rules.append(I_0A2Q1)
I_0.rules.append(I_0A2)
I_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before I, followed by T, except...
I_0T2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before I, followed by T, followed by N, except...
G_I_0T2N1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before I, followed by T, followed by N, preceded by G, except...
V_G_I_0T2N1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before I, followed by T, followed by N, preceded by G, preceded by V, except...
P_V_G_I_0T2N1M1M2M3 = rule.Rule(-3, "P", True, -1) # Always cleaves before I, followed by T, followed by N, preceded by G, preceded by V, preceded by P, except...
V_G_I_0T2N1M1M2.rules.append(P_V_G_I_0T2N1M1M2M3)
G_I_0T2N1M1.rules.append(V_G_I_0T2N1M1M2)
I_0T2N1.rules.append(G_I_0T2N1M1)
I_0T2.rules.append(I_0T2N1)
I_0.rules.append(I_0T2)
I_0Q2 = rule.Rule(2, "Q", False, -1) # Never cleaves before I, followed by Q, except...
I_0Q2M1 = rule.Rule(1, "M", False, -1) # Never cleaves before I, followed by Q, followed by M, except...
L_I_0Q2M1M1 = rule.Rule(-1, "L", False, -1) # Never cleaves before I, followed by Q, followed by M, preceded by L, except...
R_L_I_0Q2M1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before I, followed by Q, followed by M, preceded by L, preceded by R, except...
A_R_L_I_0Q2M1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before I, followed by Q, followed by M, preceded by L, preceded by R, preceded by A, except...
R_L_I_0Q2M1M1M2.rules.append(A_R_L_I_0Q2M1M1M2M3)
L_I_0Q2M1M1.rules.append(R_L_I_0Q2M1M1M2)
I_0Q2M1.rules.append(L_I_0Q2M1M1)
I_0Q2.rules.append(I_0Q2M1)
I_0.rules.append(I_0Q2)
I_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before I, followed by G, except...
I_0G2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before I, followed by G, followed by A, except...
G_I_0G2A1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before I, followed by G, followed by A, preceded by G, except...
Q_G_I_0G2A1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before I, followed by G, followed by A, preceded by G, preceded by Q, except...
P_Q_G_I_0G2A1M1M2M3 = rule.Rule(-3, "P", True, -1) # Always cleaves before I, followed by G, followed by A, preceded by G, preceded by Q, preceded by P, except...
Q_G_I_0G2A1M1M2.rules.append(P_Q_G_I_0G2A1M1M2M3)
G_I_0G2A1M1.rules.append(Q_G_I_0G2A1M1M2)
L_G_I_0G2A1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before I, followed by G, followed by A, preceded by G, preceded by L, except...
P_L_G_I_0G2A1M1M2M3 = rule.Rule(-3, "P", True, -1) # Always cleaves before I, followed by G, followed by A, preceded by G, preceded by L, preceded by P, except...
L_G_I_0G2A1M1M2.rules.append(P_L_G_I_0G2A1M1M2M3)
G_I_0G2A1M1.rules.append(L_G_I_0G2A1M1M2)
I_0G2A1.rules.append(G_I_0G2A1M1)
I_0G2.rules.append(I_0G2A1)
I_0G2Y1 = rule.Rule(1, "Y", False, -1) # Never cleaves before I, followed by G, followed by Y, except...
A_I_0G2Y1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before I, followed by G, followed by Y, preceded by A, except...
Q_A_I_0G2Y1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before I, followed by G, followed by Y, preceded by A, preceded by Q, except...
I_Q_A_I_0G2Y1M1M2M3 = rule.Rule(-3, "I", True, -1) # Always cleaves before I, followed by G, followed by Y, preceded by A, preceded by Q, preceded by I, except...
Q_A_I_0G2Y1M1M2.rules.append(I_Q_A_I_0G2Y1M1M2M3)
A_I_0G2Y1M1.rules.append(Q_A_I_0G2Y1M1M2)
I_0G2Y1.rules.append(A_I_0G2Y1M1)
I_0G2.rules.append(I_0G2Y1)
I_0.rules.append(I_0G2)
I_0D2 = rule.Rule(2, "D", False, -1) # Never cleaves before I, followed by D, except...
I_0D2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before I, followed by D, followed by L, except...
N_I_0D2L1M1 = rule.Rule(-1, "N", False, -1) # Never cleaves before I, followed by D, followed by L, preceded by N, except...
G_N_I_0D2L1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before I, followed by D, followed by L, preceded by N, preceded by G, except...
P_G_N_I_0D2L1M1M2M3 = rule.Rule(-3, "P", True, -1) # Always cleaves before I, followed by D, followed by L, preceded by N, preceded by G, preceded by P, except...
G_N_I_0D2L1M1M2.rules.append(P_G_N_I_0D2L1M1M2M3)
N_I_0D2L1M1.rules.append(G_N_I_0D2L1M1M2)
I_0D2L1.rules.append(N_I_0D2L1M1)
I_0D2.rules.append(I_0D2L1)
I_0.rules.append(I_0D2)
I_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before I, followed by P, except...
I_0P2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before I, followed by P, followed by G, except...
P_I_0P2G1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before I, followed by P, followed by G, preceded by P, except...
Q_P_I_0P2G1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before I, followed by P, followed by G, preceded by P, preceded by Q, except...
V_Q_P_I_0P2G1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before I, followed by P, followed by G, preceded by P, preceded by Q, preceded by V, except...
Q_P_I_0P2G1M1M2.rules.append(V_Q_P_I_0P2G1M1M2M3)
P_I_0P2G1M1.rules.append(Q_P_I_0P2G1M1M2)
I_0P2G1.rules.append(P_I_0P2G1M1)
I_0P2.rules.append(I_0P2G1)
I_0.rules.append(I_0P2)
I_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before I, followed by S, except...
I_0S2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before I, followed by S, followed by S, except...
G_I_0S2S1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before I, followed by S, followed by S, preceded by G, except...
L_G_I_0S2S1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before I, followed by S, followed by S, preceded by G, preceded by L, except...
G_L_G_I_0S2S1M1M2M3 = rule.Rule(-3, "G", True, -1) # Always cleaves before I, followed by S, followed by S, preceded by G, preceded by L, preceded by G, except...
L_G_I_0S2S1M1M2.rules.append(G_L_G_I_0S2S1M1M2M3)
G_I_0S2S1M1.rules.append(L_G_I_0S2S1M1M2)
I_0S2S1.rules.append(G_I_0S2S1M1)
I_0S2.rules.append(I_0S2S1)
I_0S2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before I, followed by S, followed by L, except...
A_I_0S2L1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before I, followed by S, followed by L, preceded by A, except...
E_A_I_0S2L1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before I, followed by S, followed by L, preceded by A, preceded by E, except...
P_E_A_I_0S2L1M1M2M3 = rule.Rule(-3, "P", True, -1) # Always cleaves before I, followed by S, followed by L, preceded by A, preceded by E, preceded by P, except...
E_A_I_0S2L1M1M2.rules.append(P_E_A_I_0S2L1M1M2M3)
A_I_0S2L1M1.rules.append(E_A_I_0S2L1M1M2)
I_0S2L1.rules.append(A_I_0S2L1M1)
I_0S2.rules.append(I_0S2L1)
I_0S2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before I, followed by S, followed by G, except...
Y_I_0S2G1M1 = rule.Rule(-1, "Y", False, -1) # Never cleaves before I, followed by S, followed by G, preceded by Y, except...
N_Y_I_0S2G1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before I, followed by S, followed by G, preceded by Y, preceded by N, except...
A_N_Y_I_0S2G1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before I, followed by S, followed by G, preceded by Y, preceded by N, preceded by A, except...
N_Y_I_0S2G1M1M2.rules.append(A_N_Y_I_0S2G1M1M2M3)
Y_I_0S2G1M1.rules.append(N_Y_I_0S2G1M1M2)
I_0S2G1.rules.append(Y_I_0S2G1M1)
I_0S2.rules.append(I_0S2G1)
I_0.rules.append(I_0S2)
I_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before I, followed by N, except...
I_0N2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before I, followed by N, followed by S, except...
V_I_0N2S1M1 = rule.Rule(-1, "V", False, -1) # Never cleaves before I, followed by N, followed by S, preceded by V, except...
E_V_I_0N2S1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before I, followed by N, followed by S, preceded by V, preceded by E, except...
A_E_V_I_0N2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before I, followed by N, followed by S, preceded by V, preceded by E, preceded by A, except...
E_V_I_0N2S1M1M2.rules.append(A_E_V_I_0N2S1M1M2M3)
V_I_0N2S1M1.rules.append(E_V_I_0N2S1M1M2)
I_0N2S1.rules.append(V_I_0N2S1M1)
I_0N2.rules.append(I_0N2S1)
I_0.rules.append(I_0N2)
ENZ.append(I_0)

E_0 = rule.Rule(0, "E", False, 0) # Never cleaves before E, except...
E_0R2 = rule.Rule(2, "R", False, -1) # Never cleaves before E, followed by R, except...
E_0R2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before E, followed by R, followed by L, except...
R_E_0R2L1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by R, followed by L, preceded by R, except...
L_R_E_0R2L1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before E, followed by R, followed by L, preceded by R, preceded by L, except...
V_L_R_E_0R2L1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before E, followed by R, followed by L, preceded by R, preceded by L, preceded by V, except...
L_R_E_0R2L1M1M2.rules.append(V_L_R_E_0R2L1M1M2M3)
R_E_0R2L1M1.rules.append(L_R_E_0R2L1M1M2)
E_0R2L1.rules.append(R_E_0R2L1M1)
E_0R2.rules.append(E_0R2L1)
E_0.rules.append(E_0R2)
ENZ.append(E_0)

P_0 = rule.Rule(0, "P", False, 0) # Never cleaves before P, except...
P_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before P, followed by G, except...
P_0G2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before P, followed by G, followed by P, except...
G_P_0G2P1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before P, followed by G, followed by P, preceded by G, except...
V_G_P_0G2P1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before P, followed by G, followed by P, preceded by G, preceded by V, except...
R_V_G_P_0G2P1M1M2M3 = rule.Rule(-3, "R", True, -1) # Always cleaves before P, followed by G, followed by P, preceded by G, preceded by V, preceded by R, except...
V_G_P_0G2P1M1M2.rules.append(R_V_G_P_0G2P1M1M2M3)
G_P_0G2P1M1.rules.append(V_G_P_0G2P1M1M2)
P_0G2P1.rules.append(G_P_0G2P1M1)
P_0G2.rules.append(P_0G2P1)
P_0.rules.append(P_0G2)
P_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before P, followed by T, except...
P_0T2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before P, followed by T, followed by S, except...
V_P_0T2S1M1 = rule.Rule(-1, "V", False, -1) # Never cleaves before P, followed by T, followed by S, preceded by V, except...
N_V_P_0T2S1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before P, followed by T, followed by S, preceded by V, preceded by N, except...
L_N_V_P_0T2S1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before P, followed by T, followed by S, preceded by V, preceded by N, preceded by L, except...
N_V_P_0T2S1M1M2.rules.append(L_N_V_P_0T2S1M1M2M3)
V_P_0T2S1M1.rules.append(N_V_P_0T2S1M1M2)
P_0T2S1.rules.append(V_P_0T2S1M1)
P_0T2.rules.append(P_0T2S1)
P_0.rules.append(P_0T2)
ENZ.append(P_0)

R_0 = rule.Rule(0, "R", False, 0) # Never cleaves before R, except...
R_0Y2 = rule.Rule(2, "Y", False, -1) # Never cleaves before R, followed by Y, except...
R_0Y2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before R, followed by Y, followed by A, except...
L_R_0Y2A1M1 = rule.Rule(-1, "L", False, -1) # Never cleaves before R, followed by Y, followed by A, preceded by L, except...
R_L_R_0Y2A1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before R, followed by Y, followed by A, preceded by L, preceded by R, except...
S_R_L_R_0Y2A1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before R, followed by Y, followed by A, preceded by L, preceded by R, preceded by S, except...
R_L_R_0Y2A1M1M2.rules.append(S_R_L_R_0Y2A1M1M2M3)
L_R_0Y2A1M1.rules.append(R_L_R_0Y2A1M1M2)
R_0Y2A1.rules.append(L_R_0Y2A1M1)
R_0Y2.rules.append(R_0Y2A1)
R_0.rules.append(R_0Y2)
ENZ.append(R_0)

H_0 = rule.Rule(0, "H", False, 0) # Never cleaves before H, except...
H_0K2 = rule.Rule(2, "K", False, -1) # Never cleaves before H, followed by K, except...
H_0K2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before H, followed by K, followed by S, except...
L_H_0K2S1M1 = rule.Rule(-1, "L", False, -1) # Never cleaves before H, followed by K, followed by S, preceded by L, except...
P_L_H_0K2S1M1M2 = rule.Rule(-2, "P", False, -1) # Never cleaves before H, followed by K, followed by S, preceded by L, preceded by P, except...
H_P_L_H_0K2S1M1M2M3 = rule.Rule(-3, "H", True, -1) # Always cleaves before H, followed by K, followed by S, preceded by L, preceded by P, preceded by H, except...
P_L_H_0K2S1M1M2.rules.append(H_P_L_H_0K2S1M1M2M3)
L_H_0K2S1M1.rules.append(P_L_H_0K2S1M1M2)
H_0K2S1.rules.append(L_H_0K2S1M1)
H_0K2.rules.append(H_0K2S1)
H_0.rules.append(H_0K2)
ENZ.append(H_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "matrix_metallopeptidase-1", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme ubiquitin-specific_peptidase
ENZ = []

K_0 = rule.Rule(0, "K", False, 0) # Never cleaves before K, except...
K_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before K, followed by I, except...
K_0I2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before K, followed by I, followed by T, except...
G_K_0I2T1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before K, followed by I, followed by T, preceded by G, except...
G_G_K_0I2T1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before K, followed by I, followed by T, preceded by G, preceded by G, except...
R_G_G_K_0I2T1M1M2M3 = rule.Rule(-3, "R", True, -1) # Always cleaves before K, followed by I, followed by T, preceded by G, preceded by G, preceded by R, except...
G_G_K_0I2T1M1M2.rules.append(R_G_G_K_0I2T1M1M2M3)
G_K_0I2T1M1.rules.append(G_G_K_0I2T1M1M2)
K_0I2T1.rules.append(G_K_0I2T1M1)
K_0I2.rules.append(K_0I2T1)
K_0.rules.append(K_0I2)
K_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before K, followed by S, except...
K_0S2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before K, followed by S, followed by E, except...
G_K_0S2E1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before K, followed by S, followed by E, preceded by G, except...
G_G_K_0S2E1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before K, followed by S, followed by E, preceded by G, preceded by G, except...
R_G_G_K_0S2E1M1M2M3 = rule.Rule(-3, "R", True, -1) # Always cleaves before K, followed by S, followed by E, preceded by G, preceded by G, preceded by R, except...
G_G_K_0S2E1M1M2.rules.append(R_G_G_K_0S2E1M1M2M3)
G_K_0S2E1M1.rules.append(G_G_K_0S2E1M1M2)
K_0S2E1.rules.append(G_K_0S2E1M1)
K_0S2.rules.append(K_0S2E1)
K_0.rules.append(K_0S2)
ENZ.append(K_0)

I_0 = rule.Rule(0, "I", False, 0) # Never cleaves before I, except...
I_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before I, followed by E, except...
I_0E2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before I, followed by E, followed by I, except...
G_I_0E2I1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before I, followed by E, followed by I, preceded by G, except...
G_G_I_0E2I1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before I, followed by E, followed by I, preceded by G, preceded by G, except...
R_G_G_I_0E2I1M1M2M3 = rule.Rule(-3, "R", True, -1) # Always cleaves before I, followed by E, followed by I, preceded by G, preceded by G, preceded by R, except...
G_G_I_0E2I1M1M2.rules.append(R_G_G_I_0E2I1M1M2M3)
G_I_0E2I1M1.rules.append(G_G_I_0E2I1M1M2)
I_0E2I1.rules.append(G_I_0E2I1M1)
I_0E2.rules.append(I_0E2I1)
I_0.rules.append(I_0E2)
ENZ.append(I_0)

M_0 = rule.Rule(0, "M", False, 0) # Never cleaves before M, except...
M_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before M, followed by I, except...
M_0I2H1 = rule.Rule(1, "H", False, -1) # Never cleaves before M, followed by I, followed by H, except...
G_M_0I2H1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before M, followed by I, followed by H, preceded by G, except...
G_G_M_0I2H1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before M, followed by I, followed by H, preceded by G, preceded by G, except...
R_G_G_M_0I2H1M1M2M3 = rule.Rule(-3, "R", True, -1) # Always cleaves before M, followed by I, followed by H, preceded by G, preceded by G, preceded by R, except...
G_G_M_0I2H1M1M2.rules.append(R_G_G_M_0I2H1M1M2M3)
G_M_0I2H1M1.rules.append(G_G_M_0I2H1M1M2)
M_0I2H1.rules.append(G_M_0I2H1M1)
M_0I2.rules.append(M_0I2H1)
M_0.rules.append(M_0I2)
ENZ.append(M_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "ubiquitin-specific_peptidase", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme Xaa-Pro_dipeptidyl-peptidase
ENZ = []

I_0 = rule.Rule(0, "I", False, 0) # Never cleaves before I, except...
P_I_0M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before I, preceded by P, except...
G_P_I_0M1M2 = rule.Rule(-2, "G", True, -1) # Always cleaves before I, preceded by P, preceded by G, except...
P_I_0M1.rules.append(G_P_I_0M1M2)
I_0.rules.append(P_I_0M1)
ENZ.append(I_0)

G_0 = rule.Rule(0, "G", False, 0) # Never cleaves before G, except...
G_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before G, followed by I, except...
G_0I2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before G, followed by I, followed by P, except...
P_G_0I2P1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before G, followed by I, followed by P, preceded by P, except...
F_P_G_0I2P1M1M2 = rule.Rule(-2, "F", True, -1) # Always cleaves before G, followed by I, followed by P, preceded by P, preceded by F, except...
P_G_0I2P1M1.rules.append(F_P_G_0I2P1M1M2)
G_0I2P1.rules.append(P_G_0I2P1M1)
G_0I2.rules.append(G_0I2P1)
G_0.rules.append(G_0I2)
ENZ.append(G_0)

F_0 = rule.Rule(0, "F", False, 0) # Never cleaves before F, except...
F_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before F, followed by G, except...
F_0G2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before F, followed by G, followed by P, except...
P_F_0G2P1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before F, followed by G, followed by P, preceded by P, except...
Y_P_F_0G2P1M1M2 = rule.Rule(-2, "Y", True, -1) # Always cleaves before F, followed by G, followed by P, preceded by P, preceded by Y, except...
P_F_0G2P1M1.rules.append(Y_P_F_0G2P1M1M2)
F_0G2P1.rules.append(P_F_0G2P1M1)
F_0G2.rules.append(F_0G2P1)
F_0.rules.append(F_0G2)
ENZ.append(F_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "Xaa-Pro_dipeptidyl-peptidase", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme gamma-glutamyltransferase_1
ENZ = []

T_0 = rule.Rule(0, "T", False, 0) # Never cleaves before T, except...
T_0H2 = rule.Rule(2, "H", False, -1) # Never cleaves before T, followed by H, except...
T_0H2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before T, followed by H, followed by T, except...
Q_T_0H2T1M1 = rule.Rule(-1, "Q", False, -1) # Never cleaves before T, followed by H, followed by T, preceded by Q, except...
N_Q_T_0H2T1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before T, followed by H, followed by T, preceded by Q, preceded by N, except...
S_N_Q_T_0H2T1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before T, followed by H, followed by T, preceded by Q, preceded by N, preceded by S, except...
N_Q_T_0H2T1M1M2.rules.append(S_N_Q_T_0H2T1M1M2M3)
Q_T_0H2T1M1.rules.append(N_Q_T_0H2T1M1M2)
T_0H2T1.rules.append(Q_T_0H2T1M1)
N_T_0H2T1M1 = rule.Rule(-1, "N", False, -1) # Never cleaves before T, followed by H, followed by T, preceded by N, except...
S_N_T_0H2T1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before T, followed by H, followed by T, preceded by N, preceded by S, except...
G_S_N_T_0H2T1M1M2M3 = rule.Rule(-3, "G", True, -1) # Always cleaves before T, followed by H, followed by T, preceded by N, preceded by S, preceded by G, except...
S_N_T_0H2T1M1M2.rules.append(G_S_N_T_0H2T1M1M2M3)
N_T_0H2T1M1.rules.append(S_N_T_0H2T1M1M2)
T_0H2T1.rules.append(N_T_0H2T1M1)
T_0H2.rules.append(T_0H2T1)
T_0H2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before T, followed by H, followed by S, except...
S_T_0H2S1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before T, followed by H, followed by S, preceded by S, except...
P_S_T_0H2S1M1M2 = rule.Rule(-2, "P", False, -1) # Never cleaves before T, followed by H, followed by S, preceded by S, preceded by P, except...
L_P_S_T_0H2S1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before T, followed by H, followed by S, preceded by S, preceded by P, preceded by L, except...
P_S_T_0H2S1M1M2.rules.append(L_P_S_T_0H2S1M1M2M3)
S_T_0H2S1M1.rules.append(P_S_T_0H2S1M1M2)
T_0H2S1.rules.append(S_T_0H2S1M1)
T_0H2.rules.append(T_0H2S1)
T_0.rules.append(T_0H2)
ENZ.append(T_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "gamma-glutamyltransferase_1", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme signal_peptidase-I
ENZ = []

K_0 = rule.Rule(0, "K", False, 0) # Never cleaves before K, except...
K_0I1 = rule.Rule(1, "I", False, -1) # Never cleaves before K, followed by I, except...
A_K_0I1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before K, followed by I, preceded by A, except...
L_A_K_0I1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before K, followed by I, preceded by A, preceded by L, except...
A_L_A_K_0I1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before K, followed by I, preceded by A, preceded by L, preceded by A, except...
L_A_K_0I1M1M2.rules.append(A_L_A_K_0I1M1M2M3)
A_K_0I1M1.rules.append(L_A_K_0I1M1M2)
K_0I1.rules.append(A_K_0I1M1)
K_0I1K2 = rule.Rule(2, "K", True, -1) # Always cleaves before K, followed by I, followed by K, except...
K_0I1.rules.append(K_0I1K2)
K_0I1E2 = rule.Rule(2, "E", True, -1) # Always cleaves before K, followed by I, followed by E, except...
K_0I1.rules.append(K_0I1E2)
K_0.rules.append(K_0I1)
K_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before K, followed by V, except...
K_0V2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before K, followed by V, followed by T, except...
G_K_0V2T1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before K, followed by V, followed by T, preceded by G, except...
G_G_K_0V2T1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before K, followed by V, followed by T, preceded by G, preceded by G, except...
I_G_G_K_0V2T1M1M2M3 = rule.Rule(-3, "I", True, -1) # Always cleaves before K, followed by V, followed by T, preceded by G, preceded by G, preceded by I, except...
G_G_K_0V2T1M1M2.rules.append(I_G_G_K_0V2T1M1M2M3)
G_K_0V2T1M1.rules.append(G_G_K_0V2T1M1M2)
K_0V2T1.rules.append(G_K_0V2T1M1)
K_0V2.rules.append(K_0V2T1)
K_0V2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before K, followed by V, followed by E, except...
A_K_0V2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before K, followed by V, followed by E, preceded by A, except...
H_A_K_0V2E1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before K, followed by V, followed by E, preceded by A, preceded by H, except...
A_H_A_K_0V2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before K, followed by V, followed by E, preceded by A, preceded by H, preceded by A, except...
H_A_K_0V2E1M1M2.rules.append(A_H_A_K_0V2E1M1M2M3)
A_K_0V2E1M1.rules.append(H_A_K_0V2E1M1M2)
K_0V2E1.rules.append(A_K_0V2E1M1)
K_0V2.rules.append(K_0V2E1)
K_0.rules.append(K_0V2)
K_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before K, followed by T, except...
K_0T2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before K, followed by T, followed by D, except...
A_K_0T2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before K, followed by T, followed by D, preceded by A, except...
M_A_K_0T2D1M1M2 = rule.Rule(-2, "M", False, -1) # Never cleaves before K, followed by T, followed by D, preceded by A, preceded by M, except...
A_M_A_K_0T2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before K, followed by T, followed by D, preceded by A, preceded by M, preceded by A, except...
M_A_K_0T2D1M1M2.rules.append(A_M_A_K_0T2D1M1M2M3)
A_K_0T2D1M1.rules.append(M_A_K_0T2D1M1M2)
K_0T2D1.rules.append(A_K_0T2D1M1)
K_0T2.rules.append(K_0T2D1)
K_0T2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before K, followed by T, followed by V, except...
A_K_0T2V1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before K, followed by T, followed by V, preceded by A, except...
S_A_K_0T2V1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before K, followed by T, followed by V, preceded by A, preceded by S, except...
A_S_A_K_0T2V1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before K, followed by T, followed by V, preceded by A, preceded by S, preceded by A, except...
S_A_K_0T2V1M1M2.rules.append(A_S_A_K_0T2V1M1M2M3)
A_K_0T2V1M1.rules.append(S_A_K_0T2V1M1M2)
K_0T2V1.rules.append(A_K_0T2V1M1)
K_0T2.rules.append(K_0T2V1)
K_0.rules.append(K_0T2)
K_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before K, followed by P, except...
K_0P2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before K, followed by P, followed by T, except...
A_K_0P2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before K, followed by P, followed by T, preceded by A, except...
M_A_K_0P2T1M1M2 = rule.Rule(-2, "M", False, -1) # Never cleaves before K, followed by P, followed by T, preceded by A, preceded by M, except...
A_M_A_K_0P2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before K, followed by P, followed by T, preceded by A, preceded by M, preceded by A, except...
M_A_K_0P2T1M1M2.rules.append(A_M_A_K_0P2T1M1M2M3)
A_K_0P2T1M1.rules.append(M_A_K_0P2T1M1M2)
K_0P2T1.rules.append(A_K_0P2T1M1)
K_0P2.rules.append(K_0P2T1)
K_0.rules.append(K_0P2)
K_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before K, followed by A, except...
K_0A2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before K, followed by A, followed by T, except...
A_K_0A2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before K, followed by A, followed by T, preceded by A, except...
V_A_K_0A2T1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before K, followed by A, followed by T, preceded by A, preceded by V, except...
A_V_A_K_0A2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before K, followed by A, followed by T, preceded by A, preceded by V, preceded by A, except...
V_A_K_0A2T1M1M2.rules.append(A_V_A_K_0A2T1M1M2M3)
A_K_0A2T1M1.rules.append(V_A_K_0A2T1M1M2)
K_0A2T1.rules.append(A_K_0A2T1M1)
K_0A2.rules.append(K_0A2T1)
K_0A2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before K, followed by A, followed by D, except...
A_K_0A2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before K, followed by A, followed by D, preceded by A, except...
C_A_K_0A2D1M1M2 = rule.Rule(-2, "C", False, -1) # Never cleaves before K, followed by A, followed by D, preceded by A, preceded by C, except...
A_C_A_K_0A2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before K, followed by A, followed by D, preceded by A, preceded by C, preceded by A, except...
C_A_K_0A2D1M1M2.rules.append(A_C_A_K_0A2D1M1M2M3)
A_K_0A2D1M1.rules.append(C_A_K_0A2D1M1M2)
K_0A2D1.rules.append(A_K_0A2D1M1)
K_0A2.rules.append(K_0A2D1)
K_0.rules.append(K_0A2)
K_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before K, followed by L, except...
K_0L2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before K, followed by L, followed by T, except...
A_K_0L2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before K, followed by L, followed by T, preceded by A, except...
Q_A_K_0L2T1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before K, followed by L, followed by T, preceded by A, preceded by Q, except...
V_Q_A_K_0L2T1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before K, followed by L, followed by T, preceded by A, preceded by Q, preceded by V, except...
Q_A_K_0L2T1M1M2.rules.append(V_Q_A_K_0L2T1M1M2M3)
A_K_0L2T1M1.rules.append(Q_A_K_0L2T1M1M2)
K_0L2T1.rules.append(A_K_0L2T1M1)
K_0L2.rules.append(K_0L2T1)
K_0.rules.append(K_0L2)
K_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before K, followed by I, except...
K_0I2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before K, followed by I, followed by D, except...
A_K_0I2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before K, followed by I, followed by D, preceded by A, except...
L_A_K_0I2D1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before K, followed by I, followed by D, preceded by A, preceded by L, except...
I_L_A_K_0I2D1M1M2M3 = rule.Rule(-3, "I", True, -1) # Always cleaves before K, followed by I, followed by D, preceded by A, preceded by L, preceded by I, except...
L_A_K_0I2D1M1M2.rules.append(I_L_A_K_0I2D1M1M2M3)
A_K_0I2D1M1.rules.append(L_A_K_0I2D1M1M2)
M_A_K_0I2D1M1M2 = rule.Rule(-2, "M", False, -1) # Never cleaves before K, followed by I, followed by D, preceded by A, preceded by M, except...
V_M_A_K_0I2D1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before K, followed by I, followed by D, preceded by A, preceded by M, preceded by V, except...
M_A_K_0I2D1M1M2.rules.append(V_M_A_K_0I2D1M1M2M3)
A_K_0I2D1M1.rules.append(M_A_K_0I2D1M1M2)
K_0I2D1.rules.append(A_K_0I2D1M1)
K_0I2.rules.append(K_0I2D1)
K_0.rules.append(K_0I2)
K_0K2 = rule.Rule(2, "K", False, -1) # Never cleaves before K, followed by K, except...
K_0K2F1 = rule.Rule(1, "F", False, -1) # Never cleaves before K, followed by K, followed by F, except...
A_K_0K2F1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before K, followed by K, followed by F, preceded by A, except...
N_A_K_0K2F1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before K, followed by K, followed by F, preceded by A, preceded by N, except...
A_N_A_K_0K2F1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before K, followed by K, followed by F, preceded by A, preceded by N, preceded by A, except...
N_A_K_0K2F1M1M2.rules.append(A_N_A_K_0K2F1M1M2M3)
A_K_0K2F1M1.rules.append(N_A_K_0K2F1M1M2)
K_0K2F1.rules.append(A_K_0K2F1M1)
K_0K2.rules.append(K_0K2F1)
K_0.rules.append(K_0K2)
ENZ.append(K_0)

I_0 = rule.Rule(0, "I", False, 0) # Never cleaves before I, except...
I_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before I, followed by N, except...
I_0N2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before I, followed by N, followed by G, except...
S_I_0N2G1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before I, followed by N, followed by G, preceded by S, except...
F_S_I_0N2G1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before I, followed by N, followed by G, preceded by S, preceded by F, except...
S_F_S_I_0N2G1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before I, followed by N, followed by G, preceded by S, preceded by F, preceded by S, except...
F_S_I_0N2G1M1M2.rules.append(S_F_S_I_0N2G1M1M2M3)
S_I_0N2G1M1.rules.append(F_S_I_0N2G1M1M2)
I_0N2G1.rules.append(S_I_0N2G1M1)
I_0N2.rules.append(I_0N2G1)
I_0.rules.append(I_0N2)
ENZ.append(I_0)

Q_0 = rule.Rule(0, "Q", False, 0) # Never cleaves before Q, except...
Q_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before Q, followed by N, except...
Q_0N2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before Q, followed by N, followed by E, except...
A_Q_0N2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by N, followed by E, preceded by A, except...
F_A_Q_0N2E1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before Q, followed by N, followed by E, preceded by A, preceded by F, except...
A_F_A_Q_0N2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by N, followed by E, preceded by A, preceded by F, preceded by A, except...
F_A_Q_0N2E1M1M2.rules.append(A_F_A_Q_0N2E1M1M2M3)
A_Q_0N2E1M1.rules.append(F_A_Q_0N2E1M1M2)
S_A_Q_0N2E1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before Q, followed by N, followed by E, preceded by A, preceded by S, except...
A_S_A_Q_0N2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by N, followed by E, preceded by A, preceded by S, preceded by A, except...
S_A_Q_0N2E1M1M2.rules.append(A_S_A_Q_0N2E1M1M2M3)
A_Q_0N2E1M1.rules.append(S_A_Q_0N2E1M1M2)
Q_0N2E1.rules.append(A_Q_0N2E1M1)
Q_0N2.rules.append(Q_0N2E1)
Q_0.rules.append(Q_0N2)
Q_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before Q, followed by E, except...
Q_0E2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before Q, followed by E, followed by S, except...
A_Q_0E2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by E, followed by S, preceded by A, except...
F_A_Q_0E2S1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before Q, followed by E, followed by S, preceded by A, preceded by F, except...
A_F_A_Q_0E2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by E, followed by S, preceded by A, preceded by F, preceded by A, except...
F_A_Q_0E2S1M1M2.rules.append(A_F_A_Q_0E2S1M1M2M3)
A_Q_0E2S1M1.rules.append(F_A_Q_0E2S1M1M2)
Q_0E2S1.rules.append(A_Q_0E2S1M1)
Q_0E2.rules.append(Q_0E2S1)
Q_0.rules.append(Q_0E2)
Q_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before Q, followed by L, except...
Q_0L2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before Q, followed by L, followed by E, except...
A_Q_0L2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by L, followed by E, preceded by A, except...
S_A_Q_0L2E1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before Q, followed by L, followed by E, preceded by A, preceded by S, except...
A_S_A_Q_0L2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by L, followed by E, preceded by A, preceded by S, preceded by A, except...
S_A_Q_0L2E1M1M2.rules.append(A_S_A_Q_0L2E1M1M2M3)
A_Q_0L2E1M1.rules.append(S_A_Q_0L2E1M1M2)
Q_0L2E1.rules.append(A_Q_0L2E1M1)
Q_0L2.rules.append(Q_0L2E1)
Q_0.rules.append(Q_0L2)
Q_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before Q, followed by A, except...
Q_0A2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before Q, followed by A, followed by T, except...
A_Q_0A2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by A, followed by T, preceded by A, except...
Y_A_Q_0A2T1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before Q, followed by A, followed by T, preceded by A, preceded by Y, except...
L_Y_A_Q_0A2T1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before Q, followed by A, followed by T, preceded by A, preceded by Y, preceded by L, except...
Y_A_Q_0A2T1M1M2.rules.append(L_Y_A_Q_0A2T1M1M2M3)
A_Q_0A2T1M1.rules.append(Y_A_Q_0A2T1M1M2)
Q_0A2T1.rules.append(A_Q_0A2T1M1)
Q_0A2.rules.append(Q_0A2T1)
Q_0A2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before Q, followed by A, followed by E, except...
A_Q_0A2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by A, followed by E, preceded by A, except...
T_A_Q_0A2E1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before Q, followed by A, followed by E, preceded by A, preceded by T, except...
A_T_A_Q_0A2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by A, followed by E, preceded by A, preceded by T, preceded by A, except...
T_A_Q_0A2E1M1M2.rules.append(A_T_A_Q_0A2E1M1M2M3)
A_Q_0A2E1M1.rules.append(T_A_Q_0A2E1M1M2)
Y_A_Q_0A2E1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before Q, followed by A, followed by E, preceded by A, preceded by Y, except...
V_Y_A_Q_0A2E1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before Q, followed by A, followed by E, preceded by A, preceded by Y, preceded by V, except...
Y_A_Q_0A2E1M1M2.rules.append(V_Y_A_Q_0A2E1M1M2M3)
A_Y_A_Q_0A2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by A, followed by E, preceded by A, preceded by Y, preceded by A, except...
Y_A_Q_0A2E1M1M2.rules.append(A_Y_A_Q_0A2E1M1M2M3)
A_Q_0A2E1M1.rules.append(Y_A_Q_0A2E1M1M2)
Q_0A2E1.rules.append(A_Q_0A2E1M1)
Q_0A2.rules.append(Q_0A2E1)
Q_0.rules.append(Q_0A2)
Q_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before Q, followed by G, except...
Q_0G2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before Q, followed by G, followed by E, except...
A_Q_0G2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by G, followed by E, preceded by A, except...
H_A_Q_0G2E1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before Q, followed by G, followed by E, preceded by A, preceded by H, except...
A_H_A_Q_0G2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by G, followed by E, preceded by A, preceded by H, preceded by A, except...
H_A_Q_0G2E1M1M2.rules.append(A_H_A_Q_0G2E1M1M2M3)
A_Q_0G2E1M1.rules.append(H_A_Q_0G2E1M1M2)
L_A_Q_0G2E1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before Q, followed by G, followed by E, preceded by A, preceded by L, except...
A_L_A_Q_0G2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by G, followed by E, preceded by A, preceded by L, preceded by A, except...
L_A_Q_0G2E1M1M2.rules.append(A_L_A_Q_0G2E1M1M2M3)
A_Q_0G2E1M1.rules.append(L_A_Q_0G2E1M1M2)
Q_0G2E1.rules.append(A_Q_0G2E1M1)
Q_0G2.rules.append(Q_0G2E1)
Q_0G2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before Q, followed by G, followed by D, except...
A_Q_0G2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by G, followed by D, preceded by A, except...
A_A_Q_0G2D1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before Q, followed by G, followed by D, preceded by A, preceded by A, except...
A_A_A_Q_0G2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by G, followed by D, preceded by A, preceded by A, preceded by A, except...
A_A_Q_0G2D1M1M2.rules.append(A_A_A_Q_0G2D1M1M2M3)
A_Q_0G2D1M1.rules.append(A_A_Q_0G2D1M1M2)
L_A_Q_0G2D1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before Q, followed by G, followed by D, preceded by A, preceded by L, except...
A_L_A_Q_0G2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by G, followed by D, preceded by A, preceded by L, preceded by A, except...
L_A_Q_0G2D1M1M2.rules.append(A_L_A_Q_0G2D1M1M2M3)
A_Q_0G2D1M1.rules.append(L_A_Q_0G2D1M1M2)
Q_0G2D1.rules.append(A_Q_0G2D1M1)
Q_0G2.rules.append(Q_0G2D1)
Q_0.rules.append(Q_0G2)
Q_0D2 = rule.Rule(2, "D", False, -1) # Never cleaves before Q, followed by D, except...
Q_0D2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before Q, followed by D, followed by A, except...
A_Q_0D2A1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by D, followed by A, preceded by A, except...
L_A_Q_0D2A1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before Q, followed by D, followed by A, preceded by A, preceded by L, except...
A_L_A_Q_0D2A1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by D, followed by A, preceded by A, preceded by L, preceded by A, except...
L_A_Q_0D2A1M1M2.rules.append(A_L_A_Q_0D2A1M1M2M3)
A_Q_0D2A1M1.rules.append(L_A_Q_0D2A1M1M2)
Q_0D2A1.rules.append(A_Q_0D2A1M1)
Q_0D2.rules.append(Q_0D2A1)
Q_0D2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before Q, followed by D, followed by D, except...
A_Q_0D2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by D, followed by D, preceded by A, except...
M_A_Q_0D2D1M1M2 = rule.Rule(-2, "M", False, -1) # Never cleaves before Q, followed by D, followed by D, preceded by A, preceded by M, except...
A_M_A_Q_0D2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by D, followed by D, preceded by A, preceded by M, preceded by A, except...
M_A_Q_0D2D1M1M2.rules.append(A_M_A_Q_0D2D1M1M2M3)
A_Q_0D2D1M1.rules.append(M_A_Q_0D2D1M1M2)
Q_0D2D1.rules.append(A_Q_0D2D1M1)
Q_0D2.rules.append(Q_0D2D1)
Q_0D2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before Q, followed by D, followed by T, except...
A_Q_0D2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by D, followed by T, preceded by A, except...
H_A_Q_0D2T1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before Q, followed by D, followed by T, preceded by A, preceded by H, except...
A_H_A_Q_0D2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by D, followed by T, preceded by A, preceded by H, preceded by A, except...
H_A_Q_0D2T1M1M2.rules.append(A_H_A_Q_0D2T1M1M2M3)
A_Q_0D2T1M1.rules.append(H_A_Q_0D2T1M1M2)
Q_0D2T1.rules.append(A_Q_0D2T1M1)
Q_0D2.rules.append(Q_0D2T1)
Q_0.rules.append(Q_0D2)
Q_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before Q, followed by T, except...
Q_0T2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before Q, followed by T, followed by D, except...
A_Q_0T2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by T, followed by D, preceded by A, except...
S_A_Q_0T2D1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before Q, followed by T, followed by D, preceded by A, preceded by S, except...
A_S_A_Q_0T2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by T, followed by D, preceded by A, preceded by S, preceded by A, except...
S_A_Q_0T2D1M1M2.rules.append(A_S_A_Q_0T2D1M1M2M3)
A_Q_0T2D1M1.rules.append(S_A_Q_0T2D1M1M2)
W_A_Q_0T2D1M1M2 = rule.Rule(-2, "W", False, -1) # Never cleaves before Q, followed by T, followed by D, preceded by A, preceded by W, except...
A_W_A_Q_0T2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by T, followed by D, preceded by A, preceded by W, preceded by A, except...
W_A_Q_0T2D1M1M2.rules.append(A_W_A_Q_0T2D1M1M2M3)
A_Q_0T2D1M1.rules.append(W_A_Q_0T2D1M1M2)
Q_0T2D1.rules.append(A_Q_0T2D1M1)
Q_0T2.rules.append(Q_0T2D1)
Q_0T2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before Q, followed by T, followed by T, except...
A_Q_0T2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by T, followed by T, preceded by A, except...
Q_A_Q_0T2T1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before Q, followed by T, followed by T, preceded by A, preceded by Q, except...
V_Q_A_Q_0T2T1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before Q, followed by T, followed by T, preceded by A, preceded by Q, preceded by V, except...
Q_A_Q_0T2T1M1M2.rules.append(V_Q_A_Q_0T2T1M1M2M3)
A_Q_0T2T1M1.rules.append(Q_A_Q_0T2T1M1M2)
Q_0T2T1.rules.append(A_Q_0T2T1M1)
Q_0T2.rules.append(Q_0T2T1)
Q_0T2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before Q, followed by T, followed by E, except...
G_Q_0T2E1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before Q, followed by T, followed by E, preceded by G, except...
L_G_Q_0T2E1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before Q, followed by T, followed by E, preceded by G, preceded by L, except...
T_L_G_Q_0T2E1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before Q, followed by T, followed by E, preceded by G, preceded by L, preceded by T, except...
L_G_Q_0T2E1M1M2.rules.append(T_L_G_Q_0T2E1M1M2M3)
G_Q_0T2E1M1.rules.append(L_G_Q_0T2E1M1M2)
Q_0T2E1.rules.append(G_Q_0T2E1M1)
Q_0T2.rules.append(Q_0T2E1)
Q_0.rules.append(Q_0T2)
Q_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before Q, followed by V, except...
Q_0V2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before Q, followed by V, followed by T, except...
A_Q_0V2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by V, followed by T, preceded by A, except...
Q_A_Q_0V2T1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before Q, followed by V, followed by T, preceded by A, preceded by Q, except...
A_Q_A_Q_0V2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by V, followed by T, preceded by A, preceded by Q, preceded by A, except...
Q_A_Q_0V2T1M1M2.rules.append(A_Q_A_Q_0V2T1M1M2M3)
A_Q_0V2T1M1.rules.append(Q_A_Q_0V2T1M1M2)
Q_0V2T1.rules.append(A_Q_0V2T1M1)
Q_0V2.rules.append(Q_0V2T1)
Q_0.rules.append(Q_0V2)
Q_0Y2 = rule.Rule(2, "Y", False, -1) # Never cleaves before Q, followed by Y, except...
Q_0Y2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before Q, followed by Y, followed by T, except...
A_Q_0Y2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by Y, followed by T, preceded by A, except...
N_A_Q_0Y2T1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before Q, followed by Y, followed by T, preceded by A, preceded by N, except...
A_N_A_Q_0Y2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by Y, followed by T, preceded by A, preceded by N, preceded by A, except...
N_A_Q_0Y2T1M1M2.rules.append(A_N_A_Q_0Y2T1M1M2M3)
A_Q_0Y2T1M1.rules.append(N_A_Q_0Y2T1M1M2)
Q_0Y2T1.rules.append(A_Q_0Y2T1M1)
Q_0Y2.rules.append(Q_0Y2T1)
Q_0.rules.append(Q_0Y2)
Q_0Q2 = rule.Rule(2, "Q", False, -1) # Never cleaves before Q, followed by Q, except...
Q_0Q2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before Q, followed by Q, followed by G, except...
A_Q_0Q2G1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by Q, followed by G, preceded by A, except...
L_A_Q_0Q2G1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before Q, followed by Q, followed by G, preceded by A, preceded by L, except...
A_L_A_Q_0Q2G1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by Q, followed by G, preceded by A, preceded by L, preceded by A, except...
L_A_Q_0Q2G1M1M2.rules.append(A_L_A_Q_0Q2G1M1M2M3)
A_Q_0Q2G1M1.rules.append(L_A_Q_0Q2G1M1M2)
Q_0Q2G1.rules.append(A_Q_0Q2G1M1)
Q_0Q2.rules.append(Q_0Q2G1)
Q_0.rules.append(Q_0Q2)
ENZ.append(Q_0)

D_0 = rule.Rule(0, "D", False, 0) # Never cleaves before D, except...
D_0Q2 = rule.Rule(2, "Q", False, -1) # Never cleaves before D, followed by Q, except...
D_0Q2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before D, followed by Q, followed by S, except...
A_D_0Q2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by Q, followed by S, preceded by A, except...
Q_A_D_0Q2S1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before D, followed by Q, followed by S, preceded by A, preceded by Q, except...
A_Q_A_D_0Q2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by Q, followed by S, preceded by A, preceded by Q, preceded by A, except...
Q_A_D_0Q2S1M1M2.rules.append(A_Q_A_D_0Q2S1M1M2M3)
A_D_0Q2S1M1.rules.append(Q_A_D_0Q2S1M1M2)
D_0Q2S1.rules.append(A_D_0Q2S1M1)
D_0Q2.rules.append(D_0Q2S1)
D_0.rules.append(D_0Q2)
D_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before D, followed by E, except...
D_0E2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before D, followed by E, followed by P, except...
A_D_0E2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by E, followed by P, preceded by A, except...
N_A_D_0E2P1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before D, followed by E, followed by P, preceded by A, preceded by N, except...
A_N_A_D_0E2P1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by E, followed by P, preceded by A, preceded by N, preceded by A, except...
N_A_D_0E2P1M1M2.rules.append(A_N_A_D_0E2P1M1M2M3)
A_D_0E2P1M1.rules.append(N_A_D_0E2P1M1M2)
D_0E2P1.rules.append(A_D_0E2P1M1)
D_0E2.rules.append(D_0E2P1)
D_0.rules.append(D_0E2)
D_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before D, followed by A, except...
D_0A2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before D, followed by A, followed by K, except...
A_D_0A2K1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by A, followed by K, preceded by A, except...
L_A_D_0A2K1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before D, followed by A, followed by K, preceded by A, preceded by L, except...
A_L_A_D_0A2K1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by A, followed by K, preceded by A, preceded by L, preceded by A, except...
L_A_D_0A2K1M1M2.rules.append(A_L_A_D_0A2K1M1M2M3)
A_D_0A2K1M1.rules.append(L_A_D_0A2K1M1M2)
D_0A2K1.rules.append(A_D_0A2K1M1)
D_0A2.rules.append(D_0A2K1)
D_0A2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before D, followed by A, followed by D, except...
A_D_0A2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by A, followed by D, preceded by A, except...
Q_A_D_0A2D1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before D, followed by A, followed by D, preceded by A, preceded by Q, except...
A_Q_A_D_0A2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by A, followed by D, preceded by A, preceded by Q, preceded by A, except...
Q_A_D_0A2D1M1M2.rules.append(A_Q_A_D_0A2D1M1M2M3)
A_D_0A2D1M1.rules.append(Q_A_D_0A2D1M1M2)
H_A_D_0A2D1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before D, followed by A, followed by D, preceded by A, preceded by H, except...
A_H_A_D_0A2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by A, followed by D, preceded by A, preceded by H, preceded by A, except...
H_A_D_0A2D1M1M2.rules.append(A_H_A_D_0A2D1M1M2M3)
A_D_0A2D1M1.rules.append(H_A_D_0A2D1M1M2)
D_0A2D1.rules.append(A_D_0A2D1M1)
D_0A2.rules.append(D_0A2D1)
D_0A2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before D, followed by A, followed by A, except...
A_D_0A2A1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by A, followed by A, preceded by A, except...
W_A_D_0A2A1M1M2 = rule.Rule(-2, "W", False, -1) # Never cleaves before D, followed by A, followed by A, preceded by A, preceded by W, except...
V_W_A_D_0A2A1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before D, followed by A, followed by A, preceded by A, preceded by W, preceded by V, except...
W_A_D_0A2A1M1M2.rules.append(V_W_A_D_0A2A1M1M2M3)
A_D_0A2A1M1.rules.append(W_A_D_0A2A1M1M2)
D_0A2A1.rules.append(A_D_0A2A1M1)
D_0A2.rules.append(D_0A2A1)
D_0A2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before D, followed by A, followed by P, except...
A_D_0A2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by A, followed by P, preceded by A, except...
F_A_D_0A2P1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before D, followed by A, followed by P, preceded by A, preceded by F, except...
A_F_A_D_0A2P1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by A, followed by P, preceded by A, preceded by F, preceded by A, except...
F_A_D_0A2P1M1M2.rules.append(A_F_A_D_0A2P1M1M2M3)
A_D_0A2P1M1.rules.append(F_A_D_0A2P1M1M2)
D_0A2P1.rules.append(A_D_0A2P1M1)
D_0A2.rules.append(D_0A2P1)
D_0.rules.append(D_0A2)
D_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before D, followed by G, except...
D_0G2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before D, followed by G, followed by E, except...
A_D_0G2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by G, followed by E, preceded by A, except...
F_A_D_0G2E1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before D, followed by G, followed by E, preceded by A, preceded by F, except...
S_F_A_D_0G2E1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before D, followed by G, followed by E, preceded by A, preceded by F, preceded by S, except...
F_A_D_0G2E1M1M2.rules.append(S_F_A_D_0G2E1M1M2M3)
A_D_0G2E1M1.rules.append(F_A_D_0G2E1M1M2)
L_A_D_0G2E1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before D, followed by G, followed by E, preceded by A, preceded by L, except...
A_L_A_D_0G2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by G, followed by E, preceded by A, preceded by L, preceded by A, except...
L_A_D_0G2E1M1M2.rules.append(A_L_A_D_0G2E1M1M2M3)
A_D_0G2E1M1.rules.append(L_A_D_0G2E1M1M2)
D_0G2E1.rules.append(A_D_0G2E1M1)
D_0G2.rules.append(D_0G2E1)
D_0.rules.append(D_0G2)
D_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before D, followed by T, except...
D_0T2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before D, followed by T, followed by T, except...
A_D_0T2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by T, followed by T, preceded by A, except...
L_A_D_0T2T1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before D, followed by T, followed by T, preceded by A, preceded by L, except...
A_L_A_D_0T2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by T, followed by T, preceded by A, preceded by L, preceded by A, except...
L_A_D_0T2T1M1M2.rules.append(A_L_A_D_0T2T1M1M2M3)
A_D_0T2T1M1.rules.append(L_A_D_0T2T1M1M2)
D_0T2T1.rules.append(A_D_0T2T1M1)
D_0T2.rules.append(D_0T2T1)
D_0T2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before D, followed by T, followed by I, except...
A_D_0T2I1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by T, followed by I, preceded by A, except...
F_A_D_0T2I1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before D, followed by T, followed by I, preceded by A, preceded by F, except...
S_F_A_D_0T2I1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before D, followed by T, followed by I, preceded by A, preceded by F, preceded by S, except...
F_A_D_0T2I1M1M2.rules.append(S_F_A_D_0T2I1M1M2M3)
A_D_0T2I1M1.rules.append(F_A_D_0T2I1M1M2)
D_0T2I1.rules.append(A_D_0T2I1M1)
D_0T2.rules.append(D_0T2I1)
D_0T2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before D, followed by T, followed by E, except...
A_D_0T2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by T, followed by E, preceded by A, except...
F_A_D_0T2E1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before D, followed by T, followed by E, preceded by A, preceded by F, except...
V_F_A_D_0T2E1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before D, followed by T, followed by E, preceded by A, preceded by F, preceded by V, except...
F_A_D_0T2E1M1M2.rules.append(V_F_A_D_0T2E1M1M2M3)
A_D_0T2E1M1.rules.append(F_A_D_0T2E1M1M2)
D_0T2E1.rules.append(A_D_0T2E1M1)
D_0T2.rules.append(D_0T2E1)
D_0.rules.append(D_0T2)
D_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before D, followed by L, except...
D_0L2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before D, followed by L, followed by V, except...
A_D_0L2V1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by L, followed by V, preceded by A, except...
N_A_D_0L2V1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before D, followed by L, followed by V, preceded by A, preceded by N, except...
A_N_A_D_0L2V1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by L, followed by V, preceded by A, preceded by N, preceded by A, except...
N_A_D_0L2V1M1M2.rules.append(A_N_A_D_0L2V1M1M2M3)
A_D_0L2V1M1.rules.append(N_A_D_0L2V1M1M2)
D_0L2V1.rules.append(A_D_0L2V1M1)
D_0L2.rules.append(D_0L2V1)
D_0L2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before D, followed by L, followed by D, except...
A_D_0L2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by L, followed by D, preceded by A, except...
H_A_D_0L2D1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before D, followed by L, followed by D, preceded by A, preceded by H, except...
A_H_A_D_0L2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by L, followed by D, preceded by A, preceded by H, preceded by A, except...
H_A_D_0L2D1M1M2.rules.append(A_H_A_D_0L2D1M1M2M3)
A_D_0L2D1M1.rules.append(H_A_D_0L2D1M1M2)
D_0L2D1.rules.append(A_D_0L2D1M1)
D_0L2.rules.append(D_0L2D1)
D_0L2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before D, followed by L, followed by A, except...
A_D_0L2A1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by L, followed by A, preceded by A, except...
Q_A_D_0L2A1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before D, followed by L, followed by A, preceded by A, preceded by Q, except...
V_Q_A_D_0L2A1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before D, followed by L, followed by A, preceded by A, preceded by Q, preceded by V, except...
Q_A_D_0L2A1M1M2.rules.append(V_Q_A_D_0L2A1M1M2M3)
A_D_0L2A1M1.rules.append(Q_A_D_0L2A1M1M2)
D_0L2A1.rules.append(A_D_0L2A1M1)
D_0L2.rules.append(D_0L2A1)
D_0L2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before D, followed by L, followed by S, except...
A_D_0L2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by L, followed by S, preceded by A, except...
R_A_D_0L2S1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before D, followed by L, followed by S, preceded by A, preceded by R, except...
A_R_A_D_0L2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by L, followed by S, preceded by A, preceded by R, preceded by A, except...
R_A_D_0L2S1M1M2.rules.append(A_R_A_D_0L2S1M1M2M3)
A_D_0L2S1M1.rules.append(R_A_D_0L2S1M1M2)
D_0L2S1.rules.append(A_D_0L2S1M1)
D_0L2.rules.append(D_0L2S1)
D_0.rules.append(D_0L2)
D_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before D, followed by I, except...
D_0I2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before D, followed by I, followed by D, except...
A_D_0I2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by I, followed by D, preceded by A, except...
M_A_D_0I2D1M1M2 = rule.Rule(-2, "M", False, -1) # Never cleaves before D, followed by I, followed by D, preceded by A, preceded by M, except...
A_M_A_D_0I2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by I, followed by D, preceded by A, preceded by M, preceded by A, except...
M_A_D_0I2D1M1M2.rules.append(A_M_A_D_0I2D1M1M2M3)
A_D_0I2D1M1.rules.append(M_A_D_0I2D1M1M2)
D_0I2D1.rules.append(A_D_0I2D1M1)
D_0I2.rules.append(D_0I2D1)
D_0.rules.append(D_0I2)
D_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before D, followed by S, except...
D_0S2H1 = rule.Rule(1, "H", False, -1) # Never cleaves before D, followed by S, followed by H, except...
A_D_0S2H1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by S, followed by H, preceded by A, except...
R_A_D_0S2H1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before D, followed by S, followed by H, preceded by A, preceded by R, except...
V_R_A_D_0S2H1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before D, followed by S, followed by H, preceded by A, preceded by R, preceded by V, except...
R_A_D_0S2H1M1M2.rules.append(V_R_A_D_0S2H1M1M2M3)
A_D_0S2H1M1.rules.append(R_A_D_0S2H1M1M2)
D_0S2H1.rules.append(A_D_0S2H1M1)
D_0S2.rules.append(D_0S2H1)
D_0.rules.append(D_0S2)
D_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before D, followed by N, except...
D_0N2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before D, followed by N, followed by I, except...
A_D_0N2I1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by N, followed by I, preceded by A, except...
Q_A_D_0N2I1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before D, followed by N, followed by I, preceded by A, preceded by Q, except...
V_Q_A_D_0N2I1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before D, followed by N, followed by I, preceded by A, preceded by Q, preceded by V, except...
Q_A_D_0N2I1M1M2.rules.append(V_Q_A_D_0N2I1M1M2M3)
A_D_0N2I1M1.rules.append(Q_A_D_0N2I1M1M2)
D_0N2I1.rules.append(A_D_0N2I1M1)
D_0N2.rules.append(D_0N2I1)
D_0N2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before D, followed by N, followed by A, except...
A_D_0N2A1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by N, followed by A, preceded by A, except...
I_A_D_0N2A1M1M2 = rule.Rule(-2, "I", False, -1) # Never cleaves before D, followed by N, followed by A, preceded by A, preceded by I, except...
A_I_A_D_0N2A1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by N, followed by A, preceded by A, preceded by I, preceded by A, except...
I_A_D_0N2A1M1M2.rules.append(A_I_A_D_0N2A1M1M2M3)
A_D_0N2A1M1.rules.append(I_A_D_0N2A1M1M2)
D_0N2A1.rules.append(A_D_0N2A1M1)
D_0N2.rules.append(D_0N2A1)
D_0N2W1 = rule.Rule(1, "W", False, -1) # Never cleaves before D, followed by N, followed by W, except...
A_D_0N2W1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by N, followed by W, preceded by A, except...
H_A_D_0N2W1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before D, followed by N, followed by W, preceded by A, preceded by H, except...
A_H_A_D_0N2W1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by N, followed by W, preceded by A, preceded by H, preceded by A, except...
H_A_D_0N2W1M1M2.rules.append(A_H_A_D_0N2W1M1M2M3)
A_D_0N2W1M1.rules.append(H_A_D_0N2W1M1M2)
D_0N2W1.rules.append(A_D_0N2W1M1)
D_0N2.rules.append(D_0N2W1)
D_0N2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before D, followed by N, followed by D, except...
A_D_0N2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by N, followed by D, preceded by A, except...
H_A_D_0N2D1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before D, followed by N, followed by D, preceded by A, preceded by H, except...
A_H_A_D_0N2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by N, followed by D, preceded by A, preceded by H, preceded by A, except...
H_A_D_0N2D1M1M2.rules.append(A_H_A_D_0N2D1M1M2M3)
A_D_0N2D1M1.rules.append(H_A_D_0N2D1M1M2)
D_0N2D1.rules.append(A_D_0N2D1M1)
D_0N2.rules.append(D_0N2D1)
D_0N2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before D, followed by N, followed by Q, except...
A_D_0N2Q1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by N, followed by Q, preceded by A, except...
F_A_D_0N2Q1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before D, followed by N, followed by Q, preceded by A, preceded by F, except...
V_F_A_D_0N2Q1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before D, followed by N, followed by Q, preceded by A, preceded by F, preceded by V, except...
F_A_D_0N2Q1M1M2.rules.append(V_F_A_D_0N2Q1M1M2M3)
A_D_0N2Q1M1.rules.append(F_A_D_0N2Q1M1M2)
D_0N2Q1.rules.append(A_D_0N2Q1M1)
D_0N2.rules.append(D_0N2Q1)
D_0N2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before D, followed by N, followed by T, except...
A_D_0N2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by N, followed by T, preceded by A, except...
Q_A_D_0N2T1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before D, followed by N, followed by T, preceded by A, preceded by Q, except...
A_Q_A_D_0N2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by N, followed by T, preceded by A, preceded by Q, preceded by A, except...
Q_A_D_0N2T1M1M2.rules.append(A_Q_A_D_0N2T1M1M2M3)
A_D_0N2T1M1.rules.append(Q_A_D_0N2T1M1M2)
D_0N2T1.rules.append(A_D_0N2T1M1)
D_0N2.rules.append(D_0N2T1)
D_0.rules.append(D_0N2)
D_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before D, followed by V, except...
D_0V2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before D, followed by V, followed by V, except...
A_D_0V2V1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by V, followed by V, preceded by A, except...
F_A_D_0V2V1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before D, followed by V, followed by V, preceded by A, preceded by F, except...
A_F_A_D_0V2V1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by V, followed by V, preceded by A, preceded by F, preceded by A, except...
F_A_D_0V2V1M1M2.rules.append(A_F_A_D_0V2V1M1M2M3)
A_D_0V2V1M1.rules.append(F_A_D_0V2V1M1M2)
D_0V2V1.rules.append(A_D_0V2V1M1)
D_0V2.rules.append(D_0V2V1)
D_0.rules.append(D_0V2)
D_0R2 = rule.Rule(2, "R", False, -1) # Never cleaves before D, followed by R, except...
D_0R2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before D, followed by R, followed by E, except...
A_D_0R2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by R, followed by E, preceded by A, except...
A_A_D_0R2E1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before D, followed by R, followed by E, preceded by A, preceded by A, except...
V_A_A_D_0R2E1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before D, followed by R, followed by E, preceded by A, preceded by A, preceded by V, except...
A_A_D_0R2E1M1M2.rules.append(V_A_A_D_0R2E1M1M2M3)
A_D_0R2E1M1.rules.append(A_A_D_0R2E1M1M2)
D_0R2E1.rules.append(A_D_0R2E1M1)
D_0R2.rules.append(D_0R2E1)
D_0.rules.append(D_0R2)
ENZ.append(D_0)

A_0 = rule.Rule(0, "A", False, 0) # Never cleaves before A, except...
A_0F2 = rule.Rule(2, "F", False, -1) # Never cleaves before A, followed by F, except...
A_0F2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before A, followed by F, followed by A, except...
A_A_0F2A1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by F, followed by A, preceded by A, except...
S_A_A_0F2A1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before A, followed by F, followed by A, preceded by A, preceded by S, except...
A_S_A_A_0F2A1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by F, followed by A, preceded by A, preceded by S, preceded by A, except...
S_A_A_0F2A1M1M2.rules.append(A_S_A_A_0F2A1M1M2M3)
A_A_0F2A1M1.rules.append(S_A_A_0F2A1M1M2)
A_0F2A1.rules.append(A_A_0F2A1M1)
A_0F2.rules.append(A_0F2A1)
A_0F2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before A, followed by F, followed by G, except...
S_A_0F2G1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before A, followed by F, followed by G, preceded by S, except...
W_S_A_0F2G1M1M2 = rule.Rule(-2, "W", False, -1) # Never cleaves before A, followed by F, followed by G, preceded by S, preceded by W, except...
A_W_S_A_0F2G1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by F, followed by G, preceded by S, preceded by W, preceded by A, except...
W_S_A_0F2G1M1M2.rules.append(A_W_S_A_0F2G1M1M2M3)
S_A_0F2G1M1.rules.append(W_S_A_0F2G1M1M2)
A_0F2G1.rules.append(S_A_0F2G1M1)
A_0F2.rules.append(A_0F2G1)
A_0F2F1 = rule.Rule(1, "F", False, -1) # Never cleaves before A, followed by F, followed by F, except...
A_A_0F2F1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by F, followed by F, preceded by A, except...
H_A_A_0F2F1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before A, followed by F, followed by F, preceded by A, preceded by H, except...
S_H_A_A_0F2F1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by F, followed by F, preceded by A, preceded by H, preceded by S, except...
H_A_A_0F2F1M1M2.rules.append(S_H_A_A_0F2F1M1M2M3)
A_A_0F2F1M1.rules.append(H_A_A_0F2F1M1M2)
A_0F2F1.rules.append(A_A_0F2F1M1)
A_0F2.rules.append(A_0F2F1)
A_0.rules.append(A_0F2)
A_0K2 = rule.Rule(2, "K", False, -1) # Never cleaves before A, followed by K, except...
A_0K2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before A, followed by K, followed by E, except...
A_A_0K2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by K, followed by E, preceded by A, except...
R_A_A_0K2E1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before A, followed by K, followed by E, preceded by A, preceded by R, except...
A_R_A_A_0K2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by K, followed by E, preceded by A, preceded by R, preceded by A, except...
R_A_A_0K2E1M1M2.rules.append(A_R_A_A_0K2E1M1M2M3)
A_A_0K2E1M1.rules.append(R_A_A_0K2E1M1M2)
S_A_A_0K2E1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before A, followed by K, followed by E, preceded by A, preceded by S, except...
A_S_A_A_0K2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by K, followed by E, preceded by A, preceded by S, preceded by A, except...
S_A_A_0K2E1M1M2.rules.append(A_S_A_A_0K2E1M1M2M3)
A_A_0K2E1M1.rules.append(S_A_A_0K2E1M1M2)
A_0K2E1.rules.append(A_A_0K2E1M1)
A_0K2.rules.append(A_0K2E1)
A_0K2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before A, followed by K, followed by D, except...
A_A_0K2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by K, followed by D, preceded by A, except...
Q_A_A_0K2D1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before A, followed by K, followed by D, preceded by A, preceded by Q, except...
A_Q_A_A_0K2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by K, followed by D, preceded by A, preceded by Q, preceded by A, except...
Q_A_A_0K2D1M1M2.rules.append(A_Q_A_A_0K2D1M1M2M3)
A_A_0K2D1M1.rules.append(Q_A_A_0K2D1M1M2)
H_A_A_0K2D1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before A, followed by K, followed by D, preceded by A, preceded by H, except...
S_H_A_A_0K2D1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by K, followed by D, preceded by A, preceded by H, preceded by S, except...
H_A_A_0K2D1M1M2.rules.append(S_H_A_A_0K2D1M1M2M3)
A_A_0K2D1M1.rules.append(H_A_A_0K2D1M1M2)
A_0K2D1.rules.append(A_A_0K2D1M1)
A_0K2.rules.append(A_0K2D1)
A_0K2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before A, followed by K, followed by S, except...
A_A_0K2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by K, followed by S, preceded by A, except...
K_A_A_0K2S1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by K, followed by S, preceded by A, preceded by K, except...
A_K_A_A_0K2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by K, followed by S, preceded by A, preceded by K, preceded by A, except...
K_A_A_0K2S1M1M2.rules.append(A_K_A_A_0K2S1M1M2M3)
A_A_0K2S1M1.rules.append(K_A_A_0K2S1M1M2)
Q_A_A_0K2S1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before A, followed by K, followed by S, preceded by A, preceded by Q, except...
I_Q_A_A_0K2S1M1M2M3 = rule.Rule(-3, "I", True, -1) # Always cleaves before A, followed by K, followed by S, preceded by A, preceded by Q, preceded by I, except...
Q_A_A_0K2S1M1M2.rules.append(I_Q_A_A_0K2S1M1M2M3)
A_A_0K2S1M1.rules.append(Q_A_A_0K2S1M1M2)
A_0K2S1.rules.append(A_A_0K2S1M1)
A_0K2.rules.append(A_0K2S1)
A_0K2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before A, followed by K, followed by P, except...
A_A_0K2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by K, followed by P, preceded by A, except...
T_A_A_0K2P1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before A, followed by K, followed by P, preceded by A, preceded by T, except...
A_T_A_A_0K2P1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by K, followed by P, preceded by A, preceded by T, preceded by A, except...
T_A_A_0K2P1M1M2.rules.append(A_T_A_A_0K2P1M1M2M3)
A_A_0K2P1M1.rules.append(T_A_A_0K2P1M1M2)
Q_A_A_0K2P1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before A, followed by K, followed by P, preceded by A, preceded by Q, except...
A_Q_A_A_0K2P1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by K, followed by P, preceded by A, preceded by Q, preceded by A, except...
Q_A_A_0K2P1M1M2.rules.append(A_Q_A_A_0K2P1M1M2M3)
A_A_0K2P1M1.rules.append(Q_A_A_0K2P1M1M2)
A_0K2P1.rules.append(A_A_0K2P1M1)
A_0K2.rules.append(A_0K2P1)
A_0.rules.append(A_0K2)
A_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before A, followed by L, except...
A_0L2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before A, followed by L, followed by P, except...
A_A_0L2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by L, followed by P, preceded by A, except...
L_A_A_0L2P1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by L, followed by P, preceded by A, preceded by L, except...
A_L_A_A_0L2P1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by L, followed by P, preceded by A, preceded by L, preceded by A, except...
L_A_A_0L2P1M1M2.rules.append(A_L_A_A_0L2P1M1M2M3)
A_A_0L2P1M1.rules.append(L_A_A_0L2P1M1M2)
A_0L2P1.rules.append(A_A_0L2P1M1)
A_0L2.rules.append(A_0L2P1)
A_0L2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before A, followed by L, followed by Q, except...
A_A_0L2Q1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by L, followed by Q, preceded by A, except...
Q_A_A_0L2Q1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before A, followed by L, followed by Q, preceded by A, preceded by Q, except...
S_Q_A_A_0L2Q1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by L, followed by Q, preceded by A, preceded by Q, preceded by S, except...
Q_A_A_0L2Q1M1M2.rules.append(S_Q_A_A_0L2Q1M1M2M3)
A_A_0L2Q1M1.rules.append(Q_A_A_0L2Q1M1M2)
Y_A_A_0L2Q1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before A, followed by L, followed by Q, preceded by A, preceded by Y, except...
A_Y_A_A_0L2Q1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by L, followed by Q, preceded by A, preceded by Y, preceded by A, except...
Y_A_A_0L2Q1M1M2.rules.append(A_Y_A_A_0L2Q1M1M2M3)
A_A_0L2Q1M1.rules.append(Y_A_A_0L2Q1M1M2)
A_0L2Q1.rules.append(A_A_0L2Q1M1)
A_0L2.rules.append(A_0L2Q1)
A_0L2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before A, followed by L, followed by T, except...
A_A_0L2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by L, followed by T, preceded by A, except...
Q_A_A_0L2T1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before A, followed by L, followed by T, preceded by A, preceded by Q, except...
L_Q_A_A_0L2T1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before A, followed by L, followed by T, preceded by A, preceded by Q, preceded by L, except...
Q_A_A_0L2T1M1M2.rules.append(L_Q_A_A_0L2T1M1M2M3)
A_A_0L2T1M1.rules.append(Q_A_A_0L2T1M1M2)
A_0L2T1.rules.append(A_A_0L2T1M1)
A_0L2.rules.append(A_0L2T1)
A_0L2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before A, followed by L, followed by D, except...
A_A_0L2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by L, followed by D, preceded by A, except...
F_A_A_0L2D1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before A, followed by L, followed by D, preceded by A, preceded by F, except...
T_F_A_A_0L2D1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before A, followed by L, followed by D, preceded by A, preceded by F, preceded by T, except...
F_A_A_0L2D1M1M2.rules.append(T_F_A_A_0L2D1M1M2M3)
S_F_A_A_0L2D1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by L, followed by D, preceded by A, preceded by F, preceded by S, except...
F_A_A_0L2D1M1M2.rules.append(S_F_A_A_0L2D1M1M2M3)
V_F_A_A_0L2D1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by L, followed by D, preceded by A, preceded by F, preceded by V, except...
F_A_A_0L2D1M1M2.rules.append(V_F_A_A_0L2D1M1M2M3)
A_A_0L2D1M1.rules.append(F_A_A_0L2D1M1M2)
L_A_A_0L2D1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by L, followed by D, preceded by A, preceded by L, except...
G_L_A_A_0L2D1M1M2M3 = rule.Rule(-3, "G", True, -1) # Always cleaves before A, followed by L, followed by D, preceded by A, preceded by L, preceded by G, except...
L_A_A_0L2D1M1M2.rules.append(G_L_A_A_0L2D1M1M2M3)
A_A_0L2D1M1.rules.append(L_A_A_0L2D1M1M2)
N_A_A_0L2D1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before A, followed by L, followed by D, preceded by A, preceded by N, except...
A_N_A_A_0L2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by L, followed by D, preceded by A, preceded by N, preceded by A, except...
N_A_A_0L2D1M1M2.rules.append(A_N_A_A_0L2D1M1M2M3)
A_A_0L2D1M1.rules.append(N_A_A_0L2D1M1M2)
A_0L2D1.rules.append(A_A_0L2D1M1)
A_0L2.rules.append(A_0L2D1)
A_0L2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before A, followed by L, followed by S, except...
A_A_0L2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by L, followed by S, preceded by A, except...
G_A_A_0L2S1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before A, followed by L, followed by S, preceded by A, preceded by G, except...
A_G_A_A_0L2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by L, followed by S, preceded by A, preceded by G, preceded by A, except...
G_A_A_0L2S1M1M2.rules.append(A_G_A_A_0L2S1M1M2M3)
A_A_0L2S1M1.rules.append(G_A_A_0L2S1M1M2)
A_0L2S1.rules.append(A_A_0L2S1M1)
A_0L2.rules.append(A_0L2S1)
A_0L2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before A, followed by L, followed by E, except...
S_A_0L2E1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before A, followed by L, followed by E, preceded by S, except...
F_S_A_0L2E1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before A, followed by L, followed by E, preceded by S, preceded by F, except...
A_F_S_A_0L2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by L, followed by E, preceded by S, preceded by F, preceded by A, except...
F_S_A_0L2E1M1M2.rules.append(A_F_S_A_0L2E1M1M2M3)
S_A_0L2E1M1.rules.append(F_S_A_0L2E1M1M2)
A_0L2E1.rules.append(S_A_0L2E1M1)
A_A_0L2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by L, followed by E, preceded by A, except...
K_A_A_0L2E1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by L, followed by E, preceded by A, preceded by K, except...
A_K_A_A_0L2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by L, followed by E, preceded by A, preceded by K, preceded by A, except...
K_A_A_0L2E1M1M2.rules.append(A_K_A_A_0L2E1M1M2M3)
A_A_0L2E1M1.rules.append(K_A_A_0L2E1M1M2)
A_0L2E1.rules.append(A_A_0L2E1M1)
A_0L2.rules.append(A_0L2E1)
A_0.rules.append(A_0L2)
A_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before A, followed by T, except...
A_0T2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before A, followed by T, followed by E, except...
A_A_0T2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by T, followed by E, preceded by A, except...
F_A_A_0T2E1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before A, followed by T, followed by E, preceded by A, preceded by F, except...
A_F_A_A_0T2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by T, followed by E, preceded by A, preceded by F, preceded by A, except...
F_A_A_0T2E1M1M2.rules.append(A_F_A_A_0T2E1M1M2M3)
A_A_0T2E1M1.rules.append(F_A_A_0T2E1M1M2)
T_A_A_0T2E1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before A, followed by T, followed by E, preceded by A, preceded by T, except...
A_T_A_A_0T2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by T, followed by E, preceded by A, preceded by T, preceded by A, except...
T_A_A_0T2E1M1M2.rules.append(A_T_A_A_0T2E1M1M2M3)
A_A_0T2E1M1.rules.append(T_A_A_0T2E1M1M2)
M_A_A_0T2E1M1M2 = rule.Rule(-2, "M", False, -1) # Never cleaves before A, followed by T, followed by E, preceded by A, preceded by M, except...
A_M_A_A_0T2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by T, followed by E, preceded by A, preceded by M, preceded by A, except...
M_A_A_0T2E1M1M2.rules.append(A_M_A_A_0T2E1M1M2M3)
A_A_0T2E1M1.rules.append(M_A_A_0T2E1M1M2)
A_0T2E1.rules.append(A_A_0T2E1M1)
A_0T2.rules.append(A_0T2E1)
A_0T2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before A, followed by T, followed by D, except...
A_A_0T2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by T, followed by D, preceded by A, except...
A_A_A_0T2D1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before A, followed by T, followed by D, preceded by A, preceded by A, except...
A_A_A_A_0T2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by T, followed by D, preceded by A, preceded by A, preceded by A, except...
A_A_A_0T2D1M1M2.rules.append(A_A_A_A_0T2D1M1M2M3)
A_A_0T2D1M1.rules.append(A_A_A_0T2D1M1M2)
H_A_A_0T2D1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before A, followed by T, followed by D, preceded by A, preceded by H, except...
A_H_A_A_0T2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by T, followed by D, preceded by A, preceded by H, preceded by A, except...
H_A_A_0T2D1M1M2.rules.append(A_H_A_A_0T2D1M1M2M3)
A_A_0T2D1M1.rules.append(H_A_A_0T2D1M1M2)
A_0T2D1.rules.append(A_A_0T2D1M1)
A_0T2.rules.append(A_0T2D1)
A_0T2C1 = rule.Rule(1, "C", False, -1) # Never cleaves before A, followed by T, followed by C, except...
A_A_0T2C1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by T, followed by C, preceded by A, except...
S_A_A_0T2C1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before A, followed by T, followed by C, preceded by A, preceded by S, except...
A_S_A_A_0T2C1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by T, followed by C, preceded by A, preceded by S, preceded by A, except...
S_A_A_0T2C1M1M2.rules.append(A_S_A_A_0T2C1M1M2M3)
A_A_0T2C1M1.rules.append(S_A_A_0T2C1M1M2)
A_0T2C1.rules.append(A_A_0T2C1M1)
A_0T2.rules.append(A_0T2C1)
A_0T2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before A, followed by T, followed by V, except...
A_A_0T2V1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by T, followed by V, preceded by A, except...
L_A_A_0T2V1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by T, followed by V, preceded by A, preceded by L, except...
V_L_A_A_0T2V1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by T, followed by V, preceded by A, preceded by L, preceded by V, except...
L_A_A_0T2V1M1M2.rules.append(V_L_A_A_0T2V1M1M2M3)
A_A_0T2V1M1.rules.append(L_A_A_0T2V1M1M2)
A_0T2V1.rules.append(A_A_0T2V1M1)
A_0T2.rules.append(A_0T2V1)
A_0T2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before A, followed by T, followed by Q, except...
A_A_0T2Q1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by T, followed by Q, preceded by A, except...
L_A_A_0T2Q1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by T, followed by Q, preceded by A, preceded by L, except...
A_L_A_A_0T2Q1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by T, followed by Q, preceded by A, preceded by L, preceded by A, except...
L_A_A_0T2Q1M1M2.rules.append(A_L_A_A_0T2Q1M1M2M3)
A_A_0T2Q1M1.rules.append(L_A_A_0T2Q1M1M2)
A_0T2Q1.rules.append(A_A_0T2Q1M1)
A_0T2.rules.append(A_0T2Q1)
A_0T2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before A, followed by T, followed by S, except...
A_A_0T2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by T, followed by S, preceded by A, except...
Q_A_A_0T2S1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before A, followed by T, followed by S, preceded by A, preceded by Q, except...
A_Q_A_A_0T2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by T, followed by S, preceded by A, preceded by Q, preceded by A, except...
Q_A_A_0T2S1M1M2.rules.append(A_Q_A_A_0T2S1M1M2M3)
A_A_0T2S1M1.rules.append(Q_A_A_0T2S1M1M2)
A_0T2S1.rules.append(A_A_0T2S1M1)
A_0T2.rules.append(A_0T2S1)
A_0.rules.append(A_0T2)
A_0Y2 = rule.Rule(2, "Y", False, -1) # Never cleaves before A, followed by Y, except...
A_0Y2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before A, followed by Y, followed by A, except...
A_A_0Y2A1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by Y, followed by A, preceded by A, except...
L_A_A_0Y2A1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by Y, followed by A, preceded by A, preceded by L, except...
A_L_A_A_0Y2A1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by Y, followed by A, preceded by A, preceded by L, preceded by A, except...
L_A_A_0Y2A1M1M2.rules.append(A_L_A_A_0Y2A1M1M2M3)
A_A_0Y2A1M1.rules.append(L_A_A_0Y2A1M1M2)
A_0Y2A1.rules.append(A_A_0Y2A1M1)
A_0Y2.rules.append(A_0Y2A1)
A_0Y2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before A, followed by Y, followed by D, except...
A_A_0Y2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by Y, followed by D, preceded by A, except...
V_A_A_0Y2D1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before A, followed by Y, followed by D, preceded by A, preceded by V, except...
A_V_A_A_0Y2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by Y, followed by D, preceded by A, preceded by V, preceded by A, except...
V_A_A_0Y2D1M1M2.rules.append(A_V_A_A_0Y2D1M1M2M3)
A_A_0Y2D1M1.rules.append(V_A_A_0Y2D1M1M2)
A_0Y2D1.rules.append(A_A_0Y2D1M1)
A_0Y2.rules.append(A_0Y2D1)
A_0Y2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before A, followed by Y, followed by E, except...
A_A_0Y2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by Y, followed by E, preceded by A, except...
V_A_A_0Y2E1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before A, followed by Y, followed by E, preceded by A, preceded by V, except...
A_V_A_A_0Y2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by Y, followed by E, preceded by A, preceded by V, preceded by A, except...
V_A_A_0Y2E1M1M2.rules.append(A_V_A_A_0Y2E1M1M2M3)
A_A_0Y2E1M1.rules.append(V_A_A_0Y2E1M1M2)
A_0Y2E1.rules.append(A_A_0Y2E1M1)
A_0Y2.rules.append(A_0Y2E1)
A_0Y2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before A, followed by Y, followed by Q, except...
A_A_0Y2Q1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by Y, followed by Q, preceded by A, except...
S_A_A_0Y2Q1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before A, followed by Y, followed by Q, preceded by A, preceded by S, except...
A_S_A_A_0Y2Q1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by Y, followed by Q, preceded by A, preceded by S, preceded by A, except...
S_A_A_0Y2Q1M1M2.rules.append(A_S_A_A_0Y2Q1M1M2M3)
A_A_0Y2Q1M1.rules.append(S_A_A_0Y2Q1M1M2)
A_0Y2Q1.rules.append(A_A_0Y2Q1M1)
A_0Y2.rules.append(A_0Y2Q1)
A_0.rules.append(A_0Y2)
A_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before A, followed by P, except...
A_0P2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before A, followed by P, followed by V, except...
A_A_0P2V1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by P, followed by V, preceded by A, except...
R_A_A_0P2V1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before A, followed by P, followed by V, preceded by A, preceded by R, except...
S_R_A_A_0P2V1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by P, followed by V, preceded by A, preceded by R, preceded by S, except...
R_A_A_0P2V1M1M2.rules.append(S_R_A_A_0P2V1M1M2M3)
A_A_0P2V1M1.rules.append(R_A_A_0P2V1M1M2)
A_0P2V1.rules.append(A_A_0P2V1M1)
A_0P2.rules.append(A_0P2V1)
A_0P2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before A, followed by P, followed by A, except...
A_A_0P2A1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by P, followed by A, preceded by A, except...
M_A_A_0P2A1M1M2 = rule.Rule(-2, "M", False, -1) # Never cleaves before A, followed by P, followed by A, preceded by A, preceded by M, except...
A_M_A_A_0P2A1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by P, followed by A, preceded by A, preceded by M, preceded by A, except...
M_A_A_0P2A1M1M2.rules.append(A_M_A_A_0P2A1M1M2M3)
A_A_0P2A1M1.rules.append(M_A_A_0P2A1M1M2)
A_0P2A1.rules.append(A_A_0P2A1M1)
A_0P2.rules.append(A_0P2A1)
A_0P2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before A, followed by P, followed by P, except...
A_A_0P2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by P, followed by P, preceded by A, except...
A_A_A_0P2P1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before A, followed by P, followed by P, preceded by A, preceded by A, except...
A_A_A_A_0P2P1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by P, followed by P, preceded by A, preceded by A, preceded by A, except...
A_A_A_0P2P1M1M2.rules.append(A_A_A_A_0P2P1M1M2M3)
A_A_0P2P1M1.rules.append(A_A_A_0P2P1M1M2)
A_0P2P1.rules.append(A_A_0P2P1M1)
A_0P2.rules.append(A_0P2P1)
A_0P2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before A, followed by P, followed by I, except...
A_A_0P2I1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by P, followed by I, preceded by A, except...
F_A_A_0P2I1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before A, followed by P, followed by I, preceded by A, preceded by F, except...
A_F_A_A_0P2I1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by P, followed by I, preceded by A, preceded by F, preceded by A, except...
F_A_A_0P2I1M1M2.rules.append(A_F_A_A_0P2I1M1M2M3)
A_A_0P2I1M1.rules.append(F_A_A_0P2I1M1M2)
A_0P2I1.rules.append(A_A_0P2I1M1)
A_0P2.rules.append(A_0P2I1)
A_0P2Y1 = rule.Rule(1, "Y", False, -1) # Never cleaves before A, followed by P, followed by Y, except...
A_A_0P2Y1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by P, followed by Y, preceded by A, except...
L_A_A_0P2Y1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by P, followed by Y, preceded by A, preceded by L, except...
A_L_A_A_0P2Y1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by P, followed by Y, preceded by A, preceded by L, preceded by A, except...
L_A_A_0P2Y1M1M2.rules.append(A_L_A_A_0P2Y1M1M2M3)
A_A_0P2Y1M1.rules.append(L_A_A_0P2Y1M1M2)
A_0P2Y1.rules.append(A_A_0P2Y1M1)
A_0P2.rules.append(A_0P2Y1)
A_0P2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before A, followed by P, followed by L, except...
A_A_0P2L1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by P, followed by L, preceded by A, except...
Y_A_A_0P2L1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before A, followed by P, followed by L, preceded by A, preceded by Y, except...
S_Y_A_A_0P2L1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by P, followed by L, preceded by A, preceded by Y, preceded by S, except...
Y_A_A_0P2L1M1M2.rules.append(S_Y_A_A_0P2L1M1M2M3)
A_A_0P2L1M1.rules.append(Y_A_A_0P2L1M1M2)
A_0P2L1.rules.append(A_A_0P2L1M1)
A_0P2.rules.append(A_0P2L1)
A_0P2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before A, followed by P, followed by T, except...
A_A_0P2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by P, followed by T, preceded by A, except...
L_A_A_0P2T1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by P, followed by T, preceded by A, preceded by L, except...
S_L_A_A_0P2T1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by P, followed by T, preceded by A, preceded by L, preceded by S, except...
L_A_A_0P2T1M1M2.rules.append(S_L_A_A_0P2T1M1M2M3)
A_A_0P2T1M1.rules.append(L_A_A_0P2T1M1M2)
A_0P2T1.rules.append(A_A_0P2T1M1)
A_0P2.rules.append(A_0P2T1)
A_0P2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before A, followed by P, followed by D, except...
A_A_0P2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by P, followed by D, preceded by A, except...
T_A_A_0P2D1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before A, followed by P, followed by D, preceded by A, preceded by T, except...
A_T_A_A_0P2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by P, followed by D, preceded by A, preceded by T, preceded by A, except...
T_A_A_0P2D1M1M2.rules.append(A_T_A_A_0P2D1M1M2M3)
A_A_0P2D1M1.rules.append(T_A_A_0P2D1M1M2)
V_A_A_0P2D1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before A, followed by P, followed by D, preceded by A, preceded by V, except...
A_V_A_A_0P2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by P, followed by D, preceded by A, preceded by V, preceded by A, except...
V_A_A_0P2D1M1M2.rules.append(A_V_A_A_0P2D1M1M2M3)
A_A_0P2D1M1.rules.append(V_A_A_0P2D1M1M2)
A_0P2D1.rules.append(A_A_0P2D1M1)
A_0P2.rules.append(A_0P2D1)
A_0.rules.append(A_0P2)
A_0W2 = rule.Rule(2, "W", False, -1) # Never cleaves before A, followed by W, except...
A_0W2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before A, followed by W, followed by S, except...
A_A_0W2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by W, followed by S, preceded by A, except...
V_A_A_0W2S1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before A, followed by W, followed by S, preceded by A, preceded by V, except...
A_V_A_A_0W2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by W, followed by S, preceded by A, preceded by V, preceded by A, except...
V_A_A_0W2S1M1M2.rules.append(A_V_A_A_0W2S1M1M2M3)
A_A_0W2S1M1.rules.append(V_A_A_0W2S1M1M2)
A_0W2S1.rules.append(A_A_0W2S1M1)
A_0W2.rules.append(A_0W2S1)
A_0.rules.append(A_0W2)
A_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before A, followed by A, except...
A_0A2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before A, followed by A, followed by G, except...
A_A_0A2G1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by A, followed by G, preceded by A, except...
L_A_A_0A2G1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by A, followed by G, preceded by A, preceded by L, except...
A_L_A_A_0A2G1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by A, followed by G, preceded by A, preceded by L, preceded by A, except...
L_A_A_0A2G1M1M2.rules.append(A_L_A_A_0A2G1M1M2M3)
A_A_0A2G1M1.rules.append(L_A_A_0A2G1M1M2)
A_0A2G1.rules.append(A_A_0A2G1M1)
A_0A2.rules.append(A_0A2G1)
A_0A2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before A, followed by A, followed by E, except...
A_A_0A2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by A, followed by E, preceded by A, except...
W_A_A_0A2E1M1M2 = rule.Rule(-2, "W", False, -1) # Never cleaves before A, followed by A, followed by E, preceded by A, preceded by W, except...
A_W_A_A_0A2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by A, followed by E, preceded by A, preceded by W, preceded by A, except...
W_A_A_0A2E1M1M2.rules.append(A_W_A_A_0A2E1M1M2M3)
A_A_0A2E1M1.rules.append(W_A_A_0A2E1M1M2)
F_A_A_0A2E1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before A, followed by A, followed by E, preceded by A, preceded by F, except...
T_F_A_A_0A2E1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before A, followed by A, followed by E, preceded by A, preceded by F, preceded by T, except...
F_A_A_0A2E1M1M2.rules.append(T_F_A_A_0A2E1M1M2M3)
A_A_0A2E1M1.rules.append(F_A_A_0A2E1M1M2)
K_A_A_0A2E1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by A, followed by E, preceded by A, preceded by K, except...
A_K_A_A_0A2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by A, followed by E, preceded by A, preceded by K, preceded by A, except...
K_A_A_0A2E1M1M2.rules.append(A_K_A_A_0A2E1M1M2M3)
A_A_0A2E1M1.rules.append(K_A_A_0A2E1M1M2)
H_A_A_0A2E1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before A, followed by A, followed by E, preceded by A, preceded by H, except...
A_H_A_A_0A2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by A, followed by E, preceded by A, preceded by H, preceded by A, except...
H_A_A_0A2E1M1M2.rules.append(A_H_A_A_0A2E1M1M2M3)
A_A_0A2E1M1.rules.append(H_A_A_0A2E1M1M2)
Q_A_A_0A2E1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before A, followed by A, followed by E, preceded by A, preceded by Q, except...
A_Q_A_A_0A2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by A, followed by E, preceded by A, preceded by Q, preceded by A, except...
Q_A_A_0A2E1M1M2.rules.append(A_Q_A_A_0A2E1M1M2M3)
A_A_0A2E1M1.rules.append(Q_A_A_0A2E1M1M2)
E_A_A_0A2E1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before A, followed by A, followed by E, preceded by A, preceded by E, except...
A_E_A_A_0A2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by A, followed by E, preceded by A, preceded by E, preceded by A, except...
E_A_A_0A2E1M1M2.rules.append(A_E_A_A_0A2E1M1M2M3)
V_E_A_A_0A2E1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by A, followed by E, preceded by A, preceded by E, preceded by V, except...
E_A_A_0A2E1M1M2.rules.append(V_E_A_A_0A2E1M1M2M3)
A_A_0A2E1M1.rules.append(E_A_A_0A2E1M1M2)
L_A_A_0A2E1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by A, followed by E, preceded by A, preceded by L, except...
A_L_A_A_0A2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by A, followed by E, preceded by A, preceded by L, preceded by A, except...
L_A_A_0A2E1M1M2.rules.append(A_L_A_A_0A2E1M1M2M3)
S_L_A_A_0A2E1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by A, followed by E, preceded by A, preceded by L, preceded by S, except...
L_A_A_0A2E1M1M2.rules.append(S_L_A_A_0A2E1M1M2M3)
A_A_0A2E1M1.rules.append(L_A_A_0A2E1M1M2)
T_A_A_0A2E1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before A, followed by A, followed by E, preceded by A, preceded by T, except...
A_T_A_A_0A2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by A, followed by E, preceded by A, preceded by T, preceded by A, except...
T_A_A_0A2E1M1M2.rules.append(A_T_A_A_0A2E1M1M2M3)
A_A_0A2E1M1.rules.append(T_A_A_0A2E1M1M2)
N_A_A_0A2E1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before A, followed by A, followed by E, preceded by A, preceded by N, except...
A_N_A_A_0A2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by A, followed by E, preceded by A, preceded by N, preceded by A, except...
N_A_A_0A2E1M1M2.rules.append(A_N_A_A_0A2E1M1M2M3)
A_A_0A2E1M1.rules.append(N_A_A_0A2E1M1M2)
A_0A2E1.rules.append(A_A_0A2E1M1)
A_0A2.rules.append(A_0A2E1)
A_0A2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before A, followed by A, followed by D, except...
A_A_0A2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by A, followed by D, preceded by A, except...
N_A_A_0A2D1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before A, followed by A, followed by D, preceded by A, preceded by N, except...
S_N_A_A_0A2D1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by A, followed by D, preceded by A, preceded by N, preceded by S, except...
N_A_A_0A2D1M1M2.rules.append(S_N_A_A_0A2D1M1M2M3)
A_A_0A2D1M1.rules.append(N_A_A_0A2D1M1M2)
A_0A2D1.rules.append(A_A_0A2D1M1)
A_0A2.rules.append(A_0A2D1)
A_0A2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before A, followed by A, followed by P, except...
A_A_0A2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by A, followed by P, preceded by A, except...
F_A_A_0A2P1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before A, followed by A, followed by P, preceded by A, preceded by F, except...
A_F_A_A_0A2P1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by A, followed by P, preceded by A, preceded by F, preceded by A, except...
F_A_A_0A2P1M1M2.rules.append(A_F_A_A_0A2P1M1M2M3)
A_A_0A2P1M1.rules.append(F_A_A_0A2P1M1M2)
A_0A2P1.rules.append(A_A_0A2P1M1)
A_0A2.rules.append(A_0A2P1)
A_0A2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before A, followed by A, followed by T, except...
A_A_0A2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by A, followed by T, preceded by A, except...
T_A_A_0A2T1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before A, followed by A, followed by T, preceded by A, preceded by T, except...
A_T_A_A_0A2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by A, followed by T, preceded by A, preceded by T, preceded by A, except...
T_A_A_0A2T1M1M2.rules.append(A_T_A_A_0A2T1M1M2M3)
A_A_0A2T1M1.rules.append(T_A_A_0A2T1M1M2)
A_0A2T1.rules.append(A_A_0A2T1M1)
A_0A2.rules.append(A_0A2T1)
A_0A2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before A, followed by A, followed by Q, except...
A_A_0A2Q1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by A, followed by Q, preceded by A, except...
T_A_A_0A2Q1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before A, followed by A, followed by Q, preceded by A, preceded by T, except...
A_T_A_A_0A2Q1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by A, followed by Q, preceded by A, preceded by T, preceded by A, except...
T_A_A_0A2Q1M1M2.rules.append(A_T_A_A_0A2Q1M1M2M3)
A_A_0A2Q1M1.rules.append(T_A_A_0A2Q1M1M2)
A_0A2Q1.rules.append(A_A_0A2Q1M1)
A_0A2.rules.append(A_0A2Q1)
A_0.rules.append(A_0A2)
A_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before A, followed by I, except...
A_0I2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before A, followed by I, followed by D, except...
A_A_0I2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by I, followed by D, preceded by A, except...
L_A_A_0I2D1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by I, followed by D, preceded by A, preceded by L, except...
V_L_A_A_0I2D1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by I, followed by D, preceded by A, preceded by L, preceded by V, except...
L_A_A_0I2D1M1M2.rules.append(V_L_A_A_0I2D1M1M2M3)
A_A_0I2D1M1.rules.append(L_A_A_0I2D1M1M2)
A_0I2D1.rules.append(A_A_0I2D1M1)
A_0I2.rules.append(A_0I2D1)
A_0I2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before A, followed by I, followed by E, except...
A_A_0I2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by I, followed by E, preceded by A, except...
N_A_A_0I2E1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before A, followed by I, followed by E, preceded by A, preceded by N, except...
A_N_A_A_0I2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by I, followed by E, preceded by A, preceded by N, preceded by A, except...
N_A_A_0I2E1M1M2.rules.append(A_N_A_A_0I2E1M1M2M3)
A_A_0I2E1M1.rules.append(N_A_A_0I2E1M1M2)
A_0I2E1.rules.append(A_A_0I2E1M1)
A_0I2.rules.append(A_0I2E1)
A_0I2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before A, followed by I, followed by N, except...
A_A_0I2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by I, followed by N, preceded by A, except...
N_A_A_0I2N1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before A, followed by I, followed by N, preceded by A, preceded by N, except...
V_N_A_A_0I2N1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by I, followed by N, preceded by A, preceded by N, preceded by V, except...
N_A_A_0I2N1M1M2.rules.append(V_N_A_A_0I2N1M1M2M3)
A_A_0I2N1M1.rules.append(N_A_A_0I2N1M1M2)
A_0I2N1.rules.append(A_A_0I2N1M1)
A_0I2.rules.append(A_0I2N1)
A_0.rules.append(A_0I2)
A_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before A, followed by E, except...
A_0E2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before A, followed by E, followed by S, except...
A_A_0E2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by E, followed by S, preceded by A, except...
Y_A_A_0E2S1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before A, followed by E, followed by S, preceded by A, preceded by Y, except...
V_Y_A_A_0E2S1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by E, followed by S, preceded by A, preceded by Y, preceded by V, except...
Y_A_A_0E2S1M1M2.rules.append(V_Y_A_A_0E2S1M1M2M3)
A_A_0E2S1M1.rules.append(Y_A_A_0E2S1M1M2)
Q_A_A_0E2S1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before A, followed by E, followed by S, preceded by A, preceded by Q, except...
A_Q_A_A_0E2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by E, followed by S, preceded by A, preceded by Q, preceded by A, except...
Q_A_A_0E2S1M1M2.rules.append(A_Q_A_A_0E2S1M1M2M3)
A_A_0E2S1M1.rules.append(Q_A_A_0E2S1M1M2)
A_0E2S1.rules.append(A_A_0E2S1M1)
A_0E2.rules.append(A_0E2S1)
A_0E2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before A, followed by E, followed by N, except...
Q_A_0E2N1M1 = rule.Rule(-1, "Q", False, -1) # Never cleaves before A, followed by E, followed by N, preceded by Q, except...
A_Q_A_0E2N1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before A, followed by E, followed by N, preceded by Q, preceded by A, except...
N_A_Q_A_0E2N1M1M2M3 = rule.Rule(-3, "N", True, -1) # Always cleaves before A, followed by E, followed by N, preceded by Q, preceded by A, preceded by N, except...
A_Q_A_0E2N1M1M2.rules.append(N_A_Q_A_0E2N1M1M2M3)
Q_A_0E2N1M1.rules.append(A_Q_A_0E2N1M1M2)
A_0E2N1.rules.append(Q_A_0E2N1M1)
A_A_0E2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by E, followed by N, preceded by A, except...
M_A_A_0E2N1M1M2 = rule.Rule(-2, "M", False, -1) # Never cleaves before A, followed by E, followed by N, preceded by A, preceded by M, except...
V_M_A_A_0E2N1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by E, followed by N, preceded by A, preceded by M, preceded by V, except...
M_A_A_0E2N1M1M2.rules.append(V_M_A_A_0E2N1M1M2M3)
A_A_0E2N1M1.rules.append(M_A_A_0E2N1M1M2)
L_A_A_0E2N1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by E, followed by N, preceded by A, preceded by L, except...
A_L_A_A_0E2N1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by E, followed by N, preceded by A, preceded by L, preceded by A, except...
L_A_A_0E2N1M1M2.rules.append(A_L_A_A_0E2N1M1M2M3)
A_A_0E2N1M1.rules.append(L_A_A_0E2N1M1M2)
A_0E2N1.rules.append(A_A_0E2N1M1)
A_0E2.rules.append(A_0E2N1)
A_0E2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before A, followed by E, followed by D, except...
A_A_0E2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by E, followed by D, preceded by A, except...
F_A_A_0E2D1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before A, followed by E, followed by D, preceded by A, preceded by F, except...
A_F_A_A_0E2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by E, followed by D, preceded by A, preceded by F, preceded by A, except...
F_A_A_0E2D1M1M2.rules.append(A_F_A_A_0E2D1M1M2M3)
S_F_A_A_0E2D1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by E, followed by D, preceded by A, preceded by F, preceded by S, except...
F_A_A_0E2D1M1M2.rules.append(S_F_A_A_0E2D1M1M2M3)
A_A_0E2D1M1.rules.append(F_A_A_0E2D1M1M2)
A_0E2D1.rules.append(A_A_0E2D1M1)
A_0E2.rules.append(A_0E2D1)
A_0E2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before A, followed by E, followed by V, except...
A_A_0E2V1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by E, followed by V, preceded by A, except...
Q_A_A_0E2V1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before A, followed by E, followed by V, preceded by A, preceded by Q, except...
A_Q_A_A_0E2V1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by E, followed by V, preceded by A, preceded by Q, preceded by A, except...
Q_A_A_0E2V1M1M2.rules.append(A_Q_A_A_0E2V1M1M2M3)
A_A_0E2V1M1.rules.append(Q_A_A_0E2V1M1M2)
A_0E2V1.rules.append(A_A_0E2V1M1)
A_0E2.rules.append(A_0E2V1)
A_0E2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before A, followed by E, followed by G, except...
A_A_0E2G1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by E, followed by G, preceded by A, except...
Q_A_A_0E2G1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before A, followed by E, followed by G, preceded by A, preceded by Q, except...
V_Q_A_A_0E2G1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by E, followed by G, preceded by A, preceded by Q, preceded by V, except...
Q_A_A_0E2G1M1M2.rules.append(V_Q_A_A_0E2G1M1M2M3)
A_A_0E2G1M1.rules.append(Q_A_A_0E2G1M1M2)
A_0E2G1.rules.append(A_A_0E2G1M1)
A_0E2.rules.append(A_0E2G1)
A_0E2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before A, followed by E, followed by E, except...
V_A_0E2E1M1 = rule.Rule(-1, "V", False, -1) # Never cleaves before A, followed by E, followed by E, preceded by V, except...
A_V_A_0E2E1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before A, followed by E, followed by E, preceded by V, preceded by A, except...
S_A_V_A_0E2E1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by E, followed by E, preceded by V, preceded by A, preceded by S, except...
A_V_A_0E2E1M1M2.rules.append(S_A_V_A_0E2E1M1M2M3)
V_A_0E2E1M1.rules.append(A_V_A_0E2E1M1M2)
A_0E2E1.rules.append(V_A_0E2E1M1)
A_0E2.rules.append(A_0E2E1)
A_0.rules.append(A_0E2)
A_0R2 = rule.Rule(2, "R", False, -1) # Never cleaves before A, followed by R, except...
A_0R2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before A, followed by R, followed by E, except...
A_A_0R2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by R, followed by E, preceded by A, except...
Q_A_A_0R2E1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before A, followed by R, followed by E, preceded by A, preceded by Q, except...
V_Q_A_A_0R2E1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by R, followed by E, preceded by A, preceded by Q, preceded by V, except...
Q_A_A_0R2E1M1M2.rules.append(V_Q_A_A_0R2E1M1M2M3)
A_A_0R2E1M1.rules.append(Q_A_A_0R2E1M1M2)
F_A_A_0R2E1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before A, followed by R, followed by E, preceded by A, preceded by F, except...
V_F_A_A_0R2E1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by R, followed by E, preceded by A, preceded by F, preceded by V, except...
F_A_A_0R2E1M1M2.rules.append(V_F_A_A_0R2E1M1M2M3)
A_F_A_A_0R2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by R, followed by E, preceded by A, preceded by F, preceded by A, except...
F_A_A_0R2E1M1M2.rules.append(A_F_A_A_0R2E1M1M2M3)
A_A_0R2E1M1.rules.append(F_A_A_0R2E1M1M2)
A_0R2E1.rules.append(A_A_0R2E1M1)
A_0R2.rules.append(A_0R2E1)
A_0.rules.append(A_0R2)
A_0C2 = rule.Rule(2, "C", False, -1) # Never cleaves before A, followed by C, except...
A_0C2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before A, followed by C, followed by E, except...
A_A_0C2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by C, followed by E, preceded by A, except...
L_A_A_0C2E1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by C, followed by E, preceded by A, preceded by L, except...
V_L_A_A_0C2E1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by C, followed by E, preceded by A, preceded by L, preceded by V, except...
L_A_A_0C2E1M1M2.rules.append(V_L_A_A_0C2E1M1M2M3)
A_A_0C2E1M1.rules.append(L_A_A_0C2E1M1M2)
A_0C2E1.rules.append(A_A_0C2E1M1)
A_0C2.rules.append(A_0C2E1)
A_0C2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before A, followed by C, followed by V, except...
A_A_0C2V1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by C, followed by V, preceded by A, except...
Q_A_A_0C2V1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before A, followed by C, followed by V, preceded by A, preceded by Q, except...
I_Q_A_A_0C2V1M1M2M3 = rule.Rule(-3, "I", True, -1) # Always cleaves before A, followed by C, followed by V, preceded by A, preceded by Q, preceded by I, except...
Q_A_A_0C2V1M1M2.rules.append(I_Q_A_A_0C2V1M1M2M3)
A_A_0C2V1M1.rules.append(Q_A_A_0C2V1M1M2)
A_0C2V1.rules.append(A_A_0C2V1M1)
A_0C2.rules.append(A_0C2V1)
A_0.rules.append(A_0C2)
A_0Q2 = rule.Rule(2, "Q", False, -1) # Never cleaves before A, followed by Q, except...
A_0Q2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before A, followed by Q, followed by P, except...
A_A_0Q2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by Q, followed by P, preceded by A, except...
F_A_A_0Q2P1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before A, followed by Q, followed by P, preceded by A, preceded by F, except...
S_F_A_A_0Q2P1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by Q, followed by P, preceded by A, preceded by F, preceded by S, except...
F_A_A_0Q2P1M1M2.rules.append(S_F_A_A_0Q2P1M1M2M3)
T_F_A_A_0Q2P1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before A, followed by Q, followed by P, preceded by A, preceded by F, preceded by T, except...
F_A_A_0Q2P1M1M2.rules.append(T_F_A_A_0Q2P1M1M2M3)
A_A_0Q2P1M1.rules.append(F_A_A_0Q2P1M1M2)
Q_A_A_0Q2P1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before A, followed by Q, followed by P, preceded by A, preceded by Q, except...
A_Q_A_A_0Q2P1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by Q, followed by P, preceded by A, preceded by Q, preceded by A, except...
Q_A_A_0Q2P1M1M2.rules.append(A_Q_A_A_0Q2P1M1M2M3)
A_A_0Q2P1M1.rules.append(Q_A_A_0Q2P1M1M2)
A_0Q2P1.rules.append(A_A_0Q2P1M1)
G_A_0Q2P1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before A, followed by Q, followed by P, preceded by G, except...
H_G_A_0Q2P1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before A, followed by Q, followed by P, preceded by G, preceded by H, except...
A_H_G_A_0Q2P1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by Q, followed by P, preceded by G, preceded by H, preceded by A, except...
H_G_A_0Q2P1M1M2.rules.append(A_H_G_A_0Q2P1M1M2M3)
G_A_0Q2P1M1.rules.append(H_G_A_0Q2P1M1M2)
A_0Q2P1.rules.append(G_A_0Q2P1M1)
A_0Q2.rules.append(A_0Q2P1)
A_0Q2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before A, followed by Q, followed by E, except...
A_A_0Q2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by Q, followed by E, preceded by A, except...
F_A_A_0Q2E1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before A, followed by Q, followed by E, preceded by A, preceded by F, except...
A_F_A_A_0Q2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by Q, followed by E, preceded by A, preceded by F, preceded by A, except...
F_A_A_0Q2E1M1M2.rules.append(A_F_A_A_0Q2E1M1M2M3)
A_A_0Q2E1M1.rules.append(F_A_A_0Q2E1M1M2)
M_A_A_0Q2E1M1M2 = rule.Rule(-2, "M", False, -1) # Never cleaves before A, followed by Q, followed by E, preceded by A, preceded by M, except...
V_M_A_A_0Q2E1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by Q, followed by E, preceded by A, preceded by M, preceded by V, except...
M_A_A_0Q2E1M1M2.rules.append(V_M_A_A_0Q2E1M1M2M3)
A_A_0Q2E1M1.rules.append(M_A_A_0Q2E1M1M2)
L_A_A_0Q2E1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by Q, followed by E, preceded by A, preceded by L, except...
T_L_A_A_0Q2E1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before A, followed by Q, followed by E, preceded by A, preceded by L, preceded by T, except...
L_A_A_0Q2E1M1M2.rules.append(T_L_A_A_0Q2E1M1M2M3)
A_A_0Q2E1M1.rules.append(L_A_A_0Q2E1M1M2)
A_0Q2E1.rules.append(A_A_0Q2E1M1)
A_0Q2.rules.append(A_0Q2E1)
A_0Q2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before A, followed by Q, followed by D, except...
A_A_0Q2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by Q, followed by D, preceded by A, except...
L_A_A_0Q2D1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by Q, followed by D, preceded by A, preceded by L, except...
A_L_A_A_0Q2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by Q, followed by D, preceded by A, preceded by L, preceded by A, except...
L_A_A_0Q2D1M1M2.rules.append(A_L_A_A_0Q2D1M1M2M3)
A_A_0Q2D1M1.rules.append(L_A_A_0Q2D1M1M2)
A_0Q2D1.rules.append(A_A_0Q2D1M1)
A_0Q2.rules.append(A_0Q2D1)
A_0Q2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before A, followed by Q, followed by G, except...
A_A_0Q2G1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by Q, followed by G, preceded by A, except...
S_A_A_0Q2G1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before A, followed by Q, followed by G, preceded by A, preceded by S, except...
A_S_A_A_0Q2G1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by Q, followed by G, preceded by A, preceded by S, preceded by A, except...
S_A_A_0Q2G1M1M2.rules.append(A_S_A_A_0Q2G1M1M2M3)
A_A_0Q2G1M1.rules.append(S_A_A_0Q2G1M1M2)
A_0Q2G1.rules.append(A_A_0Q2G1M1)
A_0Q2.rules.append(A_0Q2G1)
A_0.rules.append(A_0Q2)
A_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before A, followed by G, except...
A_0G2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before A, followed by G, followed by A, except...
A_A_0G2A1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by G, followed by A, preceded by A, except...
L_A_A_0G2A1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by G, followed by A, preceded by A, preceded by L, except...
S_L_A_A_0G2A1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by G, followed by A, preceded by A, preceded by L, preceded by S, except...
L_A_A_0G2A1M1M2.rules.append(S_L_A_A_0G2A1M1M2M3)
A_A_0G2A1M1.rules.append(L_A_A_0G2A1M1M2)
A_0G2A1.rules.append(A_A_0G2A1M1)
A_0G2.rules.append(A_0G2A1)
A_0G2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before A, followed by G, followed by N, except...
A_A_0G2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by G, followed by N, preceded by A, except...
W_A_A_0G2N1M1M2 = rule.Rule(-2, "W", False, -1) # Never cleaves before A, followed by G, followed by N, preceded by A, preceded by W, except...
V_W_A_A_0G2N1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by G, followed by N, preceded by A, preceded by W, preceded by V, except...
W_A_A_0G2N1M1M2.rules.append(V_W_A_A_0G2N1M1M2M3)
A_A_0G2N1M1.rules.append(W_A_A_0G2N1M1M2)
A_0G2N1.rules.append(A_A_0G2N1M1)
A_0G2.rules.append(A_0G2N1)
A_0G2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before A, followed by G, followed by E, except...
A_A_0G2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by G, followed by E, preceded by A, except...
N_A_A_0G2E1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before A, followed by G, followed by E, preceded by A, preceded by N, except...
A_N_A_A_0G2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by G, followed by E, preceded by A, preceded by N, preceded by A, except...
N_A_A_0G2E1M1M2.rules.append(A_N_A_A_0G2E1M1M2M3)
A_A_0G2E1M1.rules.append(N_A_A_0G2E1M1M2)
A_0G2E1.rules.append(A_A_0G2E1M1)
G_A_0G2E1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before A, followed by G, followed by E, preceded by G, except...
Y_G_A_0G2E1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before A, followed by G, followed by E, preceded by G, preceded by Y, except...
V_Y_G_A_0G2E1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by G, followed by E, preceded by G, preceded by Y, preceded by V, except...
Y_G_A_0G2E1M1M2.rules.append(V_Y_G_A_0G2E1M1M2M3)
G_A_0G2E1M1.rules.append(Y_G_A_0G2E1M1M2)
A_0G2E1.rules.append(G_A_0G2E1M1)
A_0G2.rules.append(A_0G2E1)
A_0G2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before A, followed by G, followed by S, except...
A_A_0G2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by G, followed by S, preceded by A, except...
L_A_A_0G2S1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by G, followed by S, preceded by A, preceded by L, except...
A_L_A_A_0G2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by G, followed by S, preceded by A, preceded by L, preceded by A, except...
L_A_A_0G2S1M1M2.rules.append(A_L_A_A_0G2S1M1M2M3)
A_A_0G2S1M1.rules.append(L_A_A_0G2S1M1M2)
A_0G2S1.rules.append(A_A_0G2S1M1)
A_0G2.rules.append(A_0G2S1)
A_0G2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before A, followed by G, followed by K, except...
A_A_0G2K1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by G, followed by K, preceded by A, except...
M_A_A_0G2K1M1M2 = rule.Rule(-2, "M", False, -1) # Never cleaves before A, followed by G, followed by K, preceded by A, preceded by M, except...
A_M_A_A_0G2K1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by G, followed by K, preceded by A, preceded by M, preceded by A, except...
M_A_A_0G2K1M1M2.rules.append(A_M_A_A_0G2K1M1M2M3)
A_A_0G2K1M1.rules.append(M_A_A_0G2K1M1M2)
L_A_A_0G2K1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by G, followed by K, preceded by A, preceded by L, except...
A_L_A_A_0G2K1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by G, followed by K, preceded by A, preceded by L, preceded by A, except...
L_A_A_0G2K1M1M2.rules.append(A_L_A_A_0G2K1M1M2M3)
A_A_0G2K1M1.rules.append(L_A_A_0G2K1M1M2)
A_0G2K1.rules.append(A_A_0G2K1M1)
A_0G2.rules.append(A_0G2K1)
A_0G2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before A, followed by G, followed by P, except...
A_A_0G2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by G, followed by P, preceded by A, except...
L_A_A_0G2P1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by G, followed by P, preceded by A, preceded by L, except...
V_L_A_A_0G2P1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by G, followed by P, preceded by A, preceded by L, preceded by V, except...
L_A_A_0G2P1M1M2.rules.append(V_L_A_A_0G2P1M1M2M3)
A_A_0G2P1M1.rules.append(L_A_A_0G2P1M1M2)
A_0G2P1.rules.append(A_A_0G2P1M1)
A_0G2.rules.append(A_0G2P1)
A_0.rules.append(A_0G2)
A_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before A, followed by V, except...
A_0V2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before A, followed by V, followed by P, except...
S_A_0V2P1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before A, followed by V, followed by P, preceded by S, except...
F_S_A_0V2P1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before A, followed by V, followed by P, preceded by S, preceded by F, except...
A_F_S_A_0V2P1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by V, followed by P, preceded by S, preceded by F, preceded by A, except...
F_S_A_0V2P1M1M2.rules.append(A_F_S_A_0V2P1M1M2M3)
S_A_0V2P1M1.rules.append(F_S_A_0V2P1M1M2)
A_0V2P1.rules.append(S_A_0V2P1M1)
A_0V2.rules.append(A_0V2P1)
A_0V2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before A, followed by V, followed by N, except...
A_A_0V2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by V, followed by N, preceded by A, except...
Q_A_A_0V2N1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before A, followed by V, followed by N, preceded by A, preceded by Q, except...
V_Q_A_A_0V2N1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by V, followed by N, preceded by A, preceded by Q, preceded by V, except...
Q_A_A_0V2N1M1M2.rules.append(V_Q_A_A_0V2N1M1M2M3)
A_A_0V2N1M1.rules.append(Q_A_A_0V2N1M1M2)
A_0V2N1.rules.append(A_A_0V2N1M1)
A_0V2.rules.append(A_0V2N1)
A_0V2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before A, followed by V, followed by Q, except...
A_A_0V2Q1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by V, followed by Q, preceded by A, except...
F_A_A_0V2Q1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before A, followed by V, followed by Q, preceded by A, preceded by F, except...
A_F_A_A_0V2Q1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by V, followed by Q, preceded by A, preceded by F, preceded by A, except...
F_A_A_0V2Q1M1M2.rules.append(A_F_A_A_0V2Q1M1M2M3)
A_A_0V2Q1M1.rules.append(F_A_A_0V2Q1M1M2)
A_0V2Q1.rules.append(A_A_0V2Q1M1)
A_0V2.rules.append(A_0V2Q1)
A_0V2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before A, followed by V, followed by V, except...
A_A_0V2V1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by V, followed by V, preceded by A, except...
D_A_A_0V2V1M1M2 = rule.Rule(-2, "D", False, -1) # Never cleaves before A, followed by V, followed by V, preceded by A, preceded by D, except...
A_D_A_A_0V2V1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by V, followed by V, preceded by A, preceded by D, preceded by A, except...
D_A_A_0V2V1M1M2.rules.append(A_D_A_A_0V2V1M1M2M3)
A_A_0V2V1M1.rules.append(D_A_A_0V2V1M1M2)
A_0V2V1.rules.append(A_A_0V2V1M1)
A_0V2.rules.append(A_0V2V1)
A_0V2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before A, followed by V, followed by E, except...
A_A_0V2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by V, followed by E, preceded by A, except...
N_A_A_0V2E1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before A, followed by V, followed by E, preceded by A, preceded by N, except...
V_N_A_A_0V2E1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by V, followed by E, preceded by A, preceded by N, preceded by V, except...
N_A_A_0V2E1M1M2.rules.append(V_N_A_A_0V2E1M1M2M3)
A_N_A_A_0V2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by V, followed by E, preceded by A, preceded by N, preceded by A, except...
N_A_A_0V2E1M1M2.rules.append(A_N_A_A_0V2E1M1M2M3)
A_A_0V2E1M1.rules.append(N_A_A_0V2E1M1M2)
H_A_A_0V2E1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before A, followed by V, followed by E, preceded by A, preceded by H, except...
A_H_A_A_0V2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by V, followed by E, preceded by A, preceded by H, preceded by A, except...
H_A_A_0V2E1M1M2.rules.append(A_H_A_A_0V2E1M1M2M3)
A_A_0V2E1M1.rules.append(H_A_A_0V2E1M1M2)
Y_A_A_0V2E1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before A, followed by V, followed by E, preceded by A, preceded by Y, except...
S_Y_A_A_0V2E1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by V, followed by E, preceded by A, preceded by Y, preceded by S, except...
Y_A_A_0V2E1M1M2.rules.append(S_Y_A_A_0V2E1M1M2M3)
A_A_0V2E1M1.rules.append(Y_A_A_0V2E1M1M2)
A_0V2E1.rules.append(A_A_0V2E1M1)
A_0V2.rules.append(A_0V2E1)
A_0V2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before A, followed by V, followed by D, except...
A_A_0V2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by V, followed by D, preceded by A, except...
L_A_A_0V2D1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by V, followed by D, preceded by A, preceded by L, except...
A_L_A_A_0V2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by V, followed by D, preceded by A, preceded by L, preceded by A, except...
L_A_A_0V2D1M1M2.rules.append(A_L_A_A_0V2D1M1M2M3)
A_A_0V2D1M1.rules.append(L_A_A_0V2D1M1M2)
T_A_A_0V2D1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before A, followed by V, followed by D, preceded by A, preceded by T, except...
A_T_A_A_0V2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by V, followed by D, preceded by A, preceded by T, preceded by A, except...
T_A_A_0V2D1M1M2.rules.append(A_T_A_A_0V2D1M1M2M3)
A_A_0V2D1M1.rules.append(T_A_A_0V2D1M1M2)
A_0V2D1.rules.append(A_A_0V2D1M1)
A_0V2.rules.append(A_0V2D1)
A_0V2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before A, followed by V, followed by T, except...
S_A_0V2T1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before A, followed by V, followed by T, preceded by S, except...
L_S_A_0V2T1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by V, followed by T, preceded by S, preceded by L, except...
A_L_S_A_0V2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by V, followed by T, preceded by S, preceded by L, preceded by A, except...
L_S_A_0V2T1M1M2.rules.append(A_L_S_A_0V2T1M1M2M3)
S_A_0V2T1M1.rules.append(L_S_A_0V2T1M1M2)
A_0V2T1.rules.append(S_A_0V2T1M1)
A_0V2.rules.append(A_0V2T1)
A_0.rules.append(A_0V2)
A_0D2 = rule.Rule(2, "D", False, -1) # Never cleaves before A, followed by D, except...
A_0D2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before A, followed by D, followed by G, except...
A_A_0D2G1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by D, followed by G, preceded by A, except...
H_A_A_0D2G1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before A, followed by D, followed by G, preceded by A, preceded by H, except...
A_H_A_A_0D2G1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by D, followed by G, preceded by A, preceded by H, preceded by A, except...
H_A_A_0D2G1M1M2.rules.append(A_H_A_A_0D2G1M1M2M3)
A_A_0D2G1M1.rules.append(H_A_A_0D2G1M1M2)
A_0D2G1.rules.append(A_A_0D2G1M1)
A_0D2.rules.append(A_0D2G1)
A_0D2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before A, followed by D, followed by K, except...
A_A_0D2K1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by D, followed by K, preceded by A, except...
L_A_A_0D2K1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by D, followed by K, preceded by A, preceded by L, except...
A_L_A_A_0D2K1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by D, followed by K, preceded by A, preceded by L, preceded by A, except...
L_A_A_0D2K1M1M2.rules.append(A_L_A_A_0D2K1M1M2M3)
A_A_0D2K1M1.rules.append(L_A_A_0D2K1M1M2)
A_0D2K1.rules.append(A_A_0D2K1M1)
A_0D2.rules.append(A_0D2K1)
A_0D2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before A, followed by D, followed by T, except...
A_A_0D2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by D, followed by T, preceded by A, except...
M_A_A_0D2T1M1M2 = rule.Rule(-2, "M", False, -1) # Never cleaves before A, followed by D, followed by T, preceded by A, preceded by M, except...
A_M_A_A_0D2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by D, followed by T, preceded by A, preceded by M, preceded by A, except...
M_A_A_0D2T1M1M2.rules.append(A_M_A_A_0D2T1M1M2M3)
A_A_0D2T1M1.rules.append(M_A_A_0D2T1M1M2)
A_0D2T1.rules.append(A_A_0D2T1M1)
A_0D2.rules.append(A_0D2T1)
A_0.rules.append(A_0D2)
A_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before A, followed by N, except...
A_0N2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before A, followed by N, followed by D, except...
A_A_0N2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by N, followed by D, preceded by A, except...
F_A_A_0N2D1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before A, followed by N, followed by D, preceded by A, preceded by F, except...
S_F_A_A_0N2D1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by N, followed by D, preceded by A, preceded by F, preceded by S, except...
F_A_A_0N2D1M1M2.rules.append(S_F_A_A_0N2D1M1M2M3)
A_A_0N2D1M1.rules.append(F_A_A_0N2D1M1M2)
V_A_A_0N2D1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before A, followed by N, followed by D, preceded by A, preceded by V, except...
A_V_A_A_0N2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by N, followed by D, preceded by A, preceded by V, preceded by A, except...
V_A_A_0N2D1M1M2.rules.append(A_V_A_A_0N2D1M1M2M3)
A_A_0N2D1M1.rules.append(V_A_A_0N2D1M1M2)
W_A_A_0N2D1M1M2 = rule.Rule(-2, "W", False, -1) # Never cleaves before A, followed by N, followed by D, preceded by A, preceded by W, except...
V_W_A_A_0N2D1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by N, followed by D, preceded by A, preceded by W, preceded by V, except...
W_A_A_0N2D1M1M2.rules.append(V_W_A_A_0N2D1M1M2M3)
A_A_0N2D1M1.rules.append(W_A_A_0N2D1M1M2)
A_0N2D1.rules.append(A_A_0N2D1M1)
S_A_0N2D1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before A, followed by N, followed by D, preceded by S, except...
F_S_A_0N2D1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before A, followed by N, followed by D, preceded by S, preceded by F, except...
A_F_S_A_0N2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by N, followed by D, preceded by S, preceded by F, preceded by A, except...
F_S_A_0N2D1M1M2.rules.append(A_F_S_A_0N2D1M1M2M3)
S_A_0N2D1M1.rules.append(F_S_A_0N2D1M1M2)
A_0N2D1.rules.append(S_A_0N2D1M1)
A_0N2.rules.append(A_0N2D1)
A_0N2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before A, followed by N, followed by K, except...
A_A_0N2K1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by N, followed by K, preceded by A, except...
Q_A_A_0N2K1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before A, followed by N, followed by K, preceded by A, preceded by Q, except...
A_Q_A_A_0N2K1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by N, followed by K, preceded by A, preceded by Q, preceded by A, except...
Q_A_A_0N2K1M1M2.rules.append(A_Q_A_A_0N2K1M1M2M3)
A_A_0N2K1M1.rules.append(Q_A_A_0N2K1M1M2)
A_0N2K1.rules.append(A_A_0N2K1M1)
A_0N2.rules.append(A_0N2K1)
A_0N2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before A, followed by N, followed by E, except...
A_A_0N2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by N, followed by E, preceded by A, except...
N_A_A_0N2E1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before A, followed by N, followed by E, preceded by A, preceded by N, except...
A_N_A_A_0N2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by N, followed by E, preceded by A, preceded by N, preceded by A, except...
N_A_A_0N2E1M1M2.rules.append(A_N_A_A_0N2E1M1M2M3)
A_A_0N2E1M1.rules.append(N_A_A_0N2E1M1M2)
A_0N2E1.rules.append(A_A_0N2E1M1)
A_0N2.rules.append(A_0N2E1)
A_0N2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before A, followed by N, followed by N, except...
A_A_0N2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by N, followed by N, preceded by A, except...
F_A_A_0N2N1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before A, followed by N, followed by N, preceded by A, preceded by F, except...
V_F_A_A_0N2N1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by N, followed by N, preceded by A, preceded by F, preceded by V, except...
F_A_A_0N2N1M1M2.rules.append(V_F_A_A_0N2N1M1M2M3)
A_A_0N2N1M1.rules.append(F_A_A_0N2N1M1M2)
A_0N2N1.rules.append(A_A_0N2N1M1)
A_0N2.rules.append(A_0N2N1)
A_0.rules.append(A_0N2)
A_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before A, followed by S, except...
A_0S2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before A, followed by S, followed by E, except...
A_A_0S2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by S, followed by E, preceded by A, except...
W_A_A_0S2E1M1M2 = rule.Rule(-2, "W", False, -1) # Never cleaves before A, followed by S, followed by E, preceded by A, preceded by W, except...
A_W_A_A_0S2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by S, followed by E, preceded by A, preceded by W, preceded by A, except...
W_A_A_0S2E1M1M2.rules.append(A_W_A_A_0S2E1M1M2M3)
A_A_0S2E1M1.rules.append(W_A_A_0S2E1M1M2)
F_A_A_0S2E1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before A, followed by S, followed by E, preceded by A, preceded by F, except...
A_F_A_A_0S2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by S, followed by E, preceded by A, preceded by F, preceded by A, except...
F_A_A_0S2E1M1M2.rules.append(A_F_A_A_0S2E1M1M2M3)
A_A_0S2E1M1.rules.append(F_A_A_0S2E1M1M2)
N_A_A_0S2E1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before A, followed by S, followed by E, preceded by A, preceded by N, except...
A_N_A_A_0S2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by S, followed by E, preceded by A, preceded by N, preceded by A, except...
N_A_A_0S2E1M1M2.rules.append(A_N_A_A_0S2E1M1M2M3)
A_A_0S2E1M1.rules.append(N_A_A_0S2E1M1M2)
L_A_A_0S2E1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by S, followed by E, preceded by A, preceded by L, except...
A_L_A_A_0S2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by S, followed by E, preceded by A, preceded by L, preceded by A, except...
L_A_A_0S2E1M1M2.rules.append(A_L_A_A_0S2E1M1M2M3)
A_A_0S2E1M1.rules.append(L_A_A_0S2E1M1M2)
A_0S2E1.rules.append(A_A_0S2E1M1)
A_0S2.rules.append(A_0S2E1)
A_0S2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before A, followed by S, followed by D, except...
A_A_0S2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by S, followed by D, preceded by A, except...
F_A_A_0S2D1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before A, followed by S, followed by D, preceded by A, preceded by F, except...
A_F_A_A_0S2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by S, followed by D, preceded by A, preceded by F, preceded by A, except...
F_A_A_0S2D1M1M2.rules.append(A_F_A_A_0S2D1M1M2M3)
A_A_0S2D1M1.rules.append(F_A_A_0S2D1M1M2)
M_A_A_0S2D1M1M2 = rule.Rule(-2, "M", False, -1) # Never cleaves before A, followed by S, followed by D, preceded by A, preceded by M, except...
A_M_A_A_0S2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by S, followed by D, preceded by A, preceded by M, preceded by A, except...
M_A_A_0S2D1M1M2.rules.append(A_M_A_A_0S2D1M1M2M3)
A_A_0S2D1M1.rules.append(M_A_A_0S2D1M1M2)
A_0S2D1.rules.append(A_A_0S2D1M1)
A_0S2.rules.append(A_0S2D1)
A_0S2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before A, followed by S, followed by T, except...
A_A_0S2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by S, followed by T, preceded by A, except...
V_A_A_0S2T1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before A, followed by S, followed by T, preceded by A, preceded by V, except...
S_V_A_A_0S2T1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by S, followed by T, preceded by A, preceded by V, preceded by S, except...
V_A_A_0S2T1M1M2.rules.append(S_V_A_A_0S2T1M1M2M3)
A_A_0S2T1M1.rules.append(V_A_A_0S2T1M1M2)
A_0S2T1.rules.append(A_A_0S2T1M1)
A_0S2.rules.append(A_0S2T1)
A_0S2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before A, followed by S, followed by P, except...
A_A_0S2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by S, followed by P, preceded by A, except...
L_A_A_0S2P1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by S, followed by P, preceded by A, preceded by L, except...
S_L_A_A_0S2P1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by S, followed by P, preceded by A, preceded by L, preceded by S, except...
L_A_A_0S2P1M1M2.rules.append(S_L_A_A_0S2P1M1M2M3)
A_A_0S2P1M1.rules.append(L_A_A_0S2P1M1M2)
A_0S2P1.rules.append(A_A_0S2P1M1)
A_0S2.rules.append(A_0S2P1)
A_0.rules.append(A_0S2)
A_0H2 = rule.Rule(2, "H", False, -1) # Never cleaves before A, followed by H, except...
A_0H2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before A, followed by H, followed by E, except...
A_A_0H2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by H, followed by E, preceded by A, except...
F_A_A_0H2E1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before A, followed by H, followed by E, preceded by A, preceded by F, except...
V_F_A_A_0H2E1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by H, followed by E, preceded by A, preceded by F, preceded by V, except...
F_A_A_0H2E1M1M2.rules.append(V_F_A_A_0H2E1M1M2M3)
A_A_0H2E1M1.rules.append(F_A_A_0H2E1M1M2)
A_0H2E1.rules.append(A_A_0H2E1M1)
A_0H2.rules.append(A_0H2E1)
A_0.rules.append(A_0H2)
A_0M2 = rule.Rule(2, "M", False, -1) # Never cleaves before A, followed by M, except...
A_0M2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before A, followed by M, followed by N, except...
A_A_0M2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by M, followed by N, preceded by A, except...
Y_A_A_0M2N1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before A, followed by M, followed by N, preceded by A, preceded by Y, except...
I_Y_A_A_0M2N1M1M2M3 = rule.Rule(-3, "I", True, -1) # Always cleaves before A, followed by M, followed by N, preceded by A, preceded by Y, preceded by I, except...
Y_A_A_0M2N1M1M2.rules.append(I_Y_A_A_0M2N1M1M2M3)
A_A_0M2N1M1.rules.append(Y_A_A_0M2N1M1M2)
A_0M2N1.rules.append(A_A_0M2N1M1)
A_0M2.rules.append(A_0M2N1)
A_0.rules.append(A_0M2)
ENZ.append(A_0)

V_0 = rule.Rule(0, "V", False, 0) # Never cleaves before V, except...
V_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before V, followed by I, except...
V_0I2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before V, followed by I, followed by N, except...
A_V_0I2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before V, followed by I, followed by N, preceded by A, except...
F_A_V_0I2N1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before V, followed by I, followed by N, preceded by A, preceded by F, except...
A_F_A_V_0I2N1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before V, followed by I, followed by N, preceded by A, preceded by F, preceded by A, except...
F_A_V_0I2N1M1M2.rules.append(A_F_A_V_0I2N1M1M2M3)
A_V_0I2N1M1.rules.append(F_A_V_0I2N1M1M2)
V_0I2N1.rules.append(A_V_0I2N1M1)
V_0I2.rules.append(V_0I2N1)
V_0.rules.append(V_0I2)
V_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before V, followed by S, except...
V_0S2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before V, followed by S, followed by D, except...
A_V_0S2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before V, followed by S, followed by D, preceded by A, except...
H_A_V_0S2D1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before V, followed by S, followed by D, preceded by A, preceded by H, except...
A_H_A_V_0S2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before V, followed by S, followed by D, preceded by A, preceded by H, preceded by A, except...
H_A_V_0S2D1M1M2.rules.append(A_H_A_V_0S2D1M1M2M3)
A_V_0S2D1M1.rules.append(H_A_V_0S2D1M1M2)
V_0S2D1.rules.append(A_V_0S2D1M1)
V_0S2.rules.append(V_0S2D1)
V_0.rules.append(V_0S2)
V_0K2 = rule.Rule(2, "K", False, -1) # Never cleaves before V, followed by K, except...
V_0K2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before V, followed by K, followed by E, except...
A_V_0K2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before V, followed by K, followed by E, preceded by A, except...
S_A_V_0K2E1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before V, followed by K, followed by E, preceded by A, preceded by S, except...
A_S_A_V_0K2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before V, followed by K, followed by E, preceded by A, preceded by S, preceded by A, except...
S_A_V_0K2E1M1M2.rules.append(A_S_A_V_0K2E1M1M2M3)
A_V_0K2E1M1.rules.append(S_A_V_0K2E1M1M2)
V_0K2E1.rules.append(A_V_0K2E1M1)
V_0K2.rules.append(V_0K2E1)
V_0.rules.append(V_0K2)
V_0D2 = rule.Rule(2, "D", False, -1) # Never cleaves before V, followed by D, except...
V_0D2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before V, followed by D, followed by D, except...
A_V_0D2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before V, followed by D, followed by D, preceded by A, except...
L_A_V_0D2D1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before V, followed by D, followed by D, preceded by A, preceded by L, except...
V_L_A_V_0D2D1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before V, followed by D, followed by D, preceded by A, preceded by L, preceded by V, except...
L_A_V_0D2D1M1M2.rules.append(V_L_A_V_0D2D1M1M2M3)
A_V_0D2D1M1.rules.append(L_A_V_0D2D1M1M2)
V_0D2D1.rules.append(A_V_0D2D1M1)
V_0D2.rules.append(V_0D2D1)
V_0D2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before V, followed by D, followed by E, except...
A_V_0D2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before V, followed by D, followed by E, preceded by A, except...
F_A_V_0D2E1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before V, followed by D, followed by E, preceded by A, preceded by F, except...
S_F_A_V_0D2E1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before V, followed by D, followed by E, preceded by A, preceded by F, preceded by S, except...
F_A_V_0D2E1M1M2.rules.append(S_F_A_V_0D2E1M1M2M3)
A_V_0D2E1M1.rules.append(F_A_V_0D2E1M1M2)
V_0D2E1.rules.append(A_V_0D2E1M1)
V_0D2.rules.append(V_0D2E1)
V_0.rules.append(V_0D2)
V_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before V, followed by G, except...
V_0G2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before V, followed by G, followed by T, except...
A_V_0G2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before V, followed by G, followed by T, preceded by A, except...
F_A_V_0G2T1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before V, followed by G, followed by T, preceded by A, preceded by F, except...
A_F_A_V_0G2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before V, followed by G, followed by T, preceded by A, preceded by F, preceded by A, except...
F_A_V_0G2T1M1M2.rules.append(A_F_A_V_0G2T1M1M2M3)
A_V_0G2T1M1.rules.append(F_A_V_0G2T1M1M2)
V_0G2T1.rules.append(A_V_0G2T1M1)
V_0G2.rules.append(V_0G2T1)
V_0.rules.append(V_0G2)
V_0Y2 = rule.Rule(2, "Y", False, -1) # Never cleaves before V, followed by Y, except...
V_0Y2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before V, followed by Y, followed by T, except...
A_V_0Y2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before V, followed by Y, followed by T, preceded by A, except...
L_A_V_0Y2T1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before V, followed by Y, followed by T, preceded by A, preceded by L, except...
S_L_A_V_0Y2T1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before V, followed by Y, followed by T, preceded by A, preceded by L, preceded by S, except...
L_A_V_0Y2T1M1M2.rules.append(S_L_A_V_0Y2T1M1M2M3)
A_V_0Y2T1M1.rules.append(L_A_V_0Y2T1M1M2)
S_A_V_0Y2T1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before V, followed by Y, followed by T, preceded by A, preceded by S, except...
A_S_A_V_0Y2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before V, followed by Y, followed by T, preceded by A, preceded by S, preceded by A, except...
S_A_V_0Y2T1M1M2.rules.append(A_S_A_V_0Y2T1M1M2M3)
A_V_0Y2T1M1.rules.append(S_A_V_0Y2T1M1M2)
V_0Y2T1.rules.append(A_V_0Y2T1M1)
V_0Y2.rules.append(V_0Y2T1)
V_0Y2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before V, followed by Y, followed by E, except...
A_V_0Y2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before V, followed by Y, followed by E, preceded by A, except...
F_A_V_0Y2E1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before V, followed by Y, followed by E, preceded by A, preceded by F, except...
A_F_A_V_0Y2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before V, followed by Y, followed by E, preceded by A, preceded by F, preceded by A, except...
F_A_V_0Y2E1M1M2.rules.append(A_F_A_V_0Y2E1M1M2M3)
A_V_0Y2E1M1.rules.append(F_A_V_0Y2E1M1M2)
V_0Y2E1.rules.append(A_V_0Y2E1M1)
V_0Y2.rules.append(V_0Y2E1)
V_0.rules.append(V_0Y2)
V_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before V, followed by T, except...
V_0T2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before V, followed by T, followed by T, except...
A_V_0T2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before V, followed by T, followed by T, preceded by A, except...
L_A_V_0T2T1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before V, followed by T, followed by T, preceded by A, preceded by L, except...
A_L_A_V_0T2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before V, followed by T, followed by T, preceded by A, preceded by L, preceded by A, except...
L_A_V_0T2T1M1M2.rules.append(A_L_A_V_0T2T1M1M2M3)
A_V_0T2T1M1.rules.append(L_A_V_0T2T1M1M2)
V_0T2T1.rules.append(A_V_0T2T1M1)
V_0T2.rules.append(V_0T2T1)
V_0.rules.append(V_0T2)
ENZ.append(V_0)

F_0 = rule.Rule(0, "F", False, 0) # Never cleaves before F, except...
F_0R2 = rule.Rule(2, "R", False, -1) # Never cleaves before F, followed by R, except...
F_0R2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before F, followed by R, followed by S, except...
A_F_0R2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before F, followed by R, followed by S, preceded by A, except...
G_A_F_0R2S1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before F, followed by R, followed by S, preceded by A, preceded by G, except...
A_G_A_F_0R2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before F, followed by R, followed by S, preceded by A, preceded by G, preceded by A, except...
G_A_F_0R2S1M1M2.rules.append(A_G_A_F_0R2S1M1M2M3)
A_F_0R2S1M1.rules.append(G_A_F_0R2S1M1M2)
F_0R2S1.rules.append(A_F_0R2S1M1)
F_0R2.rules.append(F_0R2S1)
F_0.rules.append(F_0R2)
F_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before F, followed by I, except...
F_0I2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before F, followed by I, followed by S, except...
A_F_0I2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before F, followed by I, followed by S, preceded by A, except...
W_A_F_0I2S1M1M2 = rule.Rule(-2, "W", False, -1) # Never cleaves before F, followed by I, followed by S, preceded by A, preceded by W, except...
S_W_A_F_0I2S1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before F, followed by I, followed by S, preceded by A, preceded by W, preceded by S, except...
W_A_F_0I2S1M1M2.rules.append(S_W_A_F_0I2S1M1M2M3)
A_F_0I2S1M1.rules.append(W_A_F_0I2S1M1M2)
F_0I2S1.rules.append(A_F_0I2S1M1)
F_0I2.rules.append(F_0I2S1)
F_0.rules.append(F_0I2)
F_0C2 = rule.Rule(2, "C", False, -1) # Never cleaves before F, followed by C, except...
F_0C2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before F, followed by C, followed by A, except...
S_F_0C2A1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before F, followed by C, followed by A, preceded by S, except...
W_S_F_0C2A1M1M2 = rule.Rule(-2, "W", False, -1) # Never cleaves before F, followed by C, followed by A, preceded by S, preceded by W, except...
A_W_S_F_0C2A1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before F, followed by C, followed by A, preceded by S, preceded by W, preceded by A, except...
W_S_F_0C2A1M1M2.rules.append(A_W_S_F_0C2A1M1M2M3)
S_F_0C2A1M1.rules.append(W_S_F_0C2A1M1M2)
F_0C2A1.rules.append(S_F_0C2A1M1)
F_0C2.rules.append(F_0C2A1)
F_0.rules.append(F_0C2)
F_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before F, followed by L, except...
F_0L2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before F, followed by L, followed by E, except...
A_F_0L2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before F, followed by L, followed by E, preceded by A, except...
F_A_F_0L2E1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before F, followed by L, followed by E, preceded by A, preceded by F, except...
T_F_A_F_0L2E1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before F, followed by L, followed by E, preceded by A, preceded by F, preceded by T, except...
F_A_F_0L2E1M1M2.rules.append(T_F_A_F_0L2E1M1M2M3)
A_F_0L2E1M1.rules.append(F_A_F_0L2E1M1M2)
F_0L2E1.rules.append(A_F_0L2E1M1)
F_0L2.rules.append(F_0L2E1)
F_0.rules.append(F_0L2)
ENZ.append(F_0)

C_0 = rule.Rule(0, "C", False, 0) # Never cleaves before C, except...
C_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before C, followed by G, except...
C_0G2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before C, followed by G, followed by G, except...
A_C_0G2G1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before C, followed by G, followed by G, preceded by A, except...
A_A_C_0G2G1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before C, followed by G, followed by G, preceded by A, preceded by A, except...
L_A_A_C_0G2G1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before C, followed by G, followed by G, preceded by A, preceded by A, preceded by L, except...
A_A_C_0G2G1M1M2.rules.append(L_A_A_C_0G2G1M1M2M3)
A_C_0G2G1M1.rules.append(A_A_C_0G2G1M1M2)
C_0G2G1.rules.append(A_C_0G2G1M1)
C_0G2.rules.append(C_0G2G1)
C_0.rules.append(C_0G2)
C_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before C, followed by V, except...
C_0V2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before C, followed by V, followed by E, except...
G_C_0V2E1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before C, followed by V, followed by E, preceded by G, except...
A_G_C_0V2E1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before C, followed by V, followed by E, preceded by G, preceded by A, except...
M_A_G_C_0V2E1M1M2M3 = rule.Rule(-3, "M", True, -1) # Always cleaves before C, followed by V, followed by E, preceded by G, preceded by A, preceded by M, except...
A_G_C_0V2E1M1M2.rules.append(M_A_G_C_0V2E1M1M2M3)
G_C_0V2E1M1.rules.append(A_G_C_0V2E1M1M2)
C_0V2E1.rules.append(G_C_0V2E1M1)
C_0V2.rules.append(C_0V2E1)
C_0.rules.append(C_0V2)
ENZ.append(C_0)

S_0 = rule.Rule(0, "S", False, 0) # Never cleaves before S, except...
S_0Q2 = rule.Rule(2, "Q", False, -1) # Never cleaves before S, followed by Q, except...
S_0Q2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before S, followed by Q, followed by P, except...
A_S_0Q2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before S, followed by Q, followed by P, preceded by A, except...
H_A_S_0Q2P1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before S, followed by Q, followed by P, preceded by A, preceded by H, except...
V_H_A_S_0Q2P1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before S, followed by Q, followed by P, preceded by A, preceded by H, preceded by V, except...
H_A_S_0Q2P1M1M2.rules.append(V_H_A_S_0Q2P1M1M2M3)
A_S_0Q2P1M1.rules.append(H_A_S_0Q2P1M1M2)
S_0Q2P1.rules.append(A_S_0Q2P1M1)
S_0Q2.rules.append(S_0Q2P1)
S_0.rules.append(S_0Q2)
S_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before S, followed by P, except...
S_0P2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before S, followed by P, followed by S, except...
A_S_0P2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before S, followed by P, followed by S, preceded by A, except...
L_A_S_0P2S1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before S, followed by P, followed by S, preceded by A, preceded by L, except...
A_L_A_S_0P2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before S, followed by P, followed by S, preceded by A, preceded by L, preceded by A, except...
L_A_S_0P2S1M1M2.rules.append(A_L_A_S_0P2S1M1M2M3)
A_S_0P2S1M1.rules.append(L_A_S_0P2S1M1M2)
S_0P2S1.rules.append(A_S_0P2S1M1)
S_0P2.rules.append(S_0P2S1)
S_0P2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before S, followed by P, followed by I, except...
A_S_0P2I1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before S, followed by P, followed by I, preceded by A, except...
V_A_S_0P2I1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before S, followed by P, followed by I, preceded by A, preceded by V, except...
A_V_A_S_0P2I1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before S, followed by P, followed by I, preceded by A, preceded by V, preceded by A, except...
V_A_S_0P2I1M1M2.rules.append(A_V_A_S_0P2I1M1M2M3)
A_S_0P2I1M1.rules.append(V_A_S_0P2I1M1M2)
S_0P2I1.rules.append(A_S_0P2I1M1)
S_0P2.rules.append(S_0P2I1)
S_0P2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before S, followed by P, followed by T, except...
A_S_0P2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before S, followed by P, followed by T, preceded by A, except...
Y_A_S_0P2T1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before S, followed by P, followed by T, preceded by A, preceded by Y, except...
A_Y_A_S_0P2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before S, followed by P, followed by T, preceded by A, preceded by Y, preceded by A, except...
Y_A_S_0P2T1M1M2.rules.append(A_Y_A_S_0P2T1M1M2M3)
A_S_0P2T1M1.rules.append(Y_A_S_0P2T1M1M2)
S_0P2T1.rules.append(A_S_0P2T1M1)
S_0P2.rules.append(S_0P2T1)
S_0.rules.append(S_0P2)
S_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before S, followed by I, except...
S_0I2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before S, followed by I, followed by N, except...
A_S_0I2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before S, followed by I, followed by N, preceded by A, except...
L_A_S_0I2N1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before S, followed by I, followed by N, preceded by A, preceded by L, except...
L_L_A_S_0I2N1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before S, followed by I, followed by N, preceded by A, preceded by L, preceded by L, except...
L_A_S_0I2N1M1M2.rules.append(L_L_A_S_0I2N1M1M2M3)
A_S_0I2N1M1.rules.append(L_A_S_0I2N1M1M2)
S_0I2N1.rules.append(A_S_0I2N1M1)
S_0I2.rules.append(S_0I2N1)
S_0.rules.append(S_0I2)
S_0M2 = rule.Rule(2, "M", False, -1) # Never cleaves before S, followed by M, except...
S_0M2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before S, followed by M, followed by Q, except...
A_S_0M2Q1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before S, followed by M, followed by Q, preceded by A, except...
F_A_S_0M2Q1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before S, followed by M, followed by Q, preceded by A, preceded by F, except...
S_F_A_S_0M2Q1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before S, followed by M, followed by Q, preceded by A, preceded by F, preceded by S, except...
F_A_S_0M2Q1M1M2.rules.append(S_F_A_S_0M2Q1M1M2M3)
A_S_0M2Q1M1.rules.append(F_A_S_0M2Q1M1M2)
S_0M2Q1.rules.append(A_S_0M2Q1M1)
S_0M2.rules.append(S_0M2Q1)
S_0M2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before S, followed by M, followed by P, except...
A_S_0M2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before S, followed by M, followed by P, preceded by A, except...
V_A_S_0M2P1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before S, followed by M, followed by P, preceded by A, preceded by V, except...
V_V_A_S_0M2P1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before S, followed by M, followed by P, preceded by A, preceded by V, preceded by V, except...
V_A_S_0M2P1M1M2.rules.append(V_V_A_S_0M2P1M1M2M3)
A_S_0M2P1M1.rules.append(V_A_S_0M2P1M1M2)
S_0M2P1.rules.append(A_S_0M2P1M1)
S_0M2.rules.append(S_0M2P1)
S_0.rules.append(S_0M2)
S_0H2 = rule.Rule(2, "H", False, -1) # Never cleaves before S, followed by H, except...
S_0H2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before S, followed by H, followed by G, except...
A_S_0H2G1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before S, followed by H, followed by G, preceded by A, except...
Y_A_S_0H2G1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before S, followed by H, followed by G, preceded by A, preceded by Y, except...
V_Y_A_S_0H2G1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before S, followed by H, followed by G, preceded by A, preceded by Y, preceded by V, except...
Y_A_S_0H2G1M1M2.rules.append(V_Y_A_S_0H2G1M1M2M3)
A_S_0H2G1M1.rules.append(Y_A_S_0H2G1M1M2)
S_0H2G1.rules.append(A_S_0H2G1M1)
S_0H2.rules.append(S_0H2G1)
S_0.rules.append(S_0H2)
S_0F2 = rule.Rule(2, "F", False, -1) # Never cleaves before S, followed by F, except...
S_0F2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before S, followed by F, followed by D, except...
A_S_0F2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before S, followed by F, followed by D, preceded by A, except...
S_A_S_0F2D1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before S, followed by F, followed by D, preceded by A, preceded by S, except...
A_S_A_S_0F2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before S, followed by F, followed by D, preceded by A, preceded by S, preceded by A, except...
S_A_S_0F2D1M1M2.rules.append(A_S_A_S_0F2D1M1M2M3)
A_S_0F2D1M1.rules.append(S_A_S_0F2D1M1M2)
S_0F2D1.rules.append(A_S_0F2D1M1)
S_0F2.rules.append(S_0F2D1)
S_0.rules.append(S_0F2)
S_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before S, followed by E, except...
S_0E2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before S, followed by E, followed by T, except...
A_S_0E2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before S, followed by E, followed by T, preceded by A, except...
F_A_S_0E2T1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before S, followed by E, followed by T, preceded by A, preceded by F, except...
S_F_A_S_0E2T1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before S, followed by E, followed by T, preceded by A, preceded by F, preceded by S, except...
F_A_S_0E2T1M1M2.rules.append(S_F_A_S_0E2T1M1M2M3)
A_S_0E2T1M1.rules.append(F_A_S_0E2T1M1M2)
S_0E2T1.rules.append(A_S_0E2T1M1)
S_0E2.rules.append(S_0E2T1)
S_0.rules.append(S_0E2)
S_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before S, followed by G, except...
S_0G2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before S, followed by G, followed by D, except...
A_S_0G2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before S, followed by G, followed by D, preceded by A, except...
M_A_S_0G2D1M1M2 = rule.Rule(-2, "M", False, -1) # Never cleaves before S, followed by G, followed by D, preceded by A, preceded by M, except...
A_M_A_S_0G2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before S, followed by G, followed by D, preceded by A, preceded by M, preceded by A, except...
M_A_S_0G2D1M1M2.rules.append(A_M_A_S_0G2D1M1M2M3)
A_S_0G2D1M1.rules.append(M_A_S_0G2D1M1M2)
S_0G2D1.rules.append(A_S_0G2D1M1)
S_0G2.rules.append(S_0G2D1)
S_0.rules.append(S_0G2)
S_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before S, followed by N, except...
S_0N2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before S, followed by N, followed by D, except...
A_S_0N2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before S, followed by N, followed by D, preceded by A, except...
H_A_S_0N2D1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before S, followed by N, followed by D, preceded by A, preceded by H, except...
A_H_A_S_0N2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before S, followed by N, followed by D, preceded by A, preceded by H, preceded by A, except...
H_A_S_0N2D1M1M2.rules.append(A_H_A_S_0N2D1M1M2M3)
A_S_0N2D1M1.rules.append(H_A_S_0N2D1M1M2)
S_0N2D1.rules.append(A_S_0N2D1M1)
S_0N2.rules.append(S_0N2D1)
S_0.rules.append(S_0N2)
ENZ.append(S_0)

H_0 = rule.Rule(0, "H", False, 0) # Never cleaves before H, except...
H_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before H, followed by E, except...
H_0E2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before H, followed by E, followed by P, except...
A_H_0E2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before H, followed by E, followed by P, preceded by A, except...
F_A_H_0E2P1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before H, followed by E, followed by P, preceded by A, preceded by F, except...
V_F_A_H_0E2P1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before H, followed by E, followed by P, preceded by A, preceded by F, preceded by V, except...
F_A_H_0E2P1M1M2.rules.append(V_F_A_H_0E2P1M1M2M3)
A_H_0E2P1M1.rules.append(F_A_H_0E2P1M1M2)
H_0E2P1.rules.append(A_H_0E2P1M1)
H_0E2.rules.append(H_0E2P1)
H_0.rules.append(H_0E2)
H_0H2 = rule.Rule(2, "H", False, -1) # Never cleaves before H, followed by H, except...
H_0H2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before H, followed by H, followed by G, except...
S_H_0H2G1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before H, followed by H, followed by G, preceded by S, except...
F_S_H_0H2G1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before H, followed by H, followed by G, preceded by S, preceded by F, except...
A_F_S_H_0H2G1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before H, followed by H, followed by G, preceded by S, preceded by F, preceded by A, except...
F_S_H_0H2G1M1M2.rules.append(A_F_S_H_0H2G1M1M2M3)
S_H_0H2G1M1.rules.append(F_S_H_0H2G1M1M2)
H_0H2G1.rules.append(S_H_0H2G1M1)
H_0H2.rules.append(H_0H2G1)
H_0.rules.append(H_0H2)
H_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before H, followed by A, except...
H_0A2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before H, followed by A, followed by E, except...
A_H_0A2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before H, followed by A, followed by E, preceded by A, except...
F_A_H_0A2E1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before H, followed by A, followed by E, preceded by A, preceded by F, except...
A_F_A_H_0A2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before H, followed by A, followed by E, preceded by A, preceded by F, preceded by A, except...
F_A_H_0A2E1M1M2.rules.append(A_F_A_H_0A2E1M1M2M3)
A_H_0A2E1M1.rules.append(F_A_H_0A2E1M1M2)
H_0A2E1.rules.append(A_H_0A2E1M1)
H_0A2.rules.append(H_0A2E1)
H_0.rules.append(H_0A2)
H_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before H, followed by G, except...
H_0G2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before H, followed by G, followed by G, except...
A_H_0G2G1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before H, followed by G, followed by G, preceded by A, except...
F_A_H_0G2G1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before H, followed by G, followed by G, preceded by A, preceded by F, except...
V_F_A_H_0G2G1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before H, followed by G, followed by G, preceded by A, preceded by F, preceded by V, except...
F_A_H_0G2G1M1M2.rules.append(V_F_A_H_0G2G1M1M2M3)
A_F_A_H_0G2G1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before H, followed by G, followed by G, preceded by A, preceded by F, preceded by A, except...
F_A_H_0G2G1M1M2.rules.append(A_F_A_H_0G2G1M1M2M3)
A_H_0G2G1M1.rules.append(F_A_H_0G2G1M1M2)
H_0G2G1.rules.append(A_H_0G2G1M1)
H_0G2.rules.append(H_0G2G1)
H_0.rules.append(H_0G2)
H_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before H, followed by V, except...
H_0V2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before H, followed by V, followed by N, except...
A_H_0V2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before H, followed by V, followed by N, preceded by A, except...
N_A_H_0V2N1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before H, followed by V, followed by N, preceded by A, preceded by N, except...
A_N_A_H_0V2N1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before H, followed by V, followed by N, preceded by A, preceded by N, preceded by A, except...
N_A_H_0V2N1M1M2.rules.append(A_N_A_H_0V2N1M1M2M3)
A_H_0V2N1M1.rules.append(N_A_H_0V2N1M1M2)
H_0V2N1.rules.append(A_H_0V2N1M1)
H_0V2.rules.append(H_0V2N1)
H_0.rules.append(H_0V2)
H_0F2 = rule.Rule(2, "F", False, -1) # Never cleaves before H, followed by F, except...
H_0F2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before H, followed by F, followed by Q, except...
A_H_0F2Q1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before H, followed by F, followed by Q, preceded by A, except...
S_A_H_0F2Q1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before H, followed by F, followed by Q, preceded by A, preceded by S, except...
A_S_A_H_0F2Q1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before H, followed by F, followed by Q, preceded by A, preceded by S, preceded by A, except...
S_A_H_0F2Q1M1M2.rules.append(A_S_A_H_0F2Q1M1M2M3)
A_H_0F2Q1M1.rules.append(S_A_H_0F2Q1M1M2)
H_0F2Q1.rules.append(A_H_0F2Q1M1)
H_0F2.rules.append(H_0F2Q1)
H_0.rules.append(H_0F2)
ENZ.append(H_0)

N_0 = rule.Rule(0, "N", False, 0) # Never cleaves before N, except...
N_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before N, followed by V, except...
N_0V2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before N, followed by V, followed by T, except...
A_N_0V2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before N, followed by V, followed by T, preceded by A, except...
K_A_N_0V2T1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before N, followed by V, followed by T, preceded by A, preceded by K, except...
I_K_A_N_0V2T1M1M2M3 = rule.Rule(-3, "I", True, -1) # Always cleaves before N, followed by V, followed by T, preceded by A, preceded by K, preceded by I, except...
K_A_N_0V2T1M1M2.rules.append(I_K_A_N_0V2T1M1M2M3)
A_N_0V2T1M1.rules.append(K_A_N_0V2T1M1M2)
N_0V2T1.rules.append(A_N_0V2T1M1)
N_0V2.rules.append(N_0V2T1)
N_0.rules.append(N_0V2)
N_0D2 = rule.Rule(2, "D", False, -1) # Never cleaves before N, followed by D, except...
N_0D2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before N, followed by D, followed by D, except...
A_N_0D2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before N, followed by D, followed by D, preceded by A, except...
Y_A_N_0D2D1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before N, followed by D, followed by D, preceded by A, preceded by Y, except...
S_Y_A_N_0D2D1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before N, followed by D, followed by D, preceded by A, preceded by Y, preceded by S, except...
Y_A_N_0D2D1M1M2.rules.append(S_Y_A_N_0D2D1M1M2M3)
A_N_0D2D1M1.rules.append(Y_A_N_0D2D1M1M2)
N_0D2D1.rules.append(A_N_0D2D1M1)
N_0D2.rules.append(N_0D2D1)
N_0.rules.append(N_0D2)
N_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before N, followed by G, except...
N_0G2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before N, followed by G, followed by E, except...
A_N_0G2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before N, followed by G, followed by E, preceded by A, except...
Q_A_N_0G2E1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before N, followed by G, followed by E, preceded by A, preceded by Q, except...
A_Q_A_N_0G2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before N, followed by G, followed by E, preceded by A, preceded by Q, preceded by A, except...
Q_A_N_0G2E1M1M2.rules.append(A_Q_A_N_0G2E1M1M2M3)
A_N_0G2E1M1.rules.append(Q_A_N_0G2E1M1M2)
N_0G2E1.rules.append(A_N_0G2E1M1)
N_0G2.rules.append(N_0G2E1)
N_0G2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before N, followed by G, followed by N, except...
A_N_0G2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before N, followed by G, followed by N, preceded by A, except...
W_A_N_0G2N1M1M2 = rule.Rule(-2, "W", False, -1) # Never cleaves before N, followed by G, followed by N, preceded by A, preceded by W, except...
A_W_A_N_0G2N1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before N, followed by G, followed by N, preceded by A, preceded by W, preceded by A, except...
W_A_N_0G2N1M1M2.rules.append(A_W_A_N_0G2N1M1M2M3)
A_N_0G2N1M1.rules.append(W_A_N_0G2N1M1M2)
N_0G2N1.rules.append(A_N_0G2N1M1)
N_0G2.rules.append(N_0G2N1)
N_0.rules.append(N_0G2)
N_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before N, followed by N, except...
N_0N2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before N, followed by N, followed by I, except...
A_N_0N2I1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before N, followed by N, followed by I, preceded by A, except...
L_A_N_0N2I1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before N, followed by N, followed by I, preceded by A, preceded by L, except...
L_L_A_N_0N2I1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before N, followed by N, followed by I, preceded by A, preceded by L, preceded by L, except...
L_A_N_0N2I1M1M2.rules.append(L_L_A_N_0N2I1M1M2M3)
A_N_0N2I1M1.rules.append(L_A_N_0N2I1M1M2)
N_0N2I1.rules.append(A_N_0N2I1M1)
N_0N2.rules.append(N_0N2I1)
N_0.rules.append(N_0N2)
N_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before N, followed by I, except...
N_0I2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before N, followed by I, followed by G, except...
G_N_0I2G1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before N, followed by I, followed by G, preceded by G, except...
Y_G_N_0I2G1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before N, followed by I, followed by G, preceded by G, preceded by Y, except...
A_Y_G_N_0I2G1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before N, followed by I, followed by G, preceded by G, preceded by Y, preceded by A, except...
Y_G_N_0I2G1M1M2.rules.append(A_Y_G_N_0I2G1M1M2M3)
G_N_0I2G1M1.rules.append(Y_G_N_0I2G1M1M2)
N_0I2G1.rules.append(G_N_0I2G1M1)
N_0I2.rules.append(N_0I2G1)
N_0.rules.append(N_0I2)
N_0K2 = rule.Rule(2, "K", False, -1) # Never cleaves before N, followed by K, except...
N_0K2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before N, followed by K, followed by D, except...
A_N_0K2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before N, followed by K, followed by D, preceded by A, except...
Y_A_N_0K2D1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before N, followed by K, followed by D, preceded by A, preceded by Y, except...
A_Y_A_N_0K2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before N, followed by K, followed by D, preceded by A, preceded by Y, preceded by A, except...
Y_A_N_0K2D1M1M2.rules.append(A_Y_A_N_0K2D1M1M2M3)
A_N_0K2D1M1.rules.append(Y_A_N_0K2D1M1M2)
N_0K2D1.rules.append(A_N_0K2D1M1)
N_0K2.rules.append(N_0K2D1)
N_0.rules.append(N_0K2)
N_0Q2 = rule.Rule(2, "Q", False, -1) # Never cleaves before N, followed by Q, except...
N_0Q2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before N, followed by Q, followed by D, except...
A_N_0Q2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before N, followed by Q, followed by D, preceded by A, except...
T_A_N_0Q2D1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before N, followed by Q, followed by D, preceded by A, preceded by T, except...
A_T_A_N_0Q2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before N, followed by Q, followed by D, preceded by A, preceded by T, preceded by A, except...
T_A_N_0Q2D1M1M2.rules.append(A_T_A_N_0Q2D1M1M2M3)
A_N_0Q2D1M1.rules.append(T_A_N_0Q2D1M1M2)
N_0Q2D1.rules.append(A_N_0Q2D1M1)
N_0Q2.rules.append(N_0Q2D1)
N_0.rules.append(N_0Q2)
N_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before N, followed by T, except...
N_0T2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before N, followed by T, followed by E, except...
A_N_0T2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before N, followed by T, followed by E, preceded by A, except...
Q_A_N_0T2E1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before N, followed by T, followed by E, preceded by A, preceded by Q, except...
L_Q_A_N_0T2E1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before N, followed by T, followed by E, preceded by A, preceded by Q, preceded by L, except...
Q_A_N_0T2E1M1M2.rules.append(L_Q_A_N_0T2E1M1M2M3)
A_N_0T2E1M1.rules.append(Q_A_N_0T2E1M1M2)
N_0T2E1.rules.append(A_N_0T2E1M1)
N_0T2.rules.append(N_0T2E1)
N_0.rules.append(N_0T2)
ENZ.append(N_0)

G_0 = rule.Rule(0, "G", False, 0) # Never cleaves before G, except...
G_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before G, followed by A, except...
G_0A2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before G, followed by A, followed by V, except...
A_G_0A2V1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before G, followed by A, followed by V, preceded by A, except...
E_A_G_0A2V1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before G, followed by A, followed by V, preceded by A, preceded by E, except...
A_E_A_G_0A2V1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before G, followed by A, followed by V, preceded by A, preceded by E, preceded by A, except...
E_A_G_0A2V1M1M2.rules.append(A_E_A_G_0A2V1M1M2M3)
A_G_0A2V1M1.rules.append(E_A_G_0A2V1M1M2)
G_0A2V1.rules.append(A_G_0A2V1M1)
G_0A2.rules.append(G_0A2V1)
G_0.rules.append(G_0A2)
G_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before G, followed by T, except...
G_0T2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before G, followed by T, followed by D, except...
A_G_0T2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before G, followed by T, followed by D, preceded by A, except...
L_A_G_0T2D1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before G, followed by T, followed by D, preceded by A, preceded by L, except...
A_L_A_G_0T2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before G, followed by T, followed by D, preceded by A, preceded by L, preceded by A, except...
L_A_G_0T2D1M1M2.rules.append(A_L_A_G_0T2D1M1M2M3)
A_G_0T2D1M1.rules.append(L_A_G_0T2D1M1M2)
G_0T2D1.rules.append(A_G_0T2D1M1)
G_0T2.rules.append(G_0T2D1)
G_0T2F1 = rule.Rule(1, "F", False, -1) # Never cleaves before G, followed by T, followed by F, except...
A_G_0T2F1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before G, followed by T, followed by F, preceded by A, except...
H_A_G_0T2F1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before G, followed by T, followed by F, preceded by A, preceded by H, except...
A_H_A_G_0T2F1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before G, followed by T, followed by F, preceded by A, preceded by H, preceded by A, except...
H_A_G_0T2F1M1M2.rules.append(A_H_A_G_0T2F1M1M2M3)
A_G_0T2F1M1.rules.append(H_A_G_0T2F1M1M2)
G_0T2F1.rules.append(A_G_0T2F1M1)
G_0T2.rules.append(G_0T2F1)
G_0T2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before G, followed by T, followed by E, except...
A_G_0T2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before G, followed by T, followed by E, preceded by A, except...
G_A_G_0T2E1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before G, followed by T, followed by E, preceded by A, preceded by G, except...
F_G_A_G_0T2E1M1M2M3 = rule.Rule(-3, "F", True, -1) # Always cleaves before G, followed by T, followed by E, preceded by A, preceded by G, preceded by F, except...
G_A_G_0T2E1M1M2.rules.append(F_G_A_G_0T2E1M1M2M3)
A_G_0T2E1M1.rules.append(G_A_G_0T2E1M1M2)
G_0T2E1.rules.append(A_G_0T2E1M1)
G_0T2.rules.append(G_0T2E1)
G_0.rules.append(G_0T2)
G_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before G, followed by E, except...
G_0E2C1 = rule.Rule(1, "C", False, -1) # Never cleaves before G, followed by E, followed by C, except...
A_G_0E2C1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before G, followed by E, followed by C, preceded by A, except...
A_A_G_0E2C1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before G, followed by E, followed by C, preceded by A, preceded by A, except...
A_A_A_G_0E2C1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before G, followed by E, followed by C, preceded by A, preceded by A, preceded by A, except...
A_A_G_0E2C1M1M2.rules.append(A_A_A_G_0E2C1M1M2M3)
A_G_0E2C1M1.rules.append(A_A_G_0E2C1M1M2)
G_0E2C1.rules.append(A_G_0E2C1M1)
G_0E2.rules.append(G_0E2C1)
G_0.rules.append(G_0E2)
G_0H2 = rule.Rule(2, "H", False, -1) # Never cleaves before G, followed by H, except...
G_0H2W1 = rule.Rule(1, "W", False, -1) # Never cleaves before G, followed by H, followed by W, except...
A_G_0H2W1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before G, followed by H, followed by W, preceded by A, except...
L_A_G_0H2W1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before G, followed by H, followed by W, preceded by A, preceded by L, except...
A_L_A_G_0H2W1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before G, followed by H, followed by W, preceded by A, preceded by L, preceded by A, except...
L_A_G_0H2W1M1M2.rules.append(A_L_A_G_0H2W1M1M2M3)
A_G_0H2W1M1.rules.append(L_A_G_0H2W1M1M2)
G_0H2W1.rules.append(A_G_0H2W1M1)
G_0H2.rules.append(G_0H2W1)
G_0.rules.append(G_0H2)
G_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before G, followed by V, except...
G_0V2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before G, followed by V, followed by T, except...
A_G_0V2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before G, followed by V, followed by T, preceded by A, except...
L_A_G_0V2T1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before G, followed by V, followed by T, preceded by A, preceded by L, except...
S_L_A_G_0V2T1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before G, followed by V, followed by T, preceded by A, preceded by L, preceded by S, except...
L_A_G_0V2T1M1M2.rules.append(S_L_A_G_0V2T1M1M2M3)
A_G_0V2T1M1.rules.append(L_A_G_0V2T1M1M2)
G_0V2T1.rules.append(A_G_0V2T1M1)
G_0V2.rules.append(G_0V2T1)
G_0V2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before G, followed by V, followed by V, except...
A_G_0V2V1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before G, followed by V, followed by V, preceded by A, except...
L_A_G_0V2V1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before G, followed by V, followed by V, preceded by A, preceded by L, except...
A_L_A_G_0V2V1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before G, followed by V, followed by V, preceded by A, preceded by L, preceded by A, except...
L_A_G_0V2V1M1M2.rules.append(A_L_A_G_0V2V1M1M2M3)
A_G_0V2V1M1.rules.append(L_A_G_0V2V1M1M2)
G_0V2V1.rules.append(A_G_0V2V1M1)
G_0V2.rules.append(G_0V2V1)
G_0V2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before G, followed by V, followed by I, except...
A_G_0V2I1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before G, followed by V, followed by I, preceded by A, except...
Q_A_G_0V2I1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before G, followed by V, followed by I, preceded by A, preceded by Q, except...
S_Q_A_G_0V2I1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before G, followed by V, followed by I, preceded by A, preceded by Q, preceded by S, except...
Q_A_G_0V2I1M1M2.rules.append(S_Q_A_G_0V2I1M1M2M3)
A_G_0V2I1M1.rules.append(Q_A_G_0V2I1M1M2)
G_0V2I1.rules.append(A_G_0V2I1M1)
G_0V2.rules.append(G_0V2I1)
G_0.rules.append(G_0V2)
G_0Y2 = rule.Rule(2, "Y", False, -1) # Never cleaves before G, followed by Y, except...
G_0Y2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before G, followed by Y, followed by A, except...
A_G_0Y2A1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before G, followed by Y, followed by A, preceded by A, except...
F_A_G_0Y2A1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before G, followed by Y, followed by A, preceded by A, preceded by F, except...
V_F_A_G_0Y2A1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before G, followed by Y, followed by A, preceded by A, preceded by F, preceded by V, except...
F_A_G_0Y2A1M1M2.rules.append(V_F_A_G_0Y2A1M1M2M3)
A_G_0Y2A1M1.rules.append(F_A_G_0Y2A1M1M2)
G_0Y2A1.rules.append(A_G_0Y2A1M1)
G_0Y2.rules.append(G_0Y2A1)
G_0.rules.append(G_0Y2)
G_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before G, followed by N, except...
G_0N2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before G, followed by N, followed by I, except...
A_G_0N2I1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before G, followed by N, followed by I, preceded by A, except...
N_A_G_0N2I1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before G, followed by N, followed by I, preceded by A, preceded by N, except...
A_N_A_G_0N2I1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before G, followed by N, followed by I, preceded by A, preceded by N, preceded by A, except...
N_A_G_0N2I1M1M2.rules.append(A_N_A_G_0N2I1M1M2M3)
A_G_0N2I1M1.rules.append(N_A_G_0N2I1M1M2)
G_0N2I1.rules.append(A_G_0N2I1M1)
G_0N2.rules.append(G_0N2I1)
G_0.rules.append(G_0N2)
G_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before G, followed by G, except...
G_0G2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before G, followed by G, followed by G, except...
A_G_0G2G1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before G, followed by G, followed by G, preceded by A, except...
I_A_G_0G2G1M1M2 = rule.Rule(-2, "I", False, -1) # Never cleaves before G, followed by G, followed by G, preceded by A, preceded by I, except...
A_I_A_G_0G2G1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before G, followed by G, followed by G, preceded by A, preceded by I, preceded by A, except...
I_A_G_0G2G1M1M2.rules.append(A_I_A_G_0G2G1M1M2M3)
A_G_0G2G1M1.rules.append(I_A_G_0G2G1M1M2)
G_0G2G1.rules.append(A_G_0G2G1M1)
G_0G2.rules.append(G_0G2G1)
G_0G2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before G, followed by G, followed by N, except...
G_G_0G2N1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before G, followed by G, followed by N, preceded by G, except...
G_G_G_0G2N1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before G, followed by G, followed by N, preceded by G, preceded by G, except...
L_G_G_G_0G2N1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before G, followed by G, followed by N, preceded by G, preceded by G, preceded by L, except...
G_G_G_0G2N1M1M2.rules.append(L_G_G_G_0G2N1M1M2M3)
G_G_0G2N1M1.rules.append(G_G_G_0G2N1M1M2)
G_0G2N1.rules.append(G_G_0G2N1M1)
G_0G2.rules.append(G_0G2N1)
G_0.rules.append(G_0G2)
G_0F2 = rule.Rule(2, "F", False, -1) # Never cleaves before G, followed by F, except...
G_0F2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before G, followed by F, followed by L, except...
A_G_0F2L1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before G, followed by F, followed by L, preceded by A, except...
F_A_G_0F2L1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before G, followed by F, followed by L, preceded by A, preceded by F, except...
V_F_A_G_0F2L1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before G, followed by F, followed by L, preceded by A, preceded by F, preceded by V, except...
F_A_G_0F2L1M1M2.rules.append(V_F_A_G_0F2L1M1M2M3)
A_G_0F2L1M1.rules.append(F_A_G_0F2L1M1M2)
G_0F2L1.rules.append(A_G_0F2L1M1)
G_0F2.rules.append(G_0F2L1)
G_0.rules.append(G_0F2)
ENZ.append(G_0)

E_0 = rule.Rule(0, "E", False, 0) # Never cleaves before E, except...
E_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before E, followed by A, except...
E_0A2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before E, followed by A, followed by S, except...
A_E_0A2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by A, followed by S, preceded by A, except...
M_A_E_0A2S1M1M2 = rule.Rule(-2, "M", False, -1) # Never cleaves before E, followed by A, followed by S, preceded by A, preceded by M, except...
A_M_A_E_0A2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before E, followed by A, followed by S, preceded by A, preceded by M, preceded by A, except...
M_A_E_0A2S1M1M2.rules.append(A_M_A_E_0A2S1M1M2M3)
A_E_0A2S1M1.rules.append(M_A_E_0A2S1M1M2)
E_0A2S1.rules.append(A_E_0A2S1M1)
E_0A2.rules.append(E_0A2S1)
E_0A2M1 = rule.Rule(1, "M", False, -1) # Never cleaves before E, followed by A, followed by M, except...
A_E_0A2M1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by A, followed by M, preceded by A, except...
A_A_E_0A2M1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before E, followed by A, followed by M, preceded by A, preceded by A, except...
A_A_A_E_0A2M1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before E, followed by A, followed by M, preceded by A, preceded by A, preceded by A, except...
A_A_E_0A2M1M1M2.rules.append(A_A_A_E_0A2M1M1M2M3)
A_E_0A2M1M1.rules.append(A_A_E_0A2M1M1M2)
E_0A2M1.rules.append(A_E_0A2M1M1)
E_0A2.rules.append(E_0A2M1)
E_0.rules.append(E_0A2)
E_0D2 = rule.Rule(2, "D", False, -1) # Never cleaves before E, followed by D, except...
E_0D2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before E, followed by D, followed by G, except...
A_E_0D2G1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by D, followed by G, preceded by A, except...
F_A_E_0D2G1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before E, followed by D, followed by G, preceded by A, preceded by F, except...
V_F_A_E_0D2G1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before E, followed by D, followed by G, preceded by A, preceded by F, preceded by V, except...
F_A_E_0D2G1M1M2.rules.append(V_F_A_E_0D2G1M1M2M3)
A_E_0D2G1M1.rules.append(F_A_E_0D2G1M1M2)
E_0D2G1.rules.append(A_E_0D2G1M1)
E_0D2.rules.append(E_0D2G1)
E_0.rules.append(E_0D2)
E_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before E, followed by T, except...
E_0T2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before E, followed by T, followed by Q, except...
A_E_0T2Q1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by T, followed by Q, preceded by A, except...
H_A_E_0T2Q1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before E, followed by T, followed by Q, preceded by A, preceded by H, except...
V_H_A_E_0T2Q1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before E, followed by T, followed by Q, preceded by A, preceded by H, preceded by V, except...
H_A_E_0T2Q1M1M2.rules.append(V_H_A_E_0T2Q1M1M2M3)
A_E_0T2Q1M1.rules.append(H_A_E_0T2Q1M1M2)
E_0T2Q1.rules.append(A_E_0T2Q1M1)
E_0T2.rules.append(E_0T2Q1)
E_0T2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before E, followed by T, followed by P, except...
A_E_0T2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by T, followed by P, preceded by A, except...
H_A_E_0T2P1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before E, followed by T, followed by P, preceded by A, preceded by H, except...
V_H_A_E_0T2P1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before E, followed by T, followed by P, preceded by A, preceded by H, preceded by V, except...
H_A_E_0T2P1M1M2.rules.append(V_H_A_E_0T2P1M1M2M3)
A_E_0T2P1M1.rules.append(H_A_E_0T2P1M1M2)
E_0T2P1.rules.append(A_E_0T2P1M1)
E_0T2.rules.append(E_0T2P1)
E_0T2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before E, followed by T, followed by E, except...
A_E_0T2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by T, followed by E, preceded by A, except...
Q_A_E_0T2E1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before E, followed by T, followed by E, preceded by A, preceded by Q, except...
V_Q_A_E_0T2E1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before E, followed by T, followed by E, preceded by A, preceded by Q, preceded by V, except...
Q_A_E_0T2E1M1M2.rules.append(V_Q_A_E_0T2E1M1M2M3)
A_E_0T2E1M1.rules.append(Q_A_E_0T2E1M1M2)
E_0T2E1.rules.append(A_E_0T2E1M1)
E_0T2.rules.append(E_0T2E1)
E_0T2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before E, followed by T, followed by S, except...
A_E_0T2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by T, followed by S, preceded by A, except...
F_A_E_0T2S1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before E, followed by T, followed by S, preceded by A, preceded by F, except...
A_F_A_E_0T2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before E, followed by T, followed by S, preceded by A, preceded by F, preceded by A, except...
F_A_E_0T2S1M1M2.rules.append(A_F_A_E_0T2S1M1M2M3)
A_E_0T2S1M1.rules.append(F_A_E_0T2S1M1M2)
E_0T2S1.rules.append(A_E_0T2S1M1)
E_0T2.rules.append(E_0T2S1)
E_0.rules.append(E_0T2)
E_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before E, followed by L, except...
E_0L2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before E, followed by L, followed by G, except...
A_E_0L2G1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by L, followed by G, preceded by A, except...
R_A_E_0L2G1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before E, followed by L, followed by G, preceded by A, preceded by R, except...
A_R_A_E_0L2G1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before E, followed by L, followed by G, preceded by A, preceded by R, preceded by A, except...
R_A_E_0L2G1M1M2.rules.append(A_R_A_E_0L2G1M1M2M3)
A_E_0L2G1M1.rules.append(R_A_E_0L2G1M1M2)
E_0L2G1.rules.append(A_E_0L2G1M1)
E_0L2.rules.append(E_0L2G1)
E_0L2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before E, followed by L, followed by N, except...
A_E_0L2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by L, followed by N, preceded by A, except...
M_A_E_0L2N1M1M2 = rule.Rule(-2, "M", False, -1) # Never cleaves before E, followed by L, followed by N, preceded by A, preceded by M, except...
A_M_A_E_0L2N1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before E, followed by L, followed by N, preceded by A, preceded by M, preceded by A, except...
M_A_E_0L2N1M1M2.rules.append(A_M_A_E_0L2N1M1M2M3)
A_E_0L2N1M1.rules.append(M_A_E_0L2N1M1M2)
Q_A_E_0L2N1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before E, followed by L, followed by N, preceded by A, preceded by Q, except...
S_Q_A_E_0L2N1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before E, followed by L, followed by N, preceded by A, preceded by Q, preceded by S, except...
Q_A_E_0L2N1M1M2.rules.append(S_Q_A_E_0L2N1M1M2M3)
A_E_0L2N1M1.rules.append(Q_A_E_0L2N1M1M2)
L_A_E_0L2N1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before E, followed by L, followed by N, preceded by A, preceded by L, except...
A_L_A_E_0L2N1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before E, followed by L, followed by N, preceded by A, preceded by L, preceded by A, except...
L_A_E_0L2N1M1M2.rules.append(A_L_A_E_0L2N1M1M2M3)
A_E_0L2N1M1.rules.append(L_A_E_0L2N1M1M2)
E_0L2N1.rules.append(A_E_0L2N1M1)
E_0L2.rules.append(E_0L2N1)
E_0L2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before E, followed by L, followed by E, except...
A_E_0L2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by L, followed by E, preceded by A, except...
F_A_E_0L2E1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before E, followed by L, followed by E, preceded by A, preceded by F, except...
A_F_A_E_0L2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before E, followed by L, followed by E, preceded by A, preceded by F, preceded by A, except...
F_A_E_0L2E1M1M2.rules.append(A_F_A_E_0L2E1M1M2M3)
A_E_0L2E1M1.rules.append(F_A_E_0L2E1M1M2)
E_0L2E1.rules.append(A_E_0L2E1M1)
E_0L2.rules.append(E_0L2E1)
E_0.rules.append(E_0L2)
E_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before E, followed by G, except...
E_0G2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before E, followed by G, followed by G, except...
A_E_0G2G1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by G, followed by G, preceded by A, except...
H_A_E_0G2G1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before E, followed by G, followed by G, preceded by A, preceded by H, except...
A_H_A_E_0G2G1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before E, followed by G, followed by G, preceded by A, preceded by H, preceded by A, except...
H_A_E_0G2G1M1M2.rules.append(A_H_A_E_0G2G1M1M2M3)
A_E_0G2G1M1.rules.append(H_A_E_0G2G1M1M2)
E_0G2G1.rules.append(A_E_0G2G1M1)
E_0G2.rules.append(E_0G2G1)
E_0G2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before E, followed by G, followed by D, except...
A_E_0G2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by G, followed by D, preceded by A, except...
H_A_E_0G2D1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before E, followed by G, followed by D, preceded by A, preceded by H, except...
A_H_A_E_0G2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before E, followed by G, followed by D, preceded by A, preceded by H, preceded by A, except...
H_A_E_0G2D1M1M2.rules.append(A_H_A_E_0G2D1M1M2M3)
A_E_0G2D1M1.rules.append(H_A_E_0G2D1M1M2)
E_0G2D1.rules.append(A_E_0G2D1M1)
E_0G2.rules.append(E_0G2D1)
E_0.rules.append(E_0G2)
E_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before E, followed by I, except...
E_0I2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before E, followed by I, followed by D, except...
A_E_0I2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by I, followed by D, preceded by A, except...
L_A_E_0I2D1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before E, followed by I, followed by D, preceded by A, preceded by L, except...
A_L_A_E_0I2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before E, followed by I, followed by D, preceded by A, preceded by L, preceded by A, except...
L_A_E_0I2D1M1M2.rules.append(A_L_A_E_0I2D1M1M2M3)
A_E_0I2D1M1.rules.append(L_A_E_0I2D1M1M2)
E_0I2D1.rules.append(A_E_0I2D1M1)
E_0I2.rules.append(E_0I2D1)
E_0I2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before E, followed by I, followed by A, except...
Q_E_0I2A1M1 = rule.Rule(-1, "Q", False, -1) # Never cleaves before E, followed by I, followed by A, preceded by Q, except...
Q_Q_E_0I2A1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before E, followed by I, followed by A, preceded by Q, preceded by Q, except...
G_Q_Q_E_0I2A1M1M2M3 = rule.Rule(-3, "G", True, -1) # Always cleaves before E, followed by I, followed by A, preceded by Q, preceded by Q, preceded by G, except...
Q_Q_E_0I2A1M1M2.rules.append(G_Q_Q_E_0I2A1M1M2M3)
Q_E_0I2A1M1.rules.append(Q_Q_E_0I2A1M1M2)
E_0I2A1.rules.append(Q_E_0I2A1M1)
E_0I2.rules.append(E_0I2A1)
E_0.rules.append(E_0I2)
E_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before E, followed by E, except...
E_0E2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before E, followed by E, followed by N, except...
A_E_0E2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by E, followed by N, preceded by A, except...
T_A_E_0E2N1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before E, followed by E, followed by N, preceded by A, preceded by T, except...
A_T_A_E_0E2N1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before E, followed by E, followed by N, preceded by A, preceded by T, preceded by A, except...
T_A_E_0E2N1M1M2.rules.append(A_T_A_E_0E2N1M1M2M3)
A_E_0E2N1M1.rules.append(T_A_E_0E2N1M1M2)
E_0E2N1.rules.append(A_E_0E2N1M1)
E_0E2.rules.append(E_0E2N1)
E_0.rules.append(E_0E2)
E_0K2 = rule.Rule(2, "K", False, -1) # Never cleaves before E, followed by K, except...
E_0K2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before E, followed by K, followed by G, except...
A_E_0K2G1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by K, followed by G, preceded by A, except...
H_A_E_0K2G1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before E, followed by K, followed by G, preceded by A, preceded by H, except...
A_H_A_E_0K2G1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before E, followed by K, followed by G, preceded by A, preceded by H, preceded by A, except...
H_A_E_0K2G1M1M2.rules.append(A_H_A_E_0K2G1M1M2M3)
A_E_0K2G1M1.rules.append(H_A_E_0K2G1M1M2)
E_0K2G1.rules.append(A_E_0K2G1M1)
E_0K2.rules.append(E_0K2G1)
E_0K2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before E, followed by K, followed by E, except...
A_E_0K2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by K, followed by E, preceded by A, except...
S_A_E_0K2E1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before E, followed by K, followed by E, preceded by A, preceded by S, except...
A_S_A_E_0K2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before E, followed by K, followed by E, preceded by A, preceded by S, preceded by A, except...
S_A_E_0K2E1M1M2.rules.append(A_S_A_E_0K2E1M1M2M3)
A_E_0K2E1M1.rules.append(S_A_E_0K2E1M1M2)
W_A_E_0K2E1M1M2 = rule.Rule(-2, "W", False, -1) # Never cleaves before E, followed by K, followed by E, preceded by A, preceded by W, except...
A_W_A_E_0K2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before E, followed by K, followed by E, preceded by A, preceded by W, preceded by A, except...
W_A_E_0K2E1M1M2.rules.append(A_W_A_E_0K2E1M1M2M3)
A_E_0K2E1M1.rules.append(W_A_E_0K2E1M1M2)
E_0K2E1.rules.append(A_E_0K2E1M1)
E_0K2.rules.append(E_0K2E1)
E_0.rules.append(E_0K2)
E_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before E, followed by V, except...
E_0V2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before E, followed by V, followed by T, except...
A_E_0V2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by V, followed by T, preceded by A, except...
S_A_E_0V2T1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before E, followed by V, followed by T, preceded by A, preceded by S, except...
T_S_A_E_0V2T1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before E, followed by V, followed by T, preceded by A, preceded by S, preceded by T, except...
S_A_E_0V2T1M1M2.rules.append(T_S_A_E_0V2T1M1M2M3)
A_E_0V2T1M1.rules.append(S_A_E_0V2T1M1M2)
E_0V2T1.rules.append(A_E_0V2T1M1)
E_0V2.rules.append(E_0V2T1)
E_0.rules.append(E_0V2)
E_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before E, followed by N, except...
E_0N2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before E, followed by N, followed by N, except...
A_E_0N2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by N, followed by N, preceded by A, except...
Y_A_E_0N2N1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before E, followed by N, followed by N, preceded by A, preceded by Y, except...
A_Y_A_E_0N2N1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before E, followed by N, followed by N, preceded by A, preceded by Y, preceded by A, except...
Y_A_E_0N2N1M1M2.rules.append(A_Y_A_E_0N2N1M1M2M3)
A_E_0N2N1M1.rules.append(Y_A_E_0N2N1M1M2)
E_0N2N1.rules.append(A_E_0N2N1M1)
E_0N2.rules.append(E_0N2N1)
E_0.rules.append(E_0N2)
E_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before E, followed by S, except...
E_0S2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before E, followed by S, followed by T, except...
A_E_0S2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by S, followed by T, preceded by A, except...
Q_A_E_0S2T1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before E, followed by S, followed by T, preceded by A, preceded by Q, except...
A_Q_A_E_0S2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before E, followed by S, followed by T, preceded by A, preceded by Q, preceded by A, except...
Q_A_E_0S2T1M1M2.rules.append(A_Q_A_E_0S2T1M1M2M3)
A_E_0S2T1M1.rules.append(Q_A_E_0S2T1M1M2)
F_A_E_0S2T1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before E, followed by S, followed by T, preceded by A, preceded by F, except...
A_F_A_E_0S2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before E, followed by S, followed by T, preceded by A, preceded by F, preceded by A, except...
F_A_E_0S2T1M1M2.rules.append(A_F_A_E_0S2T1M1M2M3)
A_E_0S2T1M1.rules.append(F_A_E_0S2T1M1M2)
E_0S2T1.rules.append(A_E_0S2T1M1)
E_0S2.rules.append(E_0S2T1)
E_0S2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before E, followed by S, followed by Q, except...
A_E_0S2Q1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by S, followed by Q, preceded by A, except...
L_A_E_0S2Q1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before E, followed by S, followed by Q, preceded by A, preceded by L, except...
A_L_A_E_0S2Q1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before E, followed by S, followed by Q, preceded by A, preceded by L, preceded by A, except...
L_A_E_0S2Q1M1M2.rules.append(A_L_A_E_0S2Q1M1M2M3)
A_E_0S2Q1M1.rules.append(L_A_E_0S2Q1M1M2)
E_0S2Q1.rules.append(A_E_0S2Q1M1)
E_0S2.rules.append(E_0S2Q1)
E_0S2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before E, followed by S, followed by A, except...
A_E_0S2A1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by S, followed by A, preceded by A, except...
F_A_E_0S2A1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before E, followed by S, followed by A, preceded by A, preceded by F, except...
V_F_A_E_0S2A1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before E, followed by S, followed by A, preceded by A, preceded by F, preceded by V, except...
F_A_E_0S2A1M1M2.rules.append(V_F_A_E_0S2A1M1M2M3)
A_E_0S2A1M1.rules.append(F_A_E_0S2A1M1M2)
E_0S2A1.rules.append(A_E_0S2A1M1)
E_0S2.rules.append(E_0S2A1)
E_0.rules.append(E_0S2)
E_0R2 = rule.Rule(2, "R", False, -1) # Never cleaves before E, followed by R, except...
E_0R2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before E, followed by R, followed by E, except...
A_E_0R2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by R, followed by E, preceded by A, except...
Q_A_E_0R2E1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before E, followed by R, followed by E, preceded by A, preceded by Q, except...
A_Q_A_E_0R2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before E, followed by R, followed by E, preceded by A, preceded by Q, preceded by A, except...
Q_A_E_0R2E1M1M2.rules.append(A_Q_A_E_0R2E1M1M2M3)
A_E_0R2E1M1.rules.append(Q_A_E_0R2E1M1M2)
E_0R2E1.rules.append(A_E_0R2E1M1)
E_0R2.rules.append(E_0R2E1)
E_0R2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before E, followed by R, followed by V, except...
A_E_0R2V1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by R, followed by V, preceded by A, except...
H_A_E_0R2V1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before E, followed by R, followed by V, preceded by A, preceded by H, except...
L_H_A_E_0R2V1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before E, followed by R, followed by V, preceded by A, preceded by H, preceded by L, except...
H_A_E_0R2V1M1M2.rules.append(L_H_A_E_0R2V1M1M2M3)
A_E_0R2V1M1.rules.append(H_A_E_0R2V1M1M2)
E_0R2V1.rules.append(A_E_0R2V1M1)
E_0R2.rules.append(E_0R2V1)
E_0.rules.append(E_0R2)
ENZ.append(E_0)

T_0 = rule.Rule(0, "T", False, 0) # Never cleaves before T, except...
T_0Q2 = rule.Rule(2, "Q", False, -1) # Never cleaves before T, followed by Q, except...
T_0Q2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before T, followed by Q, followed by P, except...
G_T_0Q2P1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before T, followed by Q, followed by P, preceded by G, except...
H_G_T_0Q2P1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before T, followed by Q, followed by P, preceded by G, preceded by H, except...
A_H_G_T_0Q2P1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before T, followed by Q, followed by P, preceded by G, preceded by H, preceded by A, except...
H_G_T_0Q2P1M1M2.rules.append(A_H_G_T_0Q2P1M1M2M3)
G_T_0Q2P1M1.rules.append(H_G_T_0Q2P1M1M2)
T_0Q2P1.rules.append(G_T_0Q2P1M1)
T_0Q2.rules.append(T_0Q2P1)
T_0.rules.append(T_0Q2)
T_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before T, followed by V, except...
T_0V2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before T, followed by V, followed by D, except...
A_T_0V2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before T, followed by V, followed by D, preceded by A, except...
M_A_T_0V2D1M1M2 = rule.Rule(-2, "M", False, -1) # Never cleaves before T, followed by V, followed by D, preceded by A, preceded by M, except...
L_M_A_T_0V2D1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before T, followed by V, followed by D, preceded by A, preceded by M, preceded by L, except...
M_A_T_0V2D1M1M2.rules.append(L_M_A_T_0V2D1M1M2M3)
A_T_0V2D1M1.rules.append(M_A_T_0V2D1M1M2)
T_0V2D1.rules.append(A_T_0V2D1M1)
T_0V2.rules.append(T_0V2D1)
T_0.rules.append(T_0V2)
T_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before T, followed by L, except...
T_0L2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before T, followed by L, followed by P, except...
A_T_0L2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before T, followed by L, followed by P, preceded by A, except...
N_A_T_0L2P1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before T, followed by L, followed by P, preceded by A, preceded by N, except...
A_N_A_T_0L2P1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before T, followed by L, followed by P, preceded by A, preceded by N, preceded by A, except...
N_A_T_0L2P1M1M2.rules.append(A_N_A_T_0L2P1M1M2M3)
A_T_0L2P1M1.rules.append(N_A_T_0L2P1M1M2)
F_A_T_0L2P1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before T, followed by L, followed by P, preceded by A, preceded by F, except...
A_F_A_T_0L2P1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before T, followed by L, followed by P, preceded by A, preceded by F, preceded by A, except...
F_A_T_0L2P1M1M2.rules.append(A_F_A_T_0L2P1M1M2M3)
A_T_0L2P1M1.rules.append(F_A_T_0L2P1M1M2)
T_0L2P1.rules.append(A_T_0L2P1M1)
T_0L2.rules.append(T_0L2P1)
T_0L2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before T, followed by L, followed by E, except...
A_T_0L2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before T, followed by L, followed by E, preceded by A, except...
Q_A_T_0L2E1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before T, followed by L, followed by E, preceded by A, preceded by Q, except...
V_Q_A_T_0L2E1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before T, followed by L, followed by E, preceded by A, preceded by Q, preceded by V, except...
Q_A_T_0L2E1M1M2.rules.append(V_Q_A_T_0L2E1M1M2M3)
A_Q_A_T_0L2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before T, followed by L, followed by E, preceded by A, preceded by Q, preceded by A, except...
Q_A_T_0L2E1M1M2.rules.append(A_Q_A_T_0L2E1M1M2M3)
A_T_0L2E1M1.rules.append(Q_A_T_0L2E1M1M2)
T_0L2E1.rules.append(A_T_0L2E1M1)
T_0L2.rules.append(T_0L2E1)
T_0.rules.append(T_0L2)
T_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before T, followed by P, except...
T_0P2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before T, followed by P, followed by G, except...
Q_T_0P2G1M1 = rule.Rule(-1, "Q", False, -1) # Never cleaves before T, followed by P, followed by G, preceded by Q, except...
A_Q_T_0P2G1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before T, followed by P, followed by G, preceded by Q, preceded by A, except...
F_A_Q_T_0P2G1M1M2M3 = rule.Rule(-3, "F", True, -1) # Always cleaves before T, followed by P, followed by G, preceded by Q, preceded by A, preceded by F, except...
A_Q_T_0P2G1M1M2.rules.append(F_A_Q_T_0P2G1M1M2M3)
Q_T_0P2G1M1.rules.append(A_Q_T_0P2G1M1M2)
T_0P2G1.rules.append(Q_T_0P2G1M1)
T_0P2.rules.append(T_0P2G1)
T_0.rules.append(T_0P2)
T_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before T, followed by T, except...
T_0T2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before T, followed by T, followed by E, except...
A_T_0T2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before T, followed by T, followed by E, preceded by A, except...
W_A_T_0T2E1M1M2 = rule.Rule(-2, "W", False, -1) # Never cleaves before T, followed by T, followed by E, preceded by A, preceded by W, except...
A_W_A_T_0T2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before T, followed by T, followed by E, preceded by A, preceded by W, preceded by A, except...
W_A_T_0T2E1M1M2.rules.append(A_W_A_T_0T2E1M1M2M3)
A_T_0T2E1M1.rules.append(W_A_T_0T2E1M1M2)
T_0T2E1.rules.append(A_T_0T2E1M1)
T_0T2.rules.append(T_0T2E1)
T_0.rules.append(T_0T2)
ENZ.append(T_0)

L_0 = rule.Rule(0, "L", False, 0) # Never cleaves before L, except...
L_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before L, followed by S, except...
L_0S2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before L, followed by S, followed by V, except...
A_L_0S2V1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before L, followed by S, followed by V, preceded by A, except...
N_A_L_0S2V1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before L, followed by S, followed by V, preceded by A, preceded by N, except...
A_N_A_L_0S2V1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before L, followed by S, followed by V, preceded by A, preceded by N, preceded by A, except...
N_A_L_0S2V1M1M2.rules.append(A_N_A_L_0S2V1M1M2M3)
A_L_0S2V1M1.rules.append(N_A_L_0S2V1M1M2)
L_0S2V1.rules.append(A_L_0S2V1M1)
L_0S2.rules.append(L_0S2V1)
L_0.rules.append(L_0S2)
L_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before L, followed by N, except...
L_0N2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before L, followed by N, followed by E, except...
A_L_0N2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before L, followed by N, followed by E, preceded by A, except...
W_A_L_0N2E1M1M2 = rule.Rule(-2, "W", False, -1) # Never cleaves before L, followed by N, followed by E, preceded by A, preceded by W, except...
A_W_A_L_0N2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before L, followed by N, followed by E, preceded by A, preceded by W, preceded by A, except...
W_A_L_0N2E1M1M2.rules.append(A_W_A_L_0N2E1M1M2M3)
A_L_0N2E1M1.rules.append(W_A_L_0N2E1M1M2)
L_0N2E1.rules.append(A_L_0N2E1M1)
L_0N2.rules.append(L_0N2E1)
L_0N2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before L, followed by N, followed by P, except...
A_L_0N2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before L, followed by N, followed by P, preceded by A, except...
L_A_L_0N2P1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before L, followed by N, followed by P, preceded by A, preceded by L, except...
A_L_A_L_0N2P1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before L, followed by N, followed by P, preceded by A, preceded by L, preceded by A, except...
L_A_L_0N2P1M1M2.rules.append(A_L_A_L_0N2P1M1M2M3)
A_L_0N2P1M1.rules.append(L_A_L_0N2P1M1M2)
L_0N2P1.rules.append(A_L_0N2P1M1)
L_0N2.rules.append(L_0N2P1)
L_0.rules.append(L_0N2)
L_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before L, followed by V, except...
L_0V2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before L, followed by V, followed by P, except...
A_L_0V2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before L, followed by V, followed by P, preceded by A, except...
Q_A_L_0V2P1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before L, followed by V, followed by P, preceded by A, preceded by Q, except...
L_Q_A_L_0V2P1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before L, followed by V, followed by P, preceded by A, preceded by Q, preceded by L, except...
Q_A_L_0V2P1M1M2.rules.append(L_Q_A_L_0V2P1M1M2M3)
A_L_0V2P1M1.rules.append(Q_A_L_0V2P1M1M2)
L_0V2P1.rules.append(A_L_0V2P1M1)
L_0V2.rules.append(L_0V2P1)
L_0.rules.append(L_0V2)
L_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before L, followed by L, except...
L_0L2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before L, followed by L, followed by A, except...
A_L_0L2A1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before L, followed by L, followed by A, preceded by A, except...
N_A_L_0L2A1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before L, followed by L, followed by A, preceded by A, preceded by N, except...
A_N_A_L_0L2A1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before L, followed by L, followed by A, preceded by A, preceded by N, preceded by A, except...
N_A_L_0L2A1M1M2.rules.append(A_N_A_L_0L2A1M1M2M3)
A_L_0L2A1M1.rules.append(N_A_L_0L2A1M1M2)
L_0L2A1.rules.append(A_L_0L2A1M1)
L_0L2.rules.append(L_0L2A1)
L_0.rules.append(L_0L2)
ENZ.append(L_0)

W_0 = rule.Rule(0, "W", False, 0) # Never cleaves before W, except...
W_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before W, followed by T, except...
W_0T2M1 = rule.Rule(1, "M", False, -1) # Never cleaves before W, followed by T, followed by M, except...
A_W_0T2M1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before W, followed by T, followed by M, preceded by A, except...
H_A_W_0T2M1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before W, followed by T, followed by M, preceded by A, preceded by H, except...
A_H_A_W_0T2M1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before W, followed by T, followed by M, preceded by A, preceded by H, preceded by A, except...
H_A_W_0T2M1M1M2.rules.append(A_H_A_W_0T2M1M1M2M3)
A_W_0T2M1M1.rules.append(H_A_W_0T2M1M1M2)
W_0T2M1.rules.append(A_W_0T2M1M1)
W_0T2.rules.append(W_0T2M1)
W_0.rules.append(W_0T2)
ENZ.append(W_0)

Y_0 = rule.Rule(0, "Y", False, 0) # Never cleaves before Y, except...
Y_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before Y, followed by N, except...
Y_0N2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before Y, followed by N, followed by N, except...
A_Y_0N2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Y, followed by N, followed by N, preceded by A, except...
H_A_Y_0N2N1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before Y, followed by N, followed by N, preceded by A, preceded by H, except...
A_H_A_Y_0N2N1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Y, followed by N, followed by N, preceded by A, preceded by H, preceded by A, except...
H_A_Y_0N2N1M1M2.rules.append(A_H_A_Y_0N2N1M1M2M3)
A_Y_0N2N1M1.rules.append(H_A_Y_0N2N1M1M2)
Y_0N2N1.rules.append(A_Y_0N2N1M1)
Y_0N2.rules.append(Y_0N2N1)
Y_0.rules.append(Y_0N2)
ENZ.append(Y_0)

R_0 = rule.Rule(0, "R", False, 0) # Never cleaves before R, except...
R_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before R, followed by P, except...
R_0P2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before R, followed by P, followed by N, except...
A_R_0P2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before R, followed by P, followed by N, preceded by A, except...
L_A_R_0P2N1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before R, followed by P, followed by N, preceded by A, preceded by L, except...
A_L_A_R_0P2N1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before R, followed by P, followed by N, preceded by A, preceded by L, preceded by A, except...
L_A_R_0P2N1M1M2.rules.append(A_L_A_R_0P2N1M1M2M3)
A_R_0P2N1M1.rules.append(L_A_R_0P2N1M1M2)
R_0P2N1.rules.append(A_R_0P2N1M1)
R_0P2.rules.append(R_0P2N1)
R_0.rules.append(R_0P2)
ENZ.append(R_0)

M_0 = rule.Rule(0, "M", False, 0) # Never cleaves before M, except...
M_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before M, followed by T, except...
M_0T2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before M, followed by T, followed by E, except...
A_M_0T2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before M, followed by T, followed by E, preceded by A, except...
H_A_M_0T2E1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before M, followed by T, followed by E, preceded by A, preceded by H, except...
A_H_A_M_0T2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before M, followed by T, followed by E, preceded by A, preceded by H, preceded by A, except...
H_A_M_0T2E1M1M2.rules.append(A_H_A_M_0T2E1M1M2M3)
A_M_0T2E1M1.rules.append(H_A_M_0T2E1M1M2)
M_0T2E1.rules.append(A_M_0T2E1M1)
M_0T2.rules.append(M_0T2E1)
M_0.rules.append(M_0T2)
ENZ.append(M_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "signal_peptidase-I", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1



# User-defined enzyme signalase_21kDa_component
ENZ = []

L_0 = rule.Rule(0, "L", False, 0) # Never cleaves before L, except...
L_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before L, followed by T, except...
L_0T2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before L, followed by T, followed by A, except...
S_L_0T2A1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before L, followed by T, followed by A, preceded by S, except...
H_S_L_0T2A1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before L, followed by T, followed by A, preceded by S, preceded by H, except...
V_H_S_L_0T2A1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before L, followed by T, followed by A, preceded by S, preceded by H, preceded by V, except...
H_S_L_0T2A1M1M2.rules.append(V_H_S_L_0T2A1M1M2M3)
S_L_0T2A1M1.rules.append(H_S_L_0T2A1M1M2)
L_0T2A1.rules.append(S_L_0T2A1M1)
L_0T2.rules.append(L_0T2A1)
L_0T2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before L, followed by T, followed by P, except...
S_L_0T2P1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before L, followed by T, followed by P, preceded by S, except...
V_S_L_0T2P1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before L, followed by T, followed by P, preceded by S, preceded by V, except...
A_V_S_L_0T2P1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before L, followed by T, followed by P, preceded by S, preceded by V, preceded by A, except...
V_S_L_0T2P1M1M2.rules.append(A_V_S_L_0T2P1M1M2M3)
S_L_0T2P1M1.rules.append(V_S_L_0T2P1M1M2)
L_0T2P1.rules.append(S_L_0T2P1M1)
L_0T2.rules.append(L_0T2P1)
L_0.rules.append(L_0T2)
L_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before L, followed by N, except...
L_0N2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before L, followed by N, followed by A, except...
L_L_0N2A1M1 = rule.Rule(-1, "L", False, -1) # Never cleaves before L, followed by N, followed by A, preceded by L, except...
S_L_L_0N2A1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before L, followed by N, followed by A, preceded by L, preceded by S, except...
R_S_L_L_0N2A1M1M2M3 = rule.Rule(-3, "R", True, -1) # Always cleaves before L, followed by N, followed by A, preceded by L, preceded by S, preceded by R, except...
S_L_L_0N2A1M1M2.rules.append(R_S_L_L_0N2A1M1M2M3)
L_L_0N2A1M1.rules.append(S_L_L_0N2A1M1M2)
L_0N2A1.rules.append(L_L_0N2A1M1)
L_0N2.rules.append(L_0N2A1)
L_0N2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before L, followed by N, followed by K, except...
A_L_0N2K1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before L, followed by N, followed by K, preceded by A, except...
F_A_L_0N2K1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before L, followed by N, followed by K, preceded by A, preceded by F, except...
G_F_A_L_0N2K1M1M2M3 = rule.Rule(-3, "G", True, -1) # Always cleaves before L, followed by N, followed by K, preceded by A, preceded by F, preceded by G, except...
F_A_L_0N2K1M1M2.rules.append(G_F_A_L_0N2K1M1M2M3)
A_L_0N2K1M1.rules.append(F_A_L_0N2K1M1M2)
L_0N2K1.rules.append(A_L_0N2K1M1)
L_0N2.rules.append(L_0N2K1)
L_0.rules.append(L_0N2)
L_0F2 = rule.Rule(2, "F", False, -1) # Never cleaves before L, followed by F, except...
L_0F2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before L, followed by F, followed by V, except...
A_L_0F2V1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before L, followed by F, followed by V, preceded by A, except...
S_A_L_0F2V1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before L, followed by F, followed by V, preceded by A, preceded by S, except...
T_S_A_L_0F2V1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before L, followed by F, followed by V, preceded by A, preceded by S, preceded by T, except...
S_A_L_0F2V1M1M2.rules.append(T_S_A_L_0F2V1M1M2M3)
A_L_0F2V1M1.rules.append(S_A_L_0F2V1M1M2)
L_0F2V1.rules.append(A_L_0F2V1M1)
L_0F2.rules.append(L_0F2V1)
L_0F2H1 = rule.Rule(1, "H", False, -1) # Never cleaves before L, followed by F, followed by H, except...
G_L_0F2H1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before L, followed by F, followed by H, preceded by G, except...
Q_G_L_0F2H1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before L, followed by F, followed by H, preceded by G, preceded by Q, except...
V_Q_G_L_0F2H1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before L, followed by F, followed by H, preceded by G, preceded by Q, preceded by V, except...
Q_G_L_0F2H1M1M2.rules.append(V_Q_G_L_0F2H1M1M2M3)
G_L_0F2H1M1.rules.append(Q_G_L_0F2H1M1M2)
L_0F2H1.rules.append(G_L_0F2H1M1)
L_0F2.rules.append(L_0F2H1)
L_0.rules.append(L_0F2)
L_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before L, followed by S, except...
L_0S2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before L, followed by S, followed by D, except...
S_L_0S2D1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before L, followed by S, followed by D, preceded by S, except...
S_S_L_0S2D1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before L, followed by S, followed by D, preceded by S, preceded by S, except...
V_S_S_L_0S2D1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before L, followed by S, followed by D, preceded by S, preceded by S, preceded by V, except...
S_S_L_0S2D1M1M2.rules.append(V_S_S_L_0S2D1M1M2M3)
S_L_0S2D1M1.rules.append(S_S_L_0S2D1M1M2)
L_0S2D1.rules.append(S_L_0S2D1M1)
L_0S2.rules.append(L_0S2D1)
L_0.rules.append(L_0S2)
L_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before L, followed by P, except...
L_0P2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before L, followed by P, followed by T, except...
A_L_0P2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before L, followed by P, followed by T, preceded by A, except...
L_A_L_0P2T1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before L, followed by P, followed by T, preceded by A, preceded by L, except...
A_L_A_L_0P2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before L, followed by P, followed by T, preceded by A, preceded by L, preceded by A, except...
L_A_L_0P2T1M1M2.rules.append(A_L_A_L_0P2T1M1M2M3)
A_L_0P2T1M1.rules.append(L_A_L_0P2T1M1M2)
L_0P2T1.rules.append(A_L_0P2T1M1)
L_0P2.rules.append(L_0P2T1)
L_0P2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before L, followed by P, followed by V, except...
T_L_0P2V1M1 = rule.Rule(-1, "T", False, -1) # Never cleaves before L, followed by P, followed by V, preceded by T, except...
H_T_L_0P2V1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before L, followed by P, followed by V, preceded by T, preceded by H, except...
C_H_T_L_0P2V1M1M2M3 = rule.Rule(-3, "C", True, -1) # Always cleaves before L, followed by P, followed by V, preceded by T, preceded by H, preceded by C, except...
H_T_L_0P2V1M1M2.rules.append(C_H_T_L_0P2V1M1M2M3)
T_L_0P2V1M1.rules.append(H_T_L_0P2V1M1M2)
L_0P2V1.rules.append(T_L_0P2V1M1)
L_0P2.rules.append(L_0P2V1)
L_0P2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before L, followed by P, followed by L, except...
K_L_0P2L1M1 = rule.Rule(-1, "K", False, -1) # Never cleaves before L, followed by P, followed by L, preceded by K, except...
I_K_L_0P2L1M1M2 = rule.Rule(-2, "I", False, -1) # Never cleaves before L, followed by P, followed by L, preceded by K, preceded by I, except...
E_I_K_L_0P2L1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before L, followed by P, followed by L, preceded by K, preceded by I, preceded by E, except...
I_K_L_0P2L1M1M2.rules.append(E_I_K_L_0P2L1M1M2M3)
K_L_0P2L1M1.rules.append(I_K_L_0P2L1M1M2)
L_0P2L1.rules.append(K_L_0P2L1M1)
L_0P2.rules.append(L_0P2L1)
L_0.rules.append(L_0P2)
L_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before L, followed by E, except...
L_0E2R1 = rule.Rule(1, "R", False, -1) # Never cleaves before L, followed by E, followed by R, except...
A_L_0E2R1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before L, followed by E, followed by R, preceded by A, except...
F_A_L_0E2R1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before L, followed by E, followed by R, preceded by A, preceded by F, except...
C_F_A_L_0E2R1M1M2M3 = rule.Rule(-3, "C", True, -1) # Always cleaves before L, followed by E, followed by R, preceded by A, preceded by F, preceded by C, except...
F_A_L_0E2R1M1M2.rules.append(C_F_A_L_0E2R1M1M2M3)
A_L_0E2R1M1.rules.append(F_A_L_0E2R1M1M2)
L_0E2R1.rules.append(A_L_0E2R1M1)
L_0E2.rules.append(L_0E2R1)
L_0.rules.append(L_0E2)
L_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before L, followed by I, except...
L_0I2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before L, followed by I, followed by P, except...
N_L_0I2P1M1 = rule.Rule(-1, "N", False, -1) # Never cleaves before L, followed by I, followed by P, preceded by N, except...
K_N_L_0I2P1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before L, followed by I, followed by P, preceded by N, preceded by K, except...
T_K_N_L_0I2P1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before L, followed by I, followed by P, preceded by N, preceded by K, preceded by T, except...
K_N_L_0I2P1M1M2.rules.append(T_K_N_L_0I2P1M1M2M3)
N_L_0I2P1M1.rules.append(K_N_L_0I2P1M1M2)
L_0I2P1.rules.append(N_L_0I2P1M1)
L_0I2.rules.append(L_0I2P1)
L_0I2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before L, followed by I, followed by G, except...
S_L_0I2G1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before L, followed by I, followed by G, preceded by S, except...
H_S_L_0I2G1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before L, followed by I, followed by G, preceded by S, preceded by H, except...
V_H_S_L_0I2G1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before L, followed by I, followed by G, preceded by S, preceded by H, preceded by V, except...
H_S_L_0I2G1M1M2.rules.append(V_H_S_L_0I2G1M1M2M3)
S_L_0I2G1M1.rules.append(H_S_L_0I2G1M1M2)
L_0I2G1.rules.append(S_L_0I2G1M1)
L_0I2.rules.append(L_0I2G1)
L_0.rules.append(L_0I2)
L_0C2 = rule.Rule(2, "C", False, -1) # Never cleaves before L, followed by C, except...
L_0C2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before L, followed by C, followed by N, except...
A_L_0C2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before L, followed by C, followed by N, preceded by A, except...
V_A_L_0C2N1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before L, followed by C, followed by N, preceded by A, preceded by V, except...
A_V_A_L_0C2N1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before L, followed by C, followed by N, preceded by A, preceded by V, preceded by A, except...
V_A_L_0C2N1M1M2.rules.append(A_V_A_L_0C2N1M1M2M3)
A_L_0C2N1M1.rules.append(V_A_L_0C2N1M1M2)
L_0C2N1.rules.append(A_L_0C2N1M1)
L_0C2.rules.append(L_0C2N1)
L_0.rules.append(L_0C2)
ENZ.append(L_0)

A_0 = rule.Rule(0, "A", False, 0) # Never cleaves before A, except...
A_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before A, followed by S, except...
A_0S2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before A, followed by S, followed by P, except...
A_A_0S2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by S, followed by P, preceded by A, except...
L_A_A_0S2P1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by S, followed by P, preceded by A, preceded by L, except...
V_L_A_A_0S2P1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by S, followed by P, preceded by A, preceded by L, preceded by V, except...
L_A_A_0S2P1M1M2.rules.append(V_L_A_A_0S2P1M1M2M3)
A_A_0S2P1M1.rules.append(L_A_A_0S2P1M1M2)
A_0S2P1.rules.append(A_A_0S2P1M1)
A_0S2.rules.append(A_0S2P1)
A_0S2W1 = rule.Rule(1, "W", False, -1) # Never cleaves before A, followed by S, followed by W, except...
A_A_0S2W1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by S, followed by W, preceded by A, except...
Q_A_A_0S2W1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before A, followed by S, followed by W, preceded by A, preceded by Q, except...
V_Q_A_A_0S2W1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by S, followed by W, preceded by A, preceded by Q, preceded by V, except...
Q_A_A_0S2W1M1M2.rules.append(V_Q_A_A_0S2W1M1M2M3)
A_A_0S2W1M1.rules.append(Q_A_A_0S2W1M1M2)
A_0S2W1.rules.append(A_A_0S2W1M1)
A_0S2.rules.append(A_0S2W1)
A_0S2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before A, followed by S, followed by G, except...
A_A_0S2G1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by S, followed by G, preceded by A, except...
E_A_A_0S2G1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before A, followed by S, followed by G, preceded by A, preceded by E, except...
M_E_A_A_0S2G1M1M2M3 = rule.Rule(-3, "M", True, -1) # Always cleaves before A, followed by S, followed by G, preceded by A, preceded by E, preceded by M, except...
E_A_A_0S2G1M1M2.rules.append(M_E_A_A_0S2G1M1M2M3)
A_A_0S2G1M1.rules.append(E_A_A_0S2G1M1M2)
A_0S2G1.rules.append(A_A_0S2G1M1)
A_0S2.rules.append(A_0S2G1)
A_0S2Y1 = rule.Rule(1, "Y", False, -1) # Never cleaves before A, followed by S, followed by Y, except...
K_A_0S2Y1M1 = rule.Rule(-1, "K", False, -1) # Never cleaves before A, followed by S, followed by Y, preceded by K, except...
Q_K_A_0S2Y1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before A, followed by S, followed by Y, preceded by K, preceded by Q, except...
N_Q_K_A_0S2Y1M1M2M3 = rule.Rule(-3, "N", True, -1) # Always cleaves before A, followed by S, followed by Y, preceded by K, preceded by Q, preceded by N, except...
Q_K_A_0S2Y1M1M2.rules.append(N_Q_K_A_0S2Y1M1M2M3)
K_A_0S2Y1M1.rules.append(Q_K_A_0S2Y1M1M2)
A_0S2Y1.rules.append(K_A_0S2Y1M1)
A_0S2.rules.append(A_0S2Y1)
A_0S2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before A, followed by S, followed by I, except...
A_A_0S2I1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by S, followed by I, preceded by A, except...
E_A_A_0S2I1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before A, followed by S, followed by I, preceded by A, preceded by E, except...
S_E_A_A_0S2I1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by S, followed by I, preceded by A, preceded by E, preceded by S, except...
E_A_A_0S2I1M1M2.rules.append(S_E_A_A_0S2I1M1M2M3)
A_A_0S2I1M1.rules.append(E_A_A_0S2I1M1M2)
D_A_A_0S2I1M1M2 = rule.Rule(-2, "D", False, -1) # Never cleaves before A, followed by S, followed by I, preceded by A, preceded by D, except...
A_D_A_A_0S2I1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by S, followed by I, preceded by A, preceded by D, preceded by A, except...
D_A_A_0S2I1M1M2.rules.append(A_D_A_A_0S2I1M1M2M3)
A_A_0S2I1M1.rules.append(D_A_A_0S2I1M1M2)
A_0S2I1.rules.append(A_A_0S2I1M1)
G_A_0S2I1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before A, followed by S, followed by I, preceded by G, except...
E_G_A_0S2I1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before A, followed by S, followed by I, preceded by G, preceded by E, except...
A_E_G_A_0S2I1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by S, followed by I, preceded by G, preceded by E, preceded by A, except...
E_G_A_0S2I1M1M2.rules.append(A_E_G_A_0S2I1M1M2M3)
G_A_0S2I1M1.rules.append(E_G_A_0S2I1M1M2)
A_0S2I1.rules.append(G_A_0S2I1M1)
A_0S2.rules.append(A_0S2I1)
A_0S2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before A, followed by S, followed by S, except...
S_A_0S2S1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before A, followed by S, followed by S, preceded by S, except...
F_S_A_0S2S1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before A, followed by S, followed by S, preceded by S, preceded by F, except...
V_F_S_A_0S2S1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by S, followed by S, preceded by S, preceded by F, preceded by V, except...
F_S_A_0S2S1M1M2.rules.append(V_F_S_A_0S2S1M1M2M3)
S_A_0S2S1M1.rules.append(F_S_A_0S2S1M1M2)
A_0S2S1.rules.append(S_A_0S2S1M1)
A_0S2.rules.append(A_0S2S1)
A_0.rules.append(A_0S2)
A_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before A, followed by A, except...
A_0A2Y1 = rule.Rule(1, "Y", False, -1) # Never cleaves before A, followed by A, followed by Y, except...
A_A_0A2Y1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by A, followed by Y, preceded by A, except...
L_A_A_0A2Y1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by A, followed by Y, preceded by A, preceded by L, except...
T_L_A_A_0A2Y1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before A, followed by A, followed by Y, preceded by A, preceded by L, preceded by T, except...
L_A_A_0A2Y1M1M2.rules.append(T_L_A_A_0A2Y1M1M2M3)
S_L_A_A_0A2Y1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by A, followed by Y, preceded by A, preceded by L, preceded by S, except...
L_A_A_0A2Y1M1M2.rules.append(S_L_A_A_0A2Y1M1M2M3)
A_A_0A2Y1M1.rules.append(L_A_A_0A2Y1M1M2)
A_0A2Y1.rules.append(A_A_0A2Y1M1)
A_0A2.rules.append(A_0A2Y1)
A_0A2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before A, followed by A, followed by A, except...
A_A_0A2A1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by A, followed by A, preceded by A, except...
A_A_A_0A2A1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before A, followed by A, followed by A, preceded by A, preceded by A, except...
A_A_A_A_0A2A1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by A, followed by A, preceded by A, preceded by A, preceded by A, except...
A_A_A_0A2A1M1M2.rules.append(A_A_A_A_0A2A1M1M2M3)
A_A_0A2A1M1.rules.append(A_A_A_0A2A1M1M2)
A_0A2A1.rules.append(A_A_0A2A1M1)
A_0A2.rules.append(A_0A2A1)
A_0A2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before A, followed by A, followed by T, except...
A_A_0A2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by A, followed by T, preceded by A, except...
D_A_A_0A2T1M1M2 = rule.Rule(-2, "D", False, -1) # Never cleaves before A, followed by A, followed by T, preceded by A, preceded by D, except...
T_D_A_A_0A2T1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before A, followed by A, followed by T, preceded by A, preceded by D, preceded by T, except...
D_A_A_0A2T1M1M2.rules.append(T_D_A_A_0A2T1M1M2M3)
A_A_0A2T1M1.rules.append(D_A_A_0A2T1M1M2)
A_0A2T1.rules.append(A_A_0A2T1M1)
S_A_0A2T1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before A, followed by A, followed by T, preceded by S, except...
Y_S_A_0A2T1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before A, followed by A, followed by T, preceded by S, preceded by Y, except...
V_Y_S_A_0A2T1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by A, followed by T, preceded by S, preceded by Y, preceded by V, except...
Y_S_A_0A2T1M1M2.rules.append(V_Y_S_A_0A2T1M1M2M3)
S_A_0A2T1M1.rules.append(Y_S_A_0A2T1M1M2)
A_0A2T1.rules.append(S_A_0A2T1M1)
A_0A2.rules.append(A_0A2T1)
A_0A2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before A, followed by A, followed by N, except...
A_A_0A2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by A, followed by N, preceded by A, except...
A_A_A_0A2N1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before A, followed by A, followed by N, preceded by A, preceded by A, except...
A_A_A_A_0A2N1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by A, followed by N, preceded by A, preceded by A, preceded by A, except...
A_A_A_0A2N1M1M2.rules.append(A_A_A_A_0A2N1M1M2M3)
A_A_0A2N1M1.rules.append(A_A_A_0A2N1M1M2)
A_0A2N1.rules.append(A_A_0A2N1M1)
A_0A2.rules.append(A_0A2N1)
A_0A2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before A, followed by A, followed by P, except...
A_A_0A2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by A, followed by P, preceded by A, except...
Q_A_A_0A2P1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before A, followed by A, followed by P, preceded by A, preceded by Q, except...
V_Q_A_A_0A2P1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by A, followed by P, preceded by A, preceded by Q, preceded by V, except...
Q_A_A_0A2P1M1M2.rules.append(V_Q_A_A_0A2P1M1M2M3)
A_A_0A2P1M1.rules.append(Q_A_A_0A2P1M1M2)
A_0A2P1.rules.append(A_A_0A2P1M1)
A_0A2.rules.append(A_0A2P1)
A_0A2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before A, followed by A, followed by D, except...
A_A_0A2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by A, followed by D, preceded by A, except...
T_A_A_0A2D1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before A, followed by A, followed by D, preceded by A, preceded by T, except...
A_T_A_A_0A2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by A, followed by D, preceded by A, preceded by T, preceded by A, except...
T_A_A_0A2D1M1M2.rules.append(A_T_A_A_0A2D1M1M2M3)
A_A_0A2D1M1.rules.append(T_A_A_0A2D1M1M2)
A_0A2D1.rules.append(A_A_0A2D1M1)
A_0A2.rules.append(A_0A2D1)
A_0.rules.append(A_0A2)
A_0R2 = rule.Rule(2, "R", False, -1) # Never cleaves before A, followed by R, except...
A_0R2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before A, followed by R, followed by S, except...
P_A_0R2S1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before A, followed by R, followed by S, preceded by P, except...
V_P_A_0R2S1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before A, followed by R, followed by S, preceded by P, preceded by V, except...
A_V_P_A_0R2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by R, followed by S, preceded by P, preceded by V, preceded by A, except...
V_P_A_0R2S1M1M2.rules.append(A_V_P_A_0R2S1M1M2M3)
P_A_0R2S1M1.rules.append(V_P_A_0R2S1M1M2)
A_0R2S1.rules.append(P_A_0R2S1M1)
A_0R2.rules.append(A_0R2S1)
A_0.rules.append(A_0R2)
A_0C2 = rule.Rule(2, "C", False, -1) # Never cleaves before A, followed by C, except...
A_0C2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before A, followed by C, followed by S, except...
A_A_0C2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by C, followed by S, preceded by A, except...
G_A_A_0C2S1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before A, followed by C, followed by S, preceded by A, preceded by G, except...
V_G_A_A_0C2S1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by C, followed by S, preceded by A, preceded by G, preceded by V, except...
G_A_A_0C2S1M1M2.rules.append(V_G_A_A_0C2S1M1M2M3)
A_A_0C2S1M1.rules.append(G_A_A_0C2S1M1M2)
A_0C2S1.rules.append(A_A_0C2S1M1)
A_0C2.rules.append(A_0C2S1)
A_0C2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before A, followed by C, followed by G, except...
S_A_0C2G1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before A, followed by C, followed by G, preceded by S, except...
M_S_A_0C2G1M1M2 = rule.Rule(-2, "M", False, -1) # Never cleaves before A, followed by C, followed by G, preceded by S, preceded by M, except...
V_M_S_A_0C2G1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by C, followed by G, preceded by S, preceded by M, preceded by V, except...
M_S_A_0C2G1M1M2.rules.append(V_M_S_A_0C2G1M1M2M3)
S_A_0C2G1M1.rules.append(M_S_A_0C2G1M1M2)
A_0C2G1.rules.append(S_A_0C2G1M1)
G_A_0C2G1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before A, followed by C, followed by G, preceded by G, except...
A_G_A_0C2G1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before A, followed by C, followed by G, preceded by G, preceded by A, except...
V_A_G_A_0C2G1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by C, followed by G, preceded by G, preceded by A, preceded by V, except...
A_G_A_0C2G1M1M2.rules.append(V_A_G_A_0C2G1M1M2M3)
G_A_0C2G1M1.rules.append(A_G_A_0C2G1M1M2)
A_0C2G1.rules.append(G_A_0C2G1M1)
A_0C2.rules.append(A_0C2G1)
A_0C2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before A, followed by C, followed by P, except...
G_A_0C2P1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before A, followed by C, followed by P, preceded by G, except...
L_G_A_0C2P1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by C, followed by P, preceded by G, preceded by L, except...
S_L_G_A_0C2P1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by C, followed by P, preceded by G, preceded by L, preceded by S, except...
L_G_A_0C2P1M1M2.rules.append(S_L_G_A_0C2P1M1M2M3)
G_A_0C2P1M1.rules.append(L_G_A_0C2P1M1M2)
A_0C2P1.rules.append(G_A_0C2P1M1)
A_0C2.rules.append(A_0C2P1)
A_0C2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before A, followed by C, followed by T, except...
A_A_0C2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by C, followed by T, preceded by A, except...
E_A_A_0C2T1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before A, followed by C, followed by T, preceded by A, preceded by E, except...
A_E_A_A_0C2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by C, followed by T, preceded by A, preceded by E, preceded by A, except...
E_A_A_0C2T1M1M2.rules.append(A_E_A_A_0C2T1M1M2M3)
A_A_0C2T1M1.rules.append(E_A_A_0C2T1M1M2)
A_0C2T1.rules.append(A_A_0C2T1M1)
Q_A_0C2T1M1 = rule.Rule(-1, "Q", False, -1) # Never cleaves before A, followed by C, followed by T, preceded by Q, except...
T_Q_A_0C2T1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before A, followed by C, followed by T, preceded by Q, preceded by T, except...
T_T_Q_A_0C2T1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before A, followed by C, followed by T, preceded by Q, preceded by T, preceded by T, except...
T_Q_A_0C2T1M1M2.rules.append(T_T_Q_A_0C2T1M1M2M3)
Q_A_0C2T1M1.rules.append(T_Q_A_0C2T1M1M2)
A_0C2T1.rules.append(Q_A_0C2T1M1)
A_0C2.rules.append(A_0C2T1)
A_0C2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before A, followed by C, followed by V, except...
A_A_0C2V1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by C, followed by V, preceded by A, except...
L_A_A_0C2V1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by C, followed by V, preceded by A, preceded by L, except...
A_L_A_A_0C2V1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by C, followed by V, preceded by A, preceded by L, preceded by A, except...
L_A_A_0C2V1M1M2.rules.append(A_L_A_A_0C2V1M1M2M3)
A_A_0C2V1M1.rules.append(L_A_A_0C2V1M1M2)
A_0C2V1.rules.append(A_A_0C2V1M1)
T_A_0C2V1M1 = rule.Rule(-1, "T", False, -1) # Never cleaves before A, followed by C, followed by V, preceded by T, except...
P_T_A_0C2V1M1M2 = rule.Rule(-2, "P", False, -1) # Never cleaves before A, followed by C, followed by V, preceded by T, preceded by P, except...
A_P_T_A_0C2V1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by C, followed by V, preceded by T, preceded by P, preceded by A, except...
P_T_A_0C2V1M1M2.rules.append(A_P_T_A_0C2V1M1M2M3)
T_A_0C2V1M1.rules.append(P_T_A_0C2V1M1M2)
A_0C2V1.rules.append(T_A_0C2V1M1)
S_A_0C2V1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before A, followed by C, followed by V, preceded by S, except...
E_S_A_0C2V1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before A, followed by C, followed by V, preceded by S, preceded by E, except...
A_E_S_A_0C2V1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by C, followed by V, preceded by S, preceded by E, preceded by A, except...
E_S_A_0C2V1M1M2.rules.append(A_E_S_A_0C2V1M1M2M3)
S_A_0C2V1M1.rules.append(E_S_A_0C2V1M1M2)
A_0C2V1.rules.append(S_A_0C2V1M1)
A_0C2.rules.append(A_0C2V1)
A_0.rules.append(A_0C2)
A_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before A, followed by P, except...
A_0P2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before A, followed by P, followed by T, except...
A_A_0P2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by P, followed by T, preceded by A, except...
L_A_A_0P2T1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by P, followed by T, preceded by A, preceded by L, except...
A_L_A_A_0P2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by P, followed by T, preceded by A, preceded by L, preceded by A, except...
L_A_A_0P2T1M1M2.rules.append(A_L_A_A_0P2T1M1M2M3)
A_A_0P2T1M1.rules.append(L_A_A_0P2T1M1M2)
A_0P2T1.rules.append(A_A_0P2T1M1)
A_0P2.rules.append(A_0P2T1)
A_0P2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before A, followed by P, followed by P, except...
A_A_0P2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by P, followed by P, preceded by A, except...
S_A_A_0P2P1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before A, followed by P, followed by P, preceded by A, preceded by S, except...
C_S_A_A_0P2P1M1M2M3 = rule.Rule(-3, "C", True, -1) # Always cleaves before A, followed by P, followed by P, preceded by A, preceded by S, preceded by C, except...
S_A_A_0P2P1M1M2.rules.append(C_S_A_A_0P2P1M1M2M3)
A_A_0P2P1M1.rules.append(S_A_A_0P2P1M1M2)
A_0P2P1.rules.append(A_A_0P2P1M1)
A_0P2.rules.append(A_0P2P1)
A_0P2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before A, followed by P, followed by D, except...
A_A_0P2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by P, followed by D, preceded by A, except...
R_A_A_0P2D1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before A, followed by P, followed by D, preceded by A, preceded by R, except...
S_R_A_A_0P2D1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by P, followed by D, preceded by A, preceded by R, preceded by S, except...
R_A_A_0P2D1M1M2.rules.append(S_R_A_A_0P2D1M1M2M3)
A_A_0P2D1M1.rules.append(R_A_A_0P2D1M1M2)
F_A_A_0P2D1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before A, followed by P, followed by D, preceded by A, preceded by F, except...
C_F_A_A_0P2D1M1M2M3 = rule.Rule(-3, "C", True, -1) # Always cleaves before A, followed by P, followed by D, preceded by A, preceded by F, preceded by C, except...
F_A_A_0P2D1M1M2.rules.append(C_F_A_A_0P2D1M1M2M3)
A_A_0P2D1M1.rules.append(F_A_A_0P2D1M1M2)
A_0P2D1.rules.append(A_A_0P2D1M1)
A_0P2.rules.append(A_0P2D1)
A_0P2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before A, followed by P, followed by E, except...
A_A_0P2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by P, followed by E, preceded by A, except...
F_A_A_0P2E1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before A, followed by P, followed by E, preceded by A, preceded by F, except...
S_F_A_A_0P2E1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by P, followed by E, preceded by A, preceded by F, preceded by S, except...
F_A_A_0P2E1M1M2.rules.append(S_F_A_A_0P2E1M1M2M3)
A_A_0P2E1M1.rules.append(F_A_A_0P2E1M1M2)
A_0P2E1.rules.append(A_A_0P2E1M1)
A_0P2.rules.append(A_0P2E1)
A_0P2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before A, followed by P, followed by V, except...
A_A_0P2V1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by P, followed by V, preceded by A, except...
E_A_A_0P2V1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before A, followed by P, followed by V, preceded by A, preceded by E, except...
N_E_A_A_0P2V1M1M2M3 = rule.Rule(-3, "N", True, -1) # Always cleaves before A, followed by P, followed by V, preceded by A, preceded by E, preceded by N, except...
E_A_A_0P2V1M1M2.rules.append(N_E_A_A_0P2V1M1M2M3)
A_A_0P2V1M1.rules.append(E_A_A_0P2V1M1M2)
A_0P2V1.rules.append(A_A_0P2V1M1)
A_0P2.rules.append(A_0P2V1)
A_0.rules.append(A_0P2)
A_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before A, followed by E, except...
A_0E2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before A, followed by E, followed by T, except...
S_A_0E2T1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before A, followed by E, followed by T, preceded by S, except...
N_S_A_0E2T1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before A, followed by E, followed by T, preceded by S, preceded by N, except...
A_N_S_A_0E2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by E, followed by T, preceded by S, preceded by N, preceded by A, except...
N_S_A_0E2T1M1M2.rules.append(A_N_S_A_0E2T1M1M2M3)
S_A_0E2T1M1.rules.append(N_S_A_0E2T1M1M2)
A_0E2T1.rules.append(S_A_0E2T1M1)
A_0E2.rules.append(A_0E2T1)
A_0E2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before A, followed by E, followed by G, except...
G_A_0E2G1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before A, followed by E, followed by G, preceded by G, except...
M_G_A_0E2G1M1M2 = rule.Rule(-2, "M", False, -1) # Never cleaves before A, followed by E, followed by G, preceded by G, preceded by M, except...
S_M_G_A_0E2G1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by E, followed by G, preceded by G, preceded by M, preceded by S, except...
M_G_A_0E2G1M1M2.rules.append(S_M_G_A_0E2G1M1M2M3)
G_A_0E2G1M1.rules.append(M_G_A_0E2G1M1M2)
A_0E2G1.rules.append(G_A_0E2G1M1)
A_0E2.rules.append(A_0E2G1)
A_0E2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before A, followed by E, followed by D, except...
A_A_0E2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by E, followed by D, preceded by A, except...
F_A_A_0E2D1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before A, followed by E, followed by D, preceded by A, preceded by F, except...
C_F_A_A_0E2D1M1M2M3 = rule.Rule(-3, "C", True, -1) # Always cleaves before A, followed by E, followed by D, preceded by A, preceded by F, preceded by C, except...
F_A_A_0E2D1M1M2.rules.append(C_F_A_A_0E2D1M1M2M3)
A_A_0E2D1M1.rules.append(F_A_A_0E2D1M1M2)
A_0E2D1.rules.append(A_A_0E2D1M1)
A_0E2.rules.append(A_0E2D1)
A_0.rules.append(A_0E2)
A_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before A, followed by T, except...
A_0T2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before A, followed by T, followed by P, except...
A_A_0T2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by T, followed by P, preceded by A, except...
R_A_A_0T2P1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before A, followed by T, followed by P, preceded by A, preceded by R, except...
S_R_A_A_0T2P1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by T, followed by P, preceded by A, preceded by R, preceded by S, except...
R_A_A_0T2P1M1M2.rules.append(S_R_A_A_0T2P1M1M2M3)
A_A_0T2P1M1.rules.append(R_A_A_0T2P1M1M2)
A_A_A_0T2P1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before A, followed by T, followed by P, preceded by A, preceded by A, except...
V_A_A_A_0T2P1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by T, followed by P, preceded by A, preceded by A, preceded by V, except...
A_A_A_0T2P1M1M2.rules.append(V_A_A_A_0T2P1M1M2M3)
A_A_0T2P1M1.rules.append(A_A_A_0T2P1M1M2)
A_0T2P1.rules.append(A_A_0T2P1M1)
S_A_0T2P1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before A, followed by T, followed by P, preceded by S, except...
H_S_A_0T2P1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before A, followed by T, followed by P, preceded by S, preceded by H, except...
A_H_S_A_0T2P1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by T, followed by P, preceded by S, preceded by H, preceded by A, except...
H_S_A_0T2P1M1M2.rules.append(A_H_S_A_0T2P1M1M2M3)
S_A_0T2P1M1.rules.append(H_S_A_0T2P1M1M2)
A_0T2P1.rules.append(S_A_0T2P1M1)
A_0T2.rules.append(A_0T2P1)
A_0T2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before A, followed by T, followed by L, except...
A_A_0T2L1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by T, followed by L, preceded by A, except...
H_A_A_0T2L1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before A, followed by T, followed by L, preceded by A, preceded by H, except...
T_H_A_A_0T2L1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before A, followed by T, followed by L, preceded by A, preceded by H, preceded by T, except...
H_A_A_0T2L1M1M2.rules.append(T_H_A_A_0T2L1M1M2M3)
A_A_0T2L1M1.rules.append(H_A_A_0T2L1M1M2)
A_0T2L1.rules.append(A_A_0T2L1M1)
A_0T2.rules.append(A_0T2L1)
A_0T2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before A, followed by T, followed by D, except...
A_A_0T2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by T, followed by D, preceded by A, except...
H_A_A_0T2D1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before A, followed by T, followed by D, preceded by A, preceded by H, except...
A_H_A_A_0T2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by T, followed by D, preceded by A, preceded by H, preceded by A, except...
H_A_A_0T2D1M1M2.rules.append(A_H_A_A_0T2D1M1M2M3)
A_A_0T2D1M1.rules.append(H_A_A_0T2D1M1M2)
A_0T2D1.rules.append(A_A_0T2D1M1)
A_0T2.rules.append(A_0T2D1)
A_0T2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before A, followed by T, followed by E, except...
S_A_0T2E1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before A, followed by T, followed by E, preceded by S, except...
H_S_A_0T2E1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before A, followed by T, followed by E, preceded by S, preceded by H, except...
S_H_S_A_0T2E1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by T, followed by E, preceded by S, preceded by H, preceded by S, except...
H_S_A_0T2E1M1M2.rules.append(S_H_S_A_0T2E1M1M2M3)
S_A_0T2E1M1.rules.append(H_S_A_0T2E1M1M2)
D_S_A_0T2E1M1M2 = rule.Rule(-2, "D", False, -1) # Never cleaves before A, followed by T, followed by E, preceded by S, preceded by D, except...
V_D_S_A_0T2E1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by T, followed by E, preceded by S, preceded by D, preceded by V, except...
D_S_A_0T2E1M1M2.rules.append(V_D_S_A_0T2E1M1M2M3)
S_A_0T2E1M1.rules.append(D_S_A_0T2E1M1M2)
A_0T2E1.rules.append(S_A_0T2E1M1)
A_0T2.rules.append(A_0T2E1)
A_0T2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before A, followed by T, followed by S, except...
A_A_0T2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by T, followed by S, preceded by A, except...
L_A_A_0T2S1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by T, followed by S, preceded by A, preceded by L, except...
A_L_A_A_0T2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by T, followed by S, preceded by A, preceded by L, preceded by A, except...
L_A_A_0T2S1M1M2.rules.append(A_L_A_A_0T2S1M1M2M3)
A_A_0T2S1M1.rules.append(L_A_A_0T2S1M1M2)
A_0T2S1.rules.append(A_A_0T2S1M1)
A_0T2.rules.append(A_0T2S1)
A_0T2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before A, followed by T, followed by V, except...
A_A_0T2V1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by T, followed by V, preceded by A, except...
Q_A_A_0T2V1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before A, followed by T, followed by V, preceded by A, preceded by Q, except...
A_Q_A_A_0T2V1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by T, followed by V, preceded by A, preceded by Q, preceded by A, except...
Q_A_A_0T2V1M1M2.rules.append(A_Q_A_A_0T2V1M1M2M3)
A_A_0T2V1M1.rules.append(Q_A_A_0T2V1M1M2)
A_0T2V1.rules.append(A_A_0T2V1M1)
R_A_0T2V1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by T, followed by V, preceded by R, except...
A_R_A_0T2V1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before A, followed by T, followed by V, preceded by R, preceded by A, except...
E_A_R_A_0T2V1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before A, followed by T, followed by V, preceded by R, preceded by A, preceded by E, except...
A_R_A_0T2V1M1M2.rules.append(E_A_R_A_0T2V1M1M2M3)
R_A_0T2V1M1.rules.append(A_R_A_0T2V1M1M2)
A_0T2V1.rules.append(R_A_0T2V1M1)
A_0T2.rules.append(A_0T2V1)
A_0T2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before A, followed by T, followed by I, except...
A_A_0T2I1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by T, followed by I, preceded by A, except...
D_A_A_0T2I1M1M2 = rule.Rule(-2, "D", False, -1) # Never cleaves before A, followed by T, followed by I, preceded by A, preceded by D, except...
A_D_A_A_0T2I1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by T, followed by I, preceded by A, preceded by D, preceded by A, except...
D_A_A_0T2I1M1M2.rules.append(A_D_A_A_0T2I1M1M2M3)
A_A_0T2I1M1.rules.append(D_A_A_0T2I1M1M2)
A_0T2I1.rules.append(A_A_0T2I1M1)
A_0T2.rules.append(A_0T2I1)
A_0T2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before A, followed by T, followed by G, except...
A_A_0T2G1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by T, followed by G, preceded by A, except...
R_A_A_0T2G1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before A, followed by T, followed by G, preceded by A, preceded by R, except...
A_R_A_A_0T2G1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by T, followed by G, preceded by A, preceded by R, preceded by A, except...
R_A_A_0T2G1M1M2.rules.append(A_R_A_A_0T2G1M1M2M3)
A_A_0T2G1M1.rules.append(R_A_A_0T2G1M1M2)
A_0T2G1.rules.append(A_A_0T2G1M1)
A_0T2.rules.append(A_0T2G1)
A_0.rules.append(A_0T2)
A_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before A, followed by I, except...
A_0I2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before A, followed by I, followed by S, except...
S_A_0I2S1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before A, followed by I, followed by S, preceded by S, except...
D_S_A_0I2S1M1M2 = rule.Rule(-2, "D", False, -1) # Never cleaves before A, followed by I, followed by S, preceded by S, preceded by D, except...
V_D_S_A_0I2S1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by I, followed by S, preceded by S, preceded by D, preceded by V, except...
D_S_A_0I2S1M1M2.rules.append(V_D_S_A_0I2S1M1M2M3)
S_A_0I2S1M1.rules.append(D_S_A_0I2S1M1M2)
A_0I2S1.rules.append(S_A_0I2S1M1)
A_0I2.rules.append(A_0I2S1)
A_0I2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before A, followed by I, followed by T, except...
A_A_0I2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by I, followed by T, preceded by A, except...
H_A_A_0I2T1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before A, followed by I, followed by T, preceded by A, preceded by H, except...
A_H_A_A_0I2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by I, followed by T, preceded by A, preceded by H, preceded by A, except...
H_A_A_0I2T1M1M2.rules.append(A_H_A_A_0I2T1M1M2M3)
A_A_0I2T1M1.rules.append(H_A_A_0I2T1M1M2)
Y_A_A_0I2T1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before A, followed by I, followed by T, preceded by A, preceded by Y, except...
T_Y_A_A_0I2T1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before A, followed by I, followed by T, preceded by A, preceded by Y, preceded by T, except...
Y_A_A_0I2T1M1M2.rules.append(T_Y_A_A_0I2T1M1M2M3)
A_A_0I2T1M1.rules.append(Y_A_A_0I2T1M1M2)
A_0I2T1.rules.append(A_A_0I2T1M1)
A_0I2.rules.append(A_0I2T1)
A_0I2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before A, followed by I, followed by D, except...
S_A_0I2D1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before A, followed by I, followed by D, preceded by S, except...
I_S_A_0I2D1M1M2 = rule.Rule(-2, "I", False, -1) # Never cleaves before A, followed by I, followed by D, preceded by S, preceded by I, except...
V_I_S_A_0I2D1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by I, followed by D, preceded by S, preceded by I, preceded by V, except...
I_S_A_0I2D1M1M2.rules.append(V_I_S_A_0I2D1M1M2M3)
S_A_0I2D1M1.rules.append(I_S_A_0I2D1M1M2)
A_0I2D1.rules.append(S_A_0I2D1M1)
A_0I2.rules.append(A_0I2D1)
A_0.rules.append(A_0I2)
A_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before A, followed by L, except...
A_0L2H1 = rule.Rule(1, "H", False, -1) # Never cleaves before A, followed by L, followed by H, except...
I_A_0L2H1M1 = rule.Rule(-1, "I", False, -1) # Never cleaves before A, followed by L, followed by H, preceded by I, except...
K_I_A_0L2H1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before A, followed by L, followed by H, preceded by I, preceded by K, except...
C_K_I_A_0L2H1M1M2M3 = rule.Rule(-3, "C", True, -1) # Always cleaves before A, followed by L, followed by H, preceded by I, preceded by K, preceded by C, except...
K_I_A_0L2H1M1M2.rules.append(C_K_I_A_0L2H1M1M2M3)
I_A_0L2H1M1.rules.append(K_I_A_0L2H1M1M2)
A_0L2H1.rules.append(I_A_0L2H1M1)
A_0L2.rules.append(A_0L2H1)
A_0L2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before A, followed by L, followed by S, except...
A_A_0L2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by L, followed by S, preceded by A, except...
L_A_A_0L2S1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by L, followed by S, preceded by A, preceded by L, except...
V_L_A_A_0L2S1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by L, followed by S, preceded by A, preceded by L, preceded by V, except...
L_A_A_0L2S1M1M2.rules.append(V_L_A_A_0L2S1M1M2M3)
A_A_0L2S1M1.rules.append(L_A_A_0L2S1M1M2)
A_0L2S1.rules.append(A_A_0L2S1M1)
A_0L2.rules.append(A_0L2S1)
A_0.rules.append(A_0L2)
A_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before A, followed by V, except...
A_0V2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before A, followed by V, followed by N, except...
A_A_0V2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by V, followed by N, preceded by A, except...
R_A_A_0V2N1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before A, followed by V, followed by N, preceded by A, preceded by R, except...
S_R_A_A_0V2N1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by V, followed by N, preceded by A, preceded by R, preceded by S, except...
R_A_A_0V2N1M1M2.rules.append(S_R_A_A_0V2N1M1M2M3)
A_A_0V2N1M1.rules.append(R_A_A_0V2N1M1M2)
A_0V2N1.rules.append(A_A_0V2N1M1)
A_0V2.rules.append(A_0V2N1)
A_0V2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before A, followed by V, followed by K, except...
A_A_0V2K1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by V, followed by K, preceded by A, except...
H_A_A_0V2K1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before A, followed by V, followed by K, preceded by A, preceded by H, except...
V_H_A_A_0V2K1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by V, followed by K, preceded by A, preceded by H, preceded by V, except...
H_A_A_0V2K1M1M2.rules.append(V_H_A_A_0V2K1M1M2M3)
A_A_0V2K1M1.rules.append(H_A_A_0V2K1M1M2)
A_0V2K1.rules.append(A_A_0V2K1M1)
A_0V2.rules.append(A_0V2K1)
A_0V2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before A, followed by V, followed by E, except...
A_A_0V2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by V, followed by E, preceded by A, except...
G_A_A_0V2E1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before A, followed by V, followed by E, preceded by A, preceded by G, except...
A_G_A_A_0V2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by V, followed by E, preceded by A, preceded by G, preceded by A, except...
G_A_A_0V2E1M1M2.rules.append(A_G_A_A_0V2E1M1M2M3)
A_A_0V2E1M1.rules.append(G_A_A_0V2E1M1M2)
A_0V2E1.rules.append(A_A_0V2E1M1)
A_0V2.rules.append(A_0V2E1)
A_0V2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before A, followed by V, followed by S, except...
A_A_0V2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by V, followed by S, preceded by A, except...
T_A_A_0V2S1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before A, followed by V, followed by S, preceded by A, preceded by T, except...
A_T_A_A_0V2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by V, followed by S, preceded by A, preceded by T, preceded by A, except...
T_A_A_0V2S1M1M2.rules.append(A_T_A_A_0V2S1M1M2M3)
A_A_0V2S1M1.rules.append(T_A_A_0V2S1M1M2)
A_0V2S1.rules.append(A_A_0V2S1M1)
A_0V2.rules.append(A_0V2S1)
A_0.rules.append(A_0V2)
A_0Q2 = rule.Rule(2, "Q", False, -1) # Never cleaves before A, followed by Q, except...
A_0Q2R1 = rule.Rule(1, "R", False, -1) # Never cleaves before A, followed by Q, followed by R, except...
N_A_0Q2R1M1 = rule.Rule(-1, "N", False, -1) # Never cleaves before A, followed by Q, followed by R, preceded by N, except...
G_N_A_0Q2R1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before A, followed by Q, followed by R, preceded by N, preceded by G, except...
D_G_N_A_0Q2R1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before A, followed by Q, followed by R, preceded by N, preceded by G, preceded by D, except...
G_N_A_0Q2R1M1M2.rules.append(D_G_N_A_0Q2R1M1M2M3)
N_A_0Q2R1M1.rules.append(G_N_A_0Q2R1M1M2)
A_0Q2R1.rules.append(N_A_0Q2R1M1)
A_0Q2.rules.append(A_0Q2R1)
A_0Q2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before A, followed by Q, followed by I, except...
A_A_0Q2I1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by Q, followed by I, preceded by A, except...
A_A_A_0Q2I1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before A, followed by Q, followed by I, preceded by A, preceded by A, except...
V_A_A_A_0Q2I1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by Q, followed by I, preceded by A, preceded by A, preceded by V, except...
A_A_A_0Q2I1M1M2.rules.append(V_A_A_A_0Q2I1M1M2M3)
A_A_0Q2I1M1.rules.append(A_A_A_0Q2I1M1M2)
A_0Q2I1.rules.append(A_A_0Q2I1M1)
A_0Q2.rules.append(A_0Q2I1)
A_0.rules.append(A_0Q2)
A_0F2 = rule.Rule(2, "F", False, -1) # Never cleaves before A, followed by F, except...
A_0F2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before A, followed by F, followed by N, except...
A_A_0F2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by F, followed by N, preceded by A, except...
S_A_A_0F2N1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before A, followed by F, followed by N, preceded by A, preceded by S, except...
A_S_A_A_0F2N1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by F, followed by N, preceded by A, preceded by S, preceded by A, except...
S_A_A_0F2N1M1M2.rules.append(A_S_A_A_0F2N1M1M2M3)
A_A_0F2N1M1.rules.append(S_A_A_0F2N1M1M2)
A_0F2N1.rules.append(A_A_0F2N1M1)
A_0F2.rules.append(A_0F2N1)
A_0F2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before A, followed by F, followed by S, except...
A_A_0F2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by F, followed by S, preceded by A, except...
N_A_A_0F2S1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before A, followed by F, followed by S, preceded by A, preceded by N, except...
A_N_A_A_0F2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by F, followed by S, preceded by A, preceded by N, preceded by A, except...
N_A_A_0F2S1M1M2.rules.append(A_N_A_A_0F2S1M1M2M3)
A_A_0F2S1M1.rules.append(N_A_A_0F2S1M1M2)
A_0F2S1.rules.append(A_A_0F2S1M1)
A_0F2.rules.append(A_0F2S1)
A_0F2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before A, followed by F, followed by T, except...
A_A_0F2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by F, followed by T, preceded by A, except...
N_A_A_0F2T1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before A, followed by F, followed by T, preceded by A, preceded by N, except...
A_N_A_A_0F2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by F, followed by T, preceded by A, preceded by N, preceded by A, except...
N_A_A_0F2T1M1M2.rules.append(A_N_A_A_0F2T1M1M2M3)
A_A_0F2T1M1.rules.append(N_A_A_0F2T1M1M2)
A_0F2T1.rules.append(A_A_0F2T1M1)
G_A_0F2T1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before A, followed by F, followed by T, preceded by G, except...
R_G_A_0F2T1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before A, followed by F, followed by T, preceded by G, preceded by R, except...
A_R_G_A_0F2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by F, followed by T, preceded by G, preceded by R, preceded by A, except...
R_G_A_0F2T1M1M2.rules.append(A_R_G_A_0F2T1M1M2M3)
G_A_0F2T1M1.rules.append(R_G_A_0F2T1M1M2)
A_0F2T1.rules.append(G_A_0F2T1M1)
A_0F2.rules.append(A_0F2T1)
A_0F2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before A, followed by F, followed by K, except...
S_A_0F2K1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before A, followed by F, followed by K, preceded by S, except...
Y_S_A_0F2K1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before A, followed by F, followed by K, preceded by S, preceded by Y, except...
V_Y_S_A_0F2K1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by F, followed by K, preceded by S, preceded by Y, preceded by V, except...
Y_S_A_0F2K1M1M2.rules.append(V_Y_S_A_0F2K1M1M2M3)
S_A_0F2K1M1.rules.append(Y_S_A_0F2K1M1M2)
A_0F2K1.rules.append(S_A_0F2K1M1)
A_0F2.rules.append(A_0F2K1)
A_0.rules.append(A_0F2)
A_0D2 = rule.Rule(2, "D", False, -1) # Never cleaves before A, followed by D, except...
A_0D2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before A, followed by D, followed by D, except...
A_A_0D2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by D, followed by D, preceded by A, except...
F_A_A_0D2D1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before A, followed by D, followed by D, preceded by A, preceded by F, except...
A_F_A_A_0D2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by D, followed by D, preceded by A, preceded by F, preceded by A, except...
F_A_A_0D2D1M1M2.rules.append(A_F_A_A_0D2D1M1M2M3)
A_A_0D2D1M1.rules.append(F_A_A_0D2D1M1M2)
A_0D2D1.rules.append(A_A_0D2D1M1)
A_0D2.rules.append(A_0D2D1)
A_0D2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before A, followed by D, followed by K, except...
A_A_0D2K1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by D, followed by K, preceded by A, except...
N_A_A_0D2K1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before A, followed by D, followed by K, preceded by A, preceded by N, except...
L_N_A_A_0D2K1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before A, followed by D, followed by K, preceded by A, preceded by N, preceded by L, except...
N_A_A_0D2K1M1M2.rules.append(L_N_A_A_0D2K1M1M2M3)
A_A_0D2K1M1.rules.append(N_A_A_0D2K1M1M2)
A_0D2K1.rules.append(A_A_0D2K1M1)
A_0D2.rules.append(A_0D2K1)
A_0D2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before A, followed by D, followed by T, except...
A_A_0D2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by D, followed by T, preceded by A, except...
L_A_A_0D2T1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before A, followed by D, followed by T, preceded by A, preceded by L, except...
A_L_A_A_0D2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by D, followed by T, preceded by A, preceded by L, preceded by A, except...
L_A_A_0D2T1M1M2.rules.append(A_L_A_A_0D2T1M1M2M3)
A_A_0D2T1M1.rules.append(L_A_A_0D2T1M1M2)
E_A_A_0D2T1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before A, followed by D, followed by T, preceded by A, preceded by E, except...
S_E_A_A_0D2T1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by D, followed by T, preceded by A, preceded by E, preceded by S, except...
E_A_A_0D2T1M1M2.rules.append(S_E_A_A_0D2T1M1M2M3)
A_A_0D2T1M1.rules.append(E_A_A_0D2T1M1M2)
A_0D2T1.rules.append(A_A_0D2T1M1)
A_0D2.rules.append(A_0D2T1)
A_0D2C1 = rule.Rule(1, "C", False, -1) # Never cleaves before A, followed by D, followed by C, except...
R_A_0D2C1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by D, followed by C, preceded by R, except...
E_R_A_0D2C1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before A, followed by D, followed by C, preceded by R, preceded by E, except...
V_E_R_A_0D2C1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by D, followed by C, preceded by R, preceded by E, preceded by V, except...
E_R_A_0D2C1M1M2.rules.append(V_E_R_A_0D2C1M1M2M3)
R_A_0D2C1M1.rules.append(E_R_A_0D2C1M1M2)
A_0D2C1.rules.append(R_A_0D2C1M1)
A_0D2.rules.append(A_0D2C1)
A_0.rules.append(A_0D2)
A_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before A, followed by G, except...
A_0G2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before A, followed by G, followed by E, except...
A_A_0G2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by G, followed by E, preceded by A, except...
F_A_A_0G2E1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before A, followed by G, followed by E, preceded by A, preceded by F, except...
S_F_A_A_0G2E1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by G, followed by E, preceded by A, preceded by F, preceded by S, except...
F_A_A_0G2E1M1M2.rules.append(S_F_A_A_0G2E1M1M2M3)
A_A_0G2E1M1.rules.append(F_A_A_0G2E1M1M2)
A_A_A_0G2E1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before A, followed by G, followed by E, preceded by A, preceded by A, except...
A_A_A_A_0G2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by G, followed by E, preceded by A, preceded by A, preceded by A, except...
A_A_A_0G2E1M1M2.rules.append(A_A_A_A_0G2E1M1M2M3)
A_A_0G2E1M1.rules.append(A_A_A_0G2E1M1M2)
A_0G2E1.rules.append(A_A_0G2E1M1)
A_0G2.rules.append(A_0G2E1)
A_0G2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before A, followed by G, followed by A, except...
R_A_0G2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by G, followed by A, preceded by R, except...
P_R_A_0G2A1M1M2 = rule.Rule(-2, "P", False, -1) # Never cleaves before A, followed by G, followed by A, preceded by R, preceded by P, except...
S_P_R_A_0G2A1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by G, followed by A, preceded by R, preceded by P, preceded by S, except...
P_R_A_0G2A1M1M2.rules.append(S_P_R_A_0G2A1M1M2M3)
R_A_0G2A1M1.rules.append(P_R_A_0G2A1M1M2)
A_0G2A1.rules.append(R_A_0G2A1M1)
A_0G2.rules.append(A_0G2A1)
A_0G2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before A, followed by G, followed by V, except...
K_A_0G2V1M1 = rule.Rule(-1, "K", False, -1) # Never cleaves before A, followed by G, followed by V, preceded by K, except...
H_K_A_0G2V1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before A, followed by G, followed by V, preceded by K, preceded by H, except...
P_H_K_A_0G2V1M1M2M3 = rule.Rule(-3, "P", True, -1) # Always cleaves before A, followed by G, followed by V, preceded by K, preceded by H, preceded by P, except...
H_K_A_0G2V1M1M2.rules.append(P_H_K_A_0G2V1M1M2M3)
K_A_0G2V1M1.rules.append(H_K_A_0G2V1M1M2)
A_0G2V1.rules.append(K_A_0G2V1M1)
A_0G2.rules.append(A_0G2V1)
A_0G2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before A, followed by G, followed by I, except...
A_A_0G2I1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by G, followed by I, preceded by A, except...
N_A_A_0G2I1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before A, followed by G, followed by I, preceded by A, preceded by N, except...
A_N_A_A_0G2I1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by G, followed by I, preceded by A, preceded by N, preceded by A, except...
N_A_A_0G2I1M1M2.rules.append(A_N_A_A_0G2I1M1M2M3)
A_A_0G2I1M1.rules.append(N_A_A_0G2I1M1M2)
A_0G2I1.rules.append(A_A_0G2I1M1)
A_0G2.rules.append(A_0G2I1)
A_0G2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before A, followed by G, followed by G, except...
A_A_0G2G1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by G, followed by G, preceded by A, except...
A_A_A_0G2G1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before A, followed by G, followed by G, preceded by A, preceded by A, except...
V_A_A_A_0G2G1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before A, followed by G, followed by G, preceded by A, preceded by A, preceded by V, except...
A_A_A_0G2G1M1M2.rules.append(V_A_A_A_0G2G1M1M2M3)
A_A_0G2G1M1.rules.append(A_A_A_0G2G1M1M2)
A_0G2G1.rules.append(A_A_0G2G1M1)
A_0G2.rules.append(A_0G2G1)
A_0.rules.append(A_0G2)
A_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before A, followed by N, except...
A_0N2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before A, followed by N, followed by A, except...
A_A_0N2A1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by N, followed by A, preceded by A, except...
S_A_A_0N2A1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before A, followed by N, followed by A, preceded by A, preceded by S, except...
A_S_A_A_0N2A1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before A, followed by N, followed by A, preceded by A, preceded by S, preceded by A, except...
S_A_A_0N2A1M1M2.rules.append(A_S_A_A_0N2A1M1M2M3)
A_A_0N2A1M1.rules.append(S_A_A_0N2A1M1M2)
A_0N2A1.rules.append(A_A_0N2A1M1)
A_0N2.rules.append(A_0N2A1)
A_0.rules.append(A_0N2)
A_0Y2 = rule.Rule(2, "Y", False, -1) # Never cleaves before A, followed by Y, except...
A_0Y2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before A, followed by Y, followed by Q, except...
A_A_0Y2Q1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before A, followed by Y, followed by Q, preceded by A, except...
S_A_A_0Y2Q1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before A, followed by Y, followed by Q, preceded by A, preceded by S, except...
S_S_A_A_0Y2Q1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before A, followed by Y, followed by Q, preceded by A, preceded by S, preceded by S, except...
S_A_A_0Y2Q1M1M2.rules.append(S_S_A_A_0Y2Q1M1M2M3)
A_A_0Y2Q1M1.rules.append(S_A_A_0Y2Q1M1M2)
A_0Y2Q1.rules.append(A_A_0Y2Q1M1)
A_0Y2.rules.append(A_0Y2Q1)
A_0.rules.append(A_0Y2)
A_0W2 = rule.Rule(2, "W", False, -1) # Never cleaves before A, followed by W, except...
A_0W2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before A, followed by W, followed by T, except...
R_A_0W2T1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before A, followed by W, followed by T, preceded by R, except...
A_R_A_0W2T1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before A, followed by W, followed by T, preceded by R, preceded by A, except...
D_A_R_A_0W2T1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before A, followed by W, followed by T, preceded by R, preceded by A, preceded by D, except...
A_R_A_0W2T1M1M2.rules.append(D_A_R_A_0W2T1M1M2M3)
R_A_0W2T1M1.rules.append(A_R_A_0W2T1M1M2)
A_0W2T1.rules.append(R_A_0W2T1M1)
A_0W2.rules.append(A_0W2T1)
A_0.rules.append(A_0W2)
ENZ.append(A_0)

Q_0 = rule.Rule(0, "Q", False, 0) # Never cleaves before Q, except...
Q_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before Q, followed by E, except...
Q_0E2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before Q, followed by E, followed by I, except...
S_Q_0E2I1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before Q, followed by E, followed by I, preceded by S, except...
L_S_Q_0E2I1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before Q, followed by E, followed by I, preceded by S, preceded by L, except...
C_L_S_Q_0E2I1M1M2M3 = rule.Rule(-3, "C", True, -1) # Always cleaves before Q, followed by E, followed by I, preceded by S, preceded by L, preceded by C, except...
L_S_Q_0E2I1M1M2.rules.append(C_L_S_Q_0E2I1M1M2M3)
S_Q_0E2I1M1.rules.append(L_S_Q_0E2I1M1M2)
Q_0E2I1.rules.append(S_Q_0E2I1M1)
Q_0E2.rules.append(Q_0E2I1)
Q_0E2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before Q, followed by E, followed by T, except...
A_Q_0E2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by E, followed by T, preceded by A, except...
A_A_Q_0E2T1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before Q, followed by E, followed by T, preceded by A, preceded by A, except...
V_A_A_Q_0E2T1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before Q, followed by E, followed by T, preceded by A, preceded by A, preceded by V, except...
A_A_Q_0E2T1M1M2.rules.append(V_A_A_Q_0E2T1M1M2M3)
A_Q_0E2T1M1.rules.append(A_A_Q_0E2T1M1M2)
Q_0E2T1.rules.append(A_Q_0E2T1M1)
Q_0E2.rules.append(Q_0E2T1)
Q_0E2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before Q, followed by E, followed by S, except...
A_Q_0E2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by E, followed by S, preceded by A, except...
S_A_Q_0E2S1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before Q, followed by E, followed by S, preceded by A, preceded by S, except...
A_S_A_Q_0E2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by E, followed by S, preceded by A, preceded by S, preceded by A, except...
S_A_Q_0E2S1M1M2.rules.append(A_S_A_Q_0E2S1M1M2M3)
A_Q_0E2S1M1.rules.append(S_A_Q_0E2S1M1M2)
Q_0E2S1.rules.append(A_Q_0E2S1M1)
Q_0E2.rules.append(Q_0E2S1)
Q_0.rules.append(Q_0E2)
Q_0C2 = rule.Rule(2, "C", False, -1) # Never cleaves before Q, followed by C, except...
Q_0C2R1 = rule.Rule(1, "R", False, -1) # Never cleaves before Q, followed by C, followed by R, except...
A_Q_0C2R1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by C, followed by R, preceded by A, except...
Q_A_Q_0C2R1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before Q, followed by C, followed by R, preceded by A, preceded by Q, except...
A_Q_A_Q_0C2R1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by C, followed by R, preceded by A, preceded by Q, preceded by A, except...
Q_A_Q_0C2R1M1M2.rules.append(A_Q_A_Q_0C2R1M1M2M3)
A_Q_0C2R1M1.rules.append(Q_A_Q_0C2R1M1M2)
S_A_Q_0C2R1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before Q, followed by C, followed by R, preceded by A, preceded by S, except...
V_S_A_Q_0C2R1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before Q, followed by C, followed by R, preceded by A, preceded by S, preceded by V, except...
S_A_Q_0C2R1M1M2.rules.append(V_S_A_Q_0C2R1M1M2M3)
A_Q_0C2R1M1.rules.append(S_A_Q_0C2R1M1M2)
Q_0C2R1.rules.append(A_Q_0C2R1M1)
Q_0C2.rules.append(Q_0C2R1)
Q_0C2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before Q, followed by C, followed by A, except...
R_Q_0C2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before Q, followed by C, followed by A, preceded by R, except...
E_R_Q_0C2A1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before Q, followed by C, followed by A, preceded by R, preceded by E, except...
E_E_R_Q_0C2A1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before Q, followed by C, followed by A, preceded by R, preceded by E, preceded by E, except...
E_R_Q_0C2A1M1M2.rules.append(E_E_R_Q_0C2A1M1M2M3)
R_Q_0C2A1M1.rules.append(E_R_Q_0C2A1M1M2)
Q_0C2A1.rules.append(R_Q_0C2A1M1)
Q_0C2.rules.append(Q_0C2A1)
Q_0.rules.append(Q_0C2)
Q_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before Q, followed by P, except...
Q_0P2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before Q, followed by P, followed by D, except...
F_Q_0P2D1M1 = rule.Rule(-1, "F", False, -1) # Never cleaves before Q, followed by P, followed by D, preceded by F, except...
Q_F_Q_0P2D1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before Q, followed by P, followed by D, preceded by F, preceded by Q, except...
A_Q_F_Q_0P2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by P, followed by D, preceded by F, preceded by Q, preceded by A, except...
Q_F_Q_0P2D1M1M2.rules.append(A_Q_F_Q_0P2D1M1M2M3)
F_Q_0P2D1M1.rules.append(Q_F_Q_0P2D1M1M2)
Q_0P2D1.rules.append(F_Q_0P2D1M1)
Q_0P2.rules.append(Q_0P2D1)
Q_0P2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before Q, followed by P, followed by A, except...
A_Q_0P2A1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by P, followed by A, preceded by A, except...
I_A_Q_0P2A1M1M2 = rule.Rule(-2, "I", False, -1) # Never cleaves before Q, followed by P, followed by A, preceded by A, preceded by I, except...
A_I_A_Q_0P2A1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by P, followed by A, preceded by A, preceded by I, preceded by A, except...
I_A_Q_0P2A1M1M2.rules.append(A_I_A_Q_0P2A1M1M2M3)
A_Q_0P2A1M1.rules.append(I_A_Q_0P2A1M1M2)
L_A_Q_0P2A1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before Q, followed by P, followed by A, preceded by A, preceded by L, except...
C_L_A_Q_0P2A1M1M2M3 = rule.Rule(-3, "C", True, -1) # Always cleaves before Q, followed by P, followed by A, preceded by A, preceded by L, preceded by C, except...
L_A_Q_0P2A1M1M2.rules.append(C_L_A_Q_0P2A1M1M2M3)
A_L_A_Q_0P2A1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by P, followed by A, preceded by A, preceded by L, preceded by A, except...
L_A_Q_0P2A1M1M2.rules.append(A_L_A_Q_0P2A1M1M2M3)
V_L_A_Q_0P2A1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before Q, followed by P, followed by A, preceded by A, preceded by L, preceded by V, except...
L_A_Q_0P2A1M1M2.rules.append(V_L_A_Q_0P2A1M1M2M3)
A_Q_0P2A1M1.rules.append(L_A_Q_0P2A1M1M2)
Q_0P2A1.rules.append(A_Q_0P2A1M1)
G_Q_0P2A1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before Q, followed by P, followed by A, preceded by G, except...
T_G_Q_0P2A1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before Q, followed by P, followed by A, preceded by G, preceded by T, except...
V_T_G_Q_0P2A1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before Q, followed by P, followed by A, preceded by G, preceded by T, preceded by V, except...
T_G_Q_0P2A1M1M2.rules.append(V_T_G_Q_0P2A1M1M2M3)
G_Q_0P2A1M1.rules.append(T_G_Q_0P2A1M1M2)
Q_0P2A1.rules.append(G_Q_0P2A1M1)
Q_0P2.rules.append(Q_0P2A1)
Q_0P2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before Q, followed by P, followed by T, except...
T_Q_0P2T1M1 = rule.Rule(-1, "T", False, -1) # Never cleaves before Q, followed by P, followed by T, preceded by T, except...
L_T_Q_0P2T1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before Q, followed by P, followed by T, preceded by T, preceded by L, except...
V_L_T_Q_0P2T1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before Q, followed by P, followed by T, preceded by T, preceded by L, preceded by V, except...
L_T_Q_0P2T1M1M2.rules.append(V_L_T_Q_0P2T1M1M2M3)
T_Q_0P2T1M1.rules.append(L_T_Q_0P2T1M1M2)
Q_0P2T1.rules.append(T_Q_0P2T1M1)
Q_0P2.rules.append(Q_0P2T1)
Q_0.rules.append(Q_0P2)
Q_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before Q, followed by L, except...
Q_0L2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before Q, followed by L, followed by S, except...
A_Q_0L2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by L, followed by S, preceded by A, except...
G_A_Q_0L2S1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before Q, followed by L, followed by S, preceded by A, preceded by G, except...
A_G_A_Q_0L2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by L, followed by S, preceded by A, preceded by G, preceded by A, except...
G_A_Q_0L2S1M1M2.rules.append(A_G_A_Q_0L2S1M1M2M3)
A_Q_0L2S1M1.rules.append(G_A_Q_0L2S1M1M2)
Q_0L2S1.rules.append(A_Q_0L2S1M1)
Q_0L2.rules.append(Q_0L2S1)
Q_0L2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before Q, followed by L, followed by K, except...
A_Q_0L2K1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by L, followed by K, preceded by A, except...
E_A_Q_0L2K1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before Q, followed by L, followed by K, preceded by A, preceded by E, except...
V_E_A_Q_0L2K1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before Q, followed by L, followed by K, preceded by A, preceded by E, preceded by V, except...
E_A_Q_0L2K1M1M2.rules.append(V_E_A_Q_0L2K1M1M2M3)
A_Q_0L2K1M1.rules.append(E_A_Q_0L2K1M1M2)
Q_0L2K1.rules.append(A_Q_0L2K1M1)
Q_0L2.rules.append(Q_0L2K1)
Q_0L2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before Q, followed by L, followed by Q, except...
A_Q_0L2Q1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by L, followed by Q, preceded by A, except...
L_A_Q_0L2Q1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before Q, followed by L, followed by Q, preceded by A, preceded by L, except...
S_L_A_Q_0L2Q1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before Q, followed by L, followed by Q, preceded by A, preceded by L, preceded by S, except...
L_A_Q_0L2Q1M1M2.rules.append(S_L_A_Q_0L2Q1M1M2M3)
A_Q_0L2Q1M1.rules.append(L_A_Q_0L2Q1M1M2)
Q_0L2Q1.rules.append(A_Q_0L2Q1M1)
Q_0L2.rules.append(Q_0L2Q1)
Q_0.rules.append(Q_0L2)
Q_0D2 = rule.Rule(2, "D", False, -1) # Never cleaves before Q, followed by D, except...
Q_0D2F1 = rule.Rule(1, "F", False, -1) # Never cleaves before Q, followed by D, followed by F, except...
A_Q_0D2F1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by D, followed by F, preceded by A, except...
T_A_Q_0D2F1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before Q, followed by D, followed by F, preceded by A, preceded by T, except...
A_T_A_Q_0D2F1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by D, followed by F, preceded by A, preceded by T, preceded by A, except...
T_A_Q_0D2F1M1M2.rules.append(A_T_A_Q_0D2F1M1M2M3)
A_Q_0D2F1M1.rules.append(T_A_Q_0D2F1M1M2)
Q_0D2F1.rules.append(A_Q_0D2F1M1)
Q_0D2.rules.append(Q_0D2F1)
Q_0.rules.append(Q_0D2)
Q_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before Q, followed by S, except...
Q_0S2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before Q, followed by S, followed by L, except...
A_Q_0S2L1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by S, followed by L, preceded by A, except...
N_A_Q_0S2L1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before Q, followed by S, followed by L, preceded by A, preceded by N, except...
C_N_A_Q_0S2L1M1M2M3 = rule.Rule(-3, "C", True, -1) # Always cleaves before Q, followed by S, followed by L, preceded by A, preceded by N, preceded by C, except...
N_A_Q_0S2L1M1M2.rules.append(C_N_A_Q_0S2L1M1M2M3)
A_Q_0S2L1M1.rules.append(N_A_Q_0S2L1M1M2)
Q_0S2L1.rules.append(A_Q_0S2L1M1)
Q_0S2.rules.append(Q_0S2L1)
Q_0S2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before Q, followed by S, followed by A, except...
R_Q_0S2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before Q, followed by S, followed by A, preceded by R, except...
P_R_Q_0S2A1M1M2 = rule.Rule(-2, "P", False, -1) # Never cleaves before Q, followed by S, followed by A, preceded by R, preceded by P, except...
E_P_R_Q_0S2A1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before Q, followed by S, followed by A, preceded by R, preceded by P, preceded by E, except...
P_R_Q_0S2A1M1M2.rules.append(E_P_R_Q_0S2A1M1M2M3)
R_Q_0S2A1M1.rules.append(P_R_Q_0S2A1M1M2)
Q_0S2A1.rules.append(R_Q_0S2A1M1)
Q_0S2.rules.append(Q_0S2A1)
Q_0S2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before Q, followed by S, followed by N, except...
A_Q_0S2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by S, followed by N, preceded by A, except...
E_A_Q_0S2N1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before Q, followed by S, followed by N, preceded by A, preceded by E, except...
C_E_A_Q_0S2N1M1M2M3 = rule.Rule(-3, "C", True, -1) # Always cleaves before Q, followed by S, followed by N, preceded by A, preceded by E, preceded by C, except...
E_A_Q_0S2N1M1M2.rules.append(C_E_A_Q_0S2N1M1M2M3)
A_Q_0S2N1M1.rules.append(E_A_Q_0S2N1M1M2)
Q_0S2N1.rules.append(A_Q_0S2N1M1)
Q_0S2.rules.append(Q_0S2N1)
Q_0.rules.append(Q_0S2)
Q_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before Q, followed by I, except...
Q_0I2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before Q, followed by I, followed by E, except...
A_Q_0I2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by I, followed by E, preceded by A, except...
V_A_Q_0I2E1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before Q, followed by I, followed by E, preceded by A, preceded by V, except...
N_V_A_Q_0I2E1M1M2M3 = rule.Rule(-3, "N", True, -1) # Always cleaves before Q, followed by I, followed by E, preceded by A, preceded by V, preceded by N, except...
V_A_Q_0I2E1M1M2.rules.append(N_V_A_Q_0I2E1M1M2M3)
A_Q_0I2E1M1.rules.append(V_A_Q_0I2E1M1M2)
Q_0I2E1.rules.append(A_Q_0I2E1M1)
Q_0I2.rules.append(Q_0I2E1)
Q_0.rules.append(Q_0I2)
Q_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before Q, followed by A, except...
Q_0A2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before Q, followed by A, followed by A, except...
R_Q_0A2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before Q, followed by A, followed by A, preceded by R, except...
E_R_Q_0A2A1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before Q, followed by A, followed by A, preceded by R, preceded by E, except...
E_E_R_Q_0A2A1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before Q, followed by A, followed by A, preceded by R, preceded by E, preceded by E, except...
E_R_Q_0A2A1M1M2.rules.append(E_E_R_Q_0A2A1M1M2M3)
R_Q_0A2A1M1.rules.append(E_R_Q_0A2A1M1M2)
Q_0A2A1.rules.append(R_Q_0A2A1M1)
Q_0A2.rules.append(Q_0A2A1)
Q_0A2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before Q, followed by A, followed by S, except...
R_Q_0A2S1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before Q, followed by A, followed by S, preceded by R, except...
S_R_Q_0A2S1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before Q, followed by A, followed by S, preceded by R, preceded by S, except...
E_S_R_Q_0A2S1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before Q, followed by A, followed by S, preceded by R, preceded by S, preceded by E, except...
S_R_Q_0A2S1M1M2.rules.append(E_S_R_Q_0A2S1M1M2M3)
R_Q_0A2S1M1.rules.append(S_R_Q_0A2S1M1M2)
Q_0A2S1.rules.append(R_Q_0A2S1M1)
Q_0A2.rules.append(Q_0A2S1)
Q_0.rules.append(Q_0A2)
Q_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before Q, followed by T, except...
Q_0T2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before Q, followed by T, followed by Q, except...
A_Q_0T2Q1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by T, followed by Q, preceded by A, except...
V_A_Q_0T2Q1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before Q, followed by T, followed by Q, preceded by A, preceded by V, except...
A_V_A_Q_0T2Q1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Q, followed by T, followed by Q, preceded by A, preceded by V, preceded by A, except...
V_A_Q_0T2Q1M1M2.rules.append(A_V_A_Q_0T2Q1M1M2M3)
A_Q_0T2Q1M1.rules.append(V_A_Q_0T2Q1M1M2)
Q_0T2Q1.rules.append(A_Q_0T2Q1M1)
Q_0T2.rules.append(Q_0T2Q1)
Q_0T2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before Q, followed by T, followed by L, except...
A_Q_0T2L1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by T, followed by L, preceded by A, except...
D_A_Q_0T2L1M1M2 = rule.Rule(-2, "D", False, -1) # Never cleaves before Q, followed by T, followed by L, preceded by A, preceded by D, except...
S_D_A_Q_0T2L1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before Q, followed by T, followed by L, preceded by A, preceded by D, preceded by S, except...
D_A_Q_0T2L1M1M2.rules.append(S_D_A_Q_0T2L1M1M2M3)
A_Q_0T2L1M1.rules.append(D_A_Q_0T2L1M1M2)
Q_0T2L1.rules.append(A_Q_0T2L1M1)
Q_0T2.rules.append(Q_0T2L1)
Q_0T2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before Q, followed by T, followed by G, except...
G_Q_0T2G1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before Q, followed by T, followed by G, preceded by G, except...
L_G_Q_0T2G1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before Q, followed by T, followed by G, preceded by G, preceded by L, except...
V_L_G_Q_0T2G1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before Q, followed by T, followed by G, preceded by G, preceded by L, preceded by V, except...
L_G_Q_0T2G1M1M2.rules.append(V_L_G_Q_0T2G1M1M2M3)
G_Q_0T2G1M1.rules.append(L_G_Q_0T2G1M1M2)
Q_0T2G1.rules.append(G_Q_0T2G1M1)
Q_0T2.rules.append(Q_0T2G1)
Q_0T2Y1 = rule.Rule(1, "Y", False, -1) # Never cleaves before Q, followed by T, followed by Y, except...
A_Q_0T2Y1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Q, followed by T, followed by Y, preceded by A, except...
S_A_Q_0T2Y1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before Q, followed by T, followed by Y, preceded by A, preceded by S, except...
S_S_A_Q_0T2Y1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before Q, followed by T, followed by Y, preceded by A, preceded by S, preceded by S, except...
S_A_Q_0T2Y1M1M2.rules.append(S_S_A_Q_0T2Y1M1M2M3)
A_Q_0T2Y1M1.rules.append(S_A_Q_0T2Y1M1M2)
Q_0T2Y1.rules.append(A_Q_0T2Y1M1)
Q_0T2.rules.append(Q_0T2Y1)
Q_0.rules.append(Q_0T2)
Q_0Y2 = rule.Rule(2, "Y", False, -1) # Never cleaves before Q, followed by Y, except...
Q_0Y2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before Q, followed by Y, followed by Q, except...
F_Q_0Y2Q1M1 = rule.Rule(-1, "F", False, -1) # Never cleaves before Q, followed by Y, followed by Q, preceded by F, except...
L_F_Q_0Y2Q1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before Q, followed by Y, followed by Q, preceded by F, preceded by L, except...
K_L_F_Q_0Y2Q1M1M2M3 = rule.Rule(-3, "K", True, -1) # Always cleaves before Q, followed by Y, followed by Q, preceded by F, preceded by L, preceded by K, except...
L_F_Q_0Y2Q1M1M2.rules.append(K_L_F_Q_0Y2Q1M1M2M3)
F_Q_0Y2Q1M1.rules.append(L_F_Q_0Y2Q1M1M2)
Q_0Y2Q1.rules.append(F_Q_0Y2Q1M1)
Q_0Y2.rules.append(Q_0Y2Q1)
Q_0.rules.append(Q_0Y2)
ENZ.append(Q_0)

D_0 = rule.Rule(0, "D", False, 0) # Never cleaves before D, except...
D_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before D, followed by L, except...
D_0L2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before D, followed by L, followed by K, except...
A_D_0L2K1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by L, followed by K, preceded by A, except...
L_A_D_0L2K1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before D, followed by L, followed by K, preceded by A, preceded by L, except...
C_L_A_D_0L2K1M1M2M3 = rule.Rule(-3, "C", True, -1) # Always cleaves before D, followed by L, followed by K, preceded by A, preceded by L, preceded by C, except...
L_A_D_0L2K1M1M2.rules.append(C_L_A_D_0L2K1M1M2M3)
A_D_0L2K1M1.rules.append(L_A_D_0L2K1M1M2)
D_0L2K1.rules.append(A_D_0L2K1M1)
D_0L2.rules.append(D_0L2K1)
D_0.rules.append(D_0L2)
D_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before D, followed by T, except...
D_0T2C1 = rule.Rule(1, "C", False, -1) # Never cleaves before D, followed by T, followed by C, except...
R_D_0T2C1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by T, followed by C, preceded by R, except...
R_R_D_0T2C1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before D, followed by T, followed by C, preceded by R, preceded by R, except...
L_R_R_D_0T2C1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before D, followed by T, followed by C, preceded by R, preceded by R, preceded by L, except...
R_R_D_0T2C1M1M2.rules.append(L_R_R_D_0T2C1M1M2M3)
R_D_0T2C1M1.rules.append(R_R_D_0T2C1M1M2)
D_0T2C1.rules.append(R_D_0T2C1M1)
D_0T2.rules.append(D_0T2C1)
D_0T2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before D, followed by T, followed by P, except...
A_D_0T2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by T, followed by P, preceded by A, except...
S_A_D_0T2P1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before D, followed by T, followed by P, preceded by A, preceded by S, except...
C_S_A_D_0T2P1M1M2M3 = rule.Rule(-3, "C", True, -1) # Always cleaves before D, followed by T, followed by P, preceded by A, preceded by S, preceded by C, except...
S_A_D_0T2P1M1M2.rules.append(C_S_A_D_0T2P1M1M2M3)
A_D_0T2P1M1.rules.append(S_A_D_0T2P1M1M2)
D_0T2P1.rules.append(A_D_0T2P1M1)
D_0T2.rules.append(D_0T2P1)
D_0.rules.append(D_0T2)
D_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before D, followed by E, except...
D_0E2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before D, followed by E, followed by S, except...
A_D_0E2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by E, followed by S, preceded by A, except...
I_A_D_0E2S1M1M2 = rule.Rule(-2, "I", False, -1) # Never cleaves before D, followed by E, followed by S, preceded by A, preceded by I, except...
V_I_A_D_0E2S1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before D, followed by E, followed by S, preceded by A, preceded by I, preceded by V, except...
I_A_D_0E2S1M1M2.rules.append(V_I_A_D_0E2S1M1M2M3)
A_D_0E2S1M1.rules.append(I_A_D_0E2S1M1M2)
D_0E2S1.rules.append(A_D_0E2S1M1)
D_0E2.rules.append(D_0E2S1)
D_0.rules.append(D_0E2)
D_0D2 = rule.Rule(2, "D", False, -1) # Never cleaves before D, followed by D, except...
D_0D2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before D, followed by D, followed by D, except...
A_D_0D2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by D, followed by D, preceded by A, except...
T_A_D_0D2D1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before D, followed by D, followed by D, preceded by A, preceded by T, except...
S_T_A_D_0D2D1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before D, followed by D, followed by D, preceded by A, preceded by T, preceded by S, except...
T_A_D_0D2D1M1M2.rules.append(S_T_A_D_0D2D1M1M2M3)
A_D_0D2D1M1.rules.append(T_A_D_0D2D1M1M2)
D_0D2D1.rules.append(A_D_0D2D1M1)
D_0D2.rules.append(D_0D2D1)
D_0D2C1 = rule.Rule(1, "C", False, -1) # Never cleaves before D, followed by D, followed by C, except...
R_D_0D2C1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by D, followed by C, preceded by R, except...
V_R_D_0D2C1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before D, followed by D, followed by C, preceded by R, preceded by V, except...
D_V_R_D_0D2C1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before D, followed by D, followed by C, preceded by R, preceded by V, preceded by D, except...
V_R_D_0D2C1M1M2.rules.append(D_V_R_D_0D2C1M1M2M3)
R_D_0D2C1M1.rules.append(V_R_D_0D2C1M1M2)
D_0D2C1.rules.append(R_D_0D2C1M1)
D_0D2.rules.append(D_0D2C1)
D_0.rules.append(D_0D2)
D_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before D, followed by V, except...
D_0V2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before D, followed by V, followed by N, except...
A_D_0V2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by V, followed by N, preceded by A, except...
M_A_D_0V2N1M1M2 = rule.Rule(-2, "M", False, -1) # Never cleaves before D, followed by V, followed by N, preceded by A, preceded by M, except...
G_M_A_D_0V2N1M1M2M3 = rule.Rule(-3, "G", True, -1) # Always cleaves before D, followed by V, followed by N, preceded by A, preceded by M, preceded by G, except...
M_A_D_0V2N1M1M2.rules.append(G_M_A_D_0V2N1M1M2M3)
A_D_0V2N1M1.rules.append(M_A_D_0V2N1M1M2)
D_0V2N1.rules.append(A_D_0V2N1M1)
D_0V2.rules.append(D_0V2N1)
D_0V2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before D, followed by V, followed by D, except...
A_D_0V2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by V, followed by D, preceded by A, except...
T_A_D_0V2D1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before D, followed by V, followed by D, preceded by A, preceded by T, except...
A_T_A_D_0V2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by V, followed by D, preceded by A, preceded by T, preceded by A, except...
T_A_D_0V2D1M1M2.rules.append(A_T_A_D_0V2D1M1M2M3)
A_D_0V2D1M1.rules.append(T_A_D_0V2D1M1M2)
D_0V2D1.rules.append(A_D_0V2D1M1)
D_0V2.rules.append(D_0V2D1)
D_0V2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before D, followed by V, followed by P, except...
G_D_0V2P1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before D, followed by V, followed by P, preceded by G, except...
H_G_D_0V2P1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before D, followed by V, followed by P, preceded by G, preceded by H, except...
C_H_G_D_0V2P1M1M2M3 = rule.Rule(-3, "C", True, -1) # Always cleaves before D, followed by V, followed by P, preceded by G, preceded by H, preceded by C, except...
H_G_D_0V2P1M1M2.rules.append(C_H_G_D_0V2P1M1M2M3)
G_D_0V2P1M1.rules.append(H_G_D_0V2P1M1M2)
Q_G_D_0V2P1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before D, followed by V, followed by P, preceded by G, preceded by Q, except...
C_Q_G_D_0V2P1M1M2M3 = rule.Rule(-3, "C", True, -1) # Always cleaves before D, followed by V, followed by P, preceded by G, preceded by Q, preceded by C, except...
Q_G_D_0V2P1M1M2.rules.append(C_Q_G_D_0V2P1M1M2M3)
G_D_0V2P1M1.rules.append(Q_G_D_0V2P1M1M2)
D_0V2P1.rules.append(G_D_0V2P1M1)
D_0V2.rules.append(D_0V2P1)
D_0.rules.append(D_0V2)
D_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before D, followed by A, except...
D_0A2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before D, followed by A, followed by P, except...
A_D_0A2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by A, followed by P, preceded by A, except...
L_A_D_0A2P1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before D, followed by A, followed by P, preceded by A, preceded by L, except...
A_L_A_D_0A2P1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by A, followed by P, preceded by A, preceded by L, preceded by A, except...
L_A_D_0A2P1M1M2.rules.append(A_L_A_D_0A2P1M1M2M3)
A_D_0A2P1M1.rules.append(L_A_D_0A2P1M1M2)
D_0A2P1.rules.append(A_D_0A2P1M1)
D_0A2.rules.append(D_0A2P1)
D_0A2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before D, followed by A, followed by S, except...
A_D_0A2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by A, followed by S, preceded by A, except...
A_A_D_0A2S1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before D, followed by A, followed by S, preceded by A, preceded by A, except...
S_A_A_D_0A2S1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before D, followed by A, followed by S, preceded by A, preceded by A, preceded by S, except...
A_A_D_0A2S1M1M2.rules.append(S_A_A_D_0A2S1M1M2M3)
A_D_0A2S1M1.rules.append(A_A_D_0A2S1M1M2)
D_0A2S1.rules.append(A_D_0A2S1M1)
D_0A2.rules.append(D_0A2S1)
D_0.rules.append(D_0A2)
D_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before D, followed by P, except...
D_0P2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before D, followed by P, followed by N, except...
S_D_0P2N1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before D, followed by P, followed by N, preceded by S, except...
Y_S_D_0P2N1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before D, followed by P, followed by N, preceded by S, preceded by Y, except...
C_Y_S_D_0P2N1M1M2M3 = rule.Rule(-3, "C", True, -1) # Always cleaves before D, followed by P, followed by N, preceded by S, preceded by Y, preceded by C, except...
Y_S_D_0P2N1M1M2.rules.append(C_Y_S_D_0P2N1M1M2M3)
S_D_0P2N1M1.rules.append(Y_S_D_0P2N1M1M2)
C_S_D_0P2N1M1M2 = rule.Rule(-2, "C", False, -1) # Never cleaves before D, followed by P, followed by N, preceded by S, preceded by C, except...
C_C_S_D_0P2N1M1M2M3 = rule.Rule(-3, "C", True, -1) # Always cleaves before D, followed by P, followed by N, preceded by S, preceded by C, preceded by C, except...
C_S_D_0P2N1M1M2.rules.append(C_C_S_D_0P2N1M1M2M3)
S_D_0P2N1M1.rules.append(C_S_D_0P2N1M1M2)
F_S_D_0P2N1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before D, followed by P, followed by N, preceded by S, preceded by F, except...
C_F_S_D_0P2N1M1M2M3 = rule.Rule(-3, "C", True, -1) # Always cleaves before D, followed by P, followed by N, preceded by S, preceded by F, preceded by C, except...
F_S_D_0P2N1M1M2.rules.append(C_F_S_D_0P2N1M1M2M3)
S_D_0P2N1M1.rules.append(F_S_D_0P2N1M1M2)
D_0P2N1.rules.append(S_D_0P2N1M1)
D_0P2.rules.append(D_0P2N1)
D_0.rules.append(D_0P2)
D_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before D, followed by S, except...
D_0S2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before D, followed by S, followed by V, except...
R_D_0S2V1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before D, followed by S, followed by V, preceded by R, except...
S_R_D_0S2V1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before D, followed by S, followed by V, preceded by R, preceded by S, except...
Q_S_R_D_0S2V1M1M2M3 = rule.Rule(-3, "Q", True, -1) # Always cleaves before D, followed by S, followed by V, preceded by R, preceded by S, preceded by Q, except...
S_R_D_0S2V1M1M2.rules.append(Q_S_R_D_0S2V1M1M2M3)
R_D_0S2V1M1.rules.append(S_R_D_0S2V1M1M2)
D_0S2V1.rules.append(R_D_0S2V1M1)
G_D_0S2V1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before D, followed by S, followed by V, preceded by G, except...
E_G_D_0S2V1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before D, followed by S, followed by V, preceded by G, preceded by E, except...
V_E_G_D_0S2V1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before D, followed by S, followed by V, preceded by G, preceded by E, preceded by V, except...
E_G_D_0S2V1M1M2.rules.append(V_E_G_D_0S2V1M1M2M3)
G_D_0S2V1M1.rules.append(E_G_D_0S2V1M1M2)
K_G_D_0S2V1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by S, followed by V, preceded by G, preceded by K, except...
V_K_G_D_0S2V1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before D, followed by S, followed by V, preceded by G, preceded by K, preceded by V, except...
K_G_D_0S2V1M1M2.rules.append(V_K_G_D_0S2V1M1M2M3)
G_D_0S2V1M1.rules.append(K_G_D_0S2V1M1M2)
D_0S2V1.rules.append(G_D_0S2V1M1)
D_0S2.rules.append(D_0S2V1)
D_0S2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before D, followed by S, followed by T, except...
A_D_0S2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before D, followed by S, followed by T, preceded by A, except...
V_A_D_0S2T1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before D, followed by S, followed by T, preceded by A, preceded by V, except...
A_V_A_D_0S2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by S, followed by T, preceded by A, preceded by V, preceded by A, except...
V_A_D_0S2T1M1M2.rules.append(A_V_A_D_0S2T1M1M2M3)
A_D_0S2T1M1.rules.append(V_A_D_0S2T1M1M2)
D_0S2T1.rules.append(A_D_0S2T1M1)
D_0S2.rules.append(D_0S2T1)
D_0.rules.append(D_0S2)
D_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before D, followed by N, except...
D_0N2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before D, followed by N, followed by V, except...
G_D_0N2V1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before D, followed by N, followed by V, preceded by G, except...
K_G_D_0N2V1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before D, followed by N, followed by V, preceded by G, preceded by K, except...
A_K_G_D_0N2V1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by N, followed by V, preceded by G, preceded by K, preceded by A, except...
K_G_D_0N2V1M1M2.rules.append(A_K_G_D_0N2V1M1M2M3)
G_D_0N2V1M1.rules.append(K_G_D_0N2V1M1M2)
D_0N2V1.rules.append(G_D_0N2V1M1)
D_0N2.rules.append(D_0N2V1)
D_0N2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before D, followed by N, followed by I, except...
C_D_0N2I1M1 = rule.Rule(-1, "C", False, -1) # Never cleaves before D, followed by N, followed by I, preceded by C, except...
E_C_D_0N2I1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before D, followed by N, followed by I, preceded by C, preceded by E, except...
A_E_C_D_0N2I1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before D, followed by N, followed by I, preceded by C, preceded by E, preceded by A, except...
E_C_D_0N2I1M1M2.rules.append(A_E_C_D_0N2I1M1M2M3)
C_D_0N2I1M1.rules.append(E_C_D_0N2I1M1M2)
D_0N2I1.rules.append(C_D_0N2I1M1)
D_0N2.rules.append(D_0N2I1)
D_0.rules.append(D_0N2)
ENZ.append(D_0)

S_0 = rule.Rule(0, "S", False, 0) # Never cleaves before S, except...
S_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before S, followed by S, except...
S_0S2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before S, followed by S, followed by V, except...
G_S_0S2V1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before S, followed by S, followed by V, preceded by G, except...
R_G_S_0S2V1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before S, followed by S, followed by V, preceded by G, preceded by R, except...
A_R_G_S_0S2V1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before S, followed by S, followed by V, preceded by G, preceded by R, preceded by A, except...
R_G_S_0S2V1M1M2.rules.append(A_R_G_S_0S2V1M1M2M3)
G_S_0S2V1M1.rules.append(R_G_S_0S2V1M1M2)
H_G_S_0S2V1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before S, followed by S, followed by V, preceded by G, preceded by H, except...
A_H_G_S_0S2V1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before S, followed by S, followed by V, preceded by G, preceded by H, preceded by A, except...
H_G_S_0S2V1M1M2.rules.append(A_H_G_S_0S2V1M1M2M3)
G_S_0S2V1M1.rules.append(H_G_S_0S2V1M1M2)
S_0S2V1.rules.append(G_S_0S2V1M1)
S_0S2.rules.append(S_0S2V1)
S_0S2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before S, followed by S, followed by K, except...
G_S_0S2K1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before S, followed by S, followed by K, preceded by G, except...
A_G_S_0S2K1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before S, followed by S, followed by K, preceded by G, preceded by A, except...
S_A_G_S_0S2K1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before S, followed by S, followed by K, preceded by G, preceded by A, preceded by S, except...
A_G_S_0S2K1M1M2.rules.append(S_A_G_S_0S2K1M1M2M3)
G_S_0S2K1M1.rules.append(A_G_S_0S2K1M1M2)
S_0S2K1.rules.append(G_S_0S2K1M1)
S_0S2.rules.append(S_0S2K1)
S_0S2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before S, followed by S, followed by D, except...
S_S_0S2D1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before S, followed by S, followed by D, preceded by S, except...
N_S_S_0S2D1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before S, followed by S, followed by D, preceded by S, preceded by N, except...
V_N_S_S_0S2D1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before S, followed by S, followed by D, preceded by S, preceded by N, preceded by V, except...
N_S_S_0S2D1M1M2.rules.append(V_N_S_S_0S2D1M1M2M3)
S_S_0S2D1M1.rules.append(N_S_S_0S2D1M1M2)
S_0S2D1.rules.append(S_S_0S2D1M1)
N_S_0S2D1M1 = rule.Rule(-1, "N", False, -1) # Never cleaves before S, followed by S, followed by D, preceded by N, except...
S_N_S_0S2D1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before S, followed by S, followed by D, preceded by N, preceded by S, except...
N_S_N_S_0S2D1M1M2M3 = rule.Rule(-3, "N", True, -1) # Always cleaves before S, followed by S, followed by D, preceded by N, preceded by S, preceded by N, except...
S_N_S_0S2D1M1M2.rules.append(N_S_N_S_0S2D1M1M2M3)
N_S_0S2D1M1.rules.append(S_N_S_0S2D1M1M2)
S_0S2D1.rules.append(N_S_0S2D1M1)
S_0S2.rules.append(S_0S2D1)
S_0S2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before S, followed by S, followed by G, except...
A_S_0S2G1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before S, followed by S, followed by G, preceded by A, except...
S_A_S_0S2G1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before S, followed by S, followed by G, preceded by A, preceded by S, except...
A_S_A_S_0S2G1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before S, followed by S, followed by G, preceded by A, preceded by S, preceded by A, except...
S_A_S_0S2G1M1M2.rules.append(A_S_A_S_0S2G1M1M2M3)
A_S_0S2G1M1.rules.append(S_A_S_0S2G1M1M2)
S_0S2G1.rules.append(A_S_0S2G1M1)
S_0S2.rules.append(S_0S2G1)
S_0.rules.append(S_0S2)
S_0W2 = rule.Rule(2, "W", False, -1) # Never cleaves before S, followed by W, except...
S_0W2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before S, followed by W, followed by K, except...
A_S_0W2K1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before S, followed by W, followed by K, preceded by A, except...
S_A_S_0W2K1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before S, followed by W, followed by K, preceded by A, preceded by S, except...
C_S_A_S_0W2K1M1M2M3 = rule.Rule(-3, "C", True, -1) # Always cleaves before S, followed by W, followed by K, preceded by A, preceded by S, preceded by C, except...
S_A_S_0W2K1M1M2.rules.append(C_S_A_S_0W2K1M1M2M3)
A_S_0W2K1M1.rules.append(S_A_S_0W2K1M1M2)
S_0W2K1.rules.append(A_S_0W2K1M1)
S_0W2.rules.append(S_0W2K1)
S_0W2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before S, followed by W, followed by E, except...
R_S_0W2E1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before S, followed by W, followed by E, preceded by R, except...
I_R_S_0W2E1M1M2 = rule.Rule(-2, "I", False, -1) # Never cleaves before S, followed by W, followed by E, preceded by R, preceded by I, except...
F_I_R_S_0W2E1M1M2M3 = rule.Rule(-3, "F", True, -1) # Always cleaves before S, followed by W, followed by E, preceded by R, preceded by I, preceded by F, except...
I_R_S_0W2E1M1M2.rules.append(F_I_R_S_0W2E1M1M2M3)
R_S_0W2E1M1.rules.append(I_R_S_0W2E1M1M2)
S_0W2E1.rules.append(R_S_0W2E1M1)
S_0W2.rules.append(S_0W2E1)
S_0.rules.append(S_0W2)
S_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before S, followed by P, except...
S_0P2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before S, followed by P, followed by G, except...
N_S_0P2G1M1 = rule.Rule(-1, "N", False, -1) # Never cleaves before S, followed by P, followed by G, preceded by N, except...
H_N_S_0P2G1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before S, followed by P, followed by G, preceded by N, preceded by H, except...
S_H_N_S_0P2G1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before S, followed by P, followed by G, preceded by N, preceded by H, preceded by S, except...
H_N_S_0P2G1M1M2.rules.append(S_H_N_S_0P2G1M1M2M3)
N_S_0P2G1M1.rules.append(H_N_S_0P2G1M1M2)
D_N_S_0P2G1M1M2 = rule.Rule(-2, "D", False, -1) # Never cleaves before S, followed by P, followed by G, preceded by N, preceded by D, except...
S_D_N_S_0P2G1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before S, followed by P, followed by G, preceded by N, preceded by D, preceded by S, except...
D_N_S_0P2G1M1M2.rules.append(S_D_N_S_0P2G1M1M2M3)
N_S_0P2G1M1.rules.append(D_N_S_0P2G1M1M2)
S_0P2G1.rules.append(N_S_0P2G1M1)
S_0P2.rules.append(S_0P2G1)
S_0.rules.append(S_0P2)
S_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before S, followed by E, except...
S_0E2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before S, followed by E, followed by I, except...
G_S_0E2I1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before S, followed by E, followed by I, preceded by G, except...
Y_G_S_0E2I1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before S, followed by E, followed by I, preceded by G, preceded by Y, except...
V_Y_G_S_0E2I1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before S, followed by E, followed by I, preceded by G, preceded by Y, preceded by V, except...
Y_G_S_0E2I1M1M2.rules.append(V_Y_G_S_0E2I1M1M2M3)
G_S_0E2I1M1.rules.append(Y_G_S_0E2I1M1M2)
S_0E2I1.rules.append(G_S_0E2I1M1)
S_0E2.rules.append(S_0E2I1)
S_0.rules.append(S_0E2)
S_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before S, followed by T, except...
S_0T2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before S, followed by T, followed by T, except...
L_S_0T2T1M1 = rule.Rule(-1, "L", False, -1) # Never cleaves before S, followed by T, followed by T, preceded by L, except...
L_L_S_0T2T1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before S, followed by T, followed by T, preceded by L, preceded by L, except...
S_L_L_S_0T2T1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before S, followed by T, followed by T, preceded by L, preceded by L, preceded by S, except...
L_L_S_0T2T1M1M2.rules.append(S_L_L_S_0T2T1M1M2M3)
L_S_0T2T1M1.rules.append(L_L_S_0T2T1M1M2)
S_0T2T1.rules.append(L_S_0T2T1M1)
S_0T2.rules.append(S_0T2T1)
S_0.rules.append(S_0T2)
S_0F2 = rule.Rule(2, "F", False, -1) # Never cleaves before S, followed by F, except...
S_0F2Y1 = rule.Rule(1, "Y", False, -1) # Never cleaves before S, followed by F, followed by Y, except...
A_S_0F2Y1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before S, followed by F, followed by Y, preceded by A, except...
Q_A_S_0F2Y1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before S, followed by F, followed by Y, preceded by A, preceded by Q, except...
S_Q_A_S_0F2Y1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before S, followed by F, followed by Y, preceded by A, preceded by Q, preceded by S, except...
Q_A_S_0F2Y1M1M2.rules.append(S_Q_A_S_0F2Y1M1M2M3)
A_S_0F2Y1M1.rules.append(Q_A_S_0F2Y1M1M2)
S_0F2Y1.rules.append(A_S_0F2Y1M1)
S_0F2.rules.append(S_0F2Y1)
S_0F2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before S, followed by F, followed by A, except...
G_S_0F2A1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before S, followed by F, followed by A, preceded by G, except...
N_G_S_0F2A1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before S, followed by F, followed by A, preceded by G, preceded by N, except...
V_N_G_S_0F2A1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before S, followed by F, followed by A, preceded by G, preceded by N, preceded by V, except...
N_G_S_0F2A1M1M2.rules.append(V_N_G_S_0F2A1M1M2M3)
G_S_0F2A1M1.rules.append(N_G_S_0F2A1M1M2)
S_0F2A1.rules.append(G_S_0F2A1M1)
S_0F2.rules.append(S_0F2A1)
S_0.rules.append(S_0F2)
S_0D2 = rule.Rule(2, "D", False, -1) # Never cleaves before S, followed by D, except...
S_0D2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before S, followed by D, followed by N, except...
S_S_0D2N1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before S, followed by D, followed by N, preceded by S, except...
N_S_S_0D2N1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before S, followed by D, followed by N, preceded by S, preceded by N, except...
A_N_S_S_0D2N1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before S, followed by D, followed by N, preceded by S, preceded by N, preceded by A, except...
N_S_S_0D2N1M1M2.rules.append(A_N_S_S_0D2N1M1M2M3)
S_S_0D2N1M1.rules.append(N_S_S_0D2N1M1M2)
S_0D2N1.rules.append(S_S_0D2N1M1)
S_0D2.rules.append(S_0D2N1)
S_0D2Y1 = rule.Rule(1, "Y", False, -1) # Never cleaves before S, followed by D, followed by Y, except...
A_S_0D2Y1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before S, followed by D, followed by Y, preceded by A, except...
N_A_S_0D2Y1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before S, followed by D, followed by Y, preceded by A, preceded by N, except...
V_N_A_S_0D2Y1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before S, followed by D, followed by Y, preceded by A, preceded by N, preceded by V, except...
N_A_S_0D2Y1M1M2.rules.append(V_N_A_S_0D2Y1M1M2M3)
A_S_0D2Y1M1.rules.append(N_A_S_0D2Y1M1M2)
S_0D2Y1.rules.append(A_S_0D2Y1M1)
S_0D2.rules.append(S_0D2Y1)
S_0.rules.append(S_0D2)
S_0R2 = rule.Rule(2, "R", False, -1) # Never cleaves before S, followed by R, except...
S_0R2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before S, followed by R, followed by E, except...
A_S_0R2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before S, followed by R, followed by E, preceded by A, except...
A_A_S_0R2E1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before S, followed by R, followed by E, preceded by A, preceded by A, except...
A_A_A_S_0R2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before S, followed by R, followed by E, preceded by A, preceded by A, preceded by A, except...
A_A_S_0R2E1M1M2.rules.append(A_A_A_S_0R2E1M1M2M3)
A_S_0R2E1M1.rules.append(A_A_S_0R2E1M1M2)
S_0R2E1.rules.append(A_S_0R2E1M1)
S_0R2.rules.append(S_0R2E1)
S_0.rules.append(S_0R2)
S_0H2 = rule.Rule(2, "H", False, -1) # Never cleaves before S, followed by H, except...
S_0H2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before S, followed by H, followed by T, except...
S_S_0H2T1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before S, followed by H, followed by T, preceded by S, except...
S_S_S_0H2T1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before S, followed by H, followed by T, preceded by S, preceded by S, except...
V_S_S_S_0H2T1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before S, followed by H, followed by T, preceded by S, preceded by S, preceded by V, except...
S_S_S_0H2T1M1M2.rules.append(V_S_S_S_0H2T1M1M2M3)
S_S_0H2T1M1.rules.append(S_S_S_0H2T1M1M2)
S_0H2T1.rules.append(S_S_0H2T1M1)
S_0H2.rules.append(S_0H2T1)
S_0.rules.append(S_0H2)
S_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before S, followed by G, except...
S_0G2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before S, followed by G, followed by A, except...
R_S_0G2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before S, followed by G, followed by A, preceded by R, except...
S_R_S_0G2A1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before S, followed by G, followed by A, preceded by R, preceded by S, except...
V_S_R_S_0G2A1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before S, followed by G, followed by A, preceded by R, preceded by S, preceded by V, except...
S_R_S_0G2A1M1M2.rules.append(V_S_R_S_0G2A1M1M2M3)
R_S_0G2A1M1.rules.append(S_R_S_0G2A1M1M2)
S_0G2A1.rules.append(R_S_0G2A1M1)
S_0G2.rules.append(S_0G2A1)
S_0.rules.append(S_0G2)
S_0M2 = rule.Rule(2, "M", False, -1) # Never cleaves before S, followed by M, except...
S_0M2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before S, followed by M, followed by S, except...
A_S_0M2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before S, followed by M, followed by S, preceded by A, except...
Q_A_S_0M2S1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before S, followed by M, followed by S, preceded by A, preceded by Q, except...
V_Q_A_S_0M2S1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before S, followed by M, followed by S, preceded by A, preceded by Q, preceded by V, except...
Q_A_S_0M2S1M1M2.rules.append(V_Q_A_S_0M2S1M1M2M3)
A_S_0M2S1M1.rules.append(Q_A_S_0M2S1M1M2)
S_0M2S1.rules.append(A_S_0M2S1M1)
S_0M2.rules.append(S_0M2S1)
S_0.rules.append(S_0M2)
S_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before S, followed by I, except...
S_0I2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before S, followed by I, followed by Q, except...
G_S_0I2Q1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before S, followed by I, followed by Q, preceded by G, except...
E_G_S_0I2Q1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before S, followed by I, followed by Q, preceded by G, preceded by E, except...
S_E_G_S_0I2Q1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before S, followed by I, followed by Q, preceded by G, preceded by E, preceded by S, except...
E_G_S_0I2Q1M1M2.rules.append(S_E_G_S_0I2Q1M1M2M3)
G_S_0I2Q1M1.rules.append(E_G_S_0I2Q1M1M2)
S_0I2Q1.rules.append(G_S_0I2Q1M1)
S_0I2.rules.append(S_0I2Q1)
S_0I2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before S, followed by I, followed by P, except...
S_S_0I2P1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before S, followed by I, followed by P, preceded by S, except...
S_S_S_0I2P1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before S, followed by I, followed by P, preceded by S, preceded by S, except...
S_S_S_S_0I2P1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before S, followed by I, followed by P, preceded by S, preceded by S, preceded by S, except...
S_S_S_0I2P1M1M2.rules.append(S_S_S_S_0I2P1M1M2M3)
S_S_0I2P1M1.rules.append(S_S_S_0I2P1M1M2)
S_0I2P1.rules.append(S_S_0I2P1M1)
S_0I2.rules.append(S_0I2P1)
S_0.rules.append(S_0I2)
S_0Q2 = rule.Rule(2, "Q", False, -1) # Never cleaves before S, followed by Q, except...
S_0Q2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before S, followed by Q, followed by N, except...
K_S_0Q2N1M1 = rule.Rule(-1, "K", False, -1) # Never cleaves before S, followed by Q, followed by N, preceded by K, except...
P_K_S_0Q2N1M1M2 = rule.Rule(-2, "P", False, -1) # Never cleaves before S, followed by Q, followed by N, preceded by K, preceded by P, except...
E_P_K_S_0Q2N1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before S, followed by Q, followed by N, preceded by K, preceded by P, preceded by E, except...
P_K_S_0Q2N1M1M2.rules.append(E_P_K_S_0Q2N1M1M2M3)
K_S_0Q2N1M1.rules.append(P_K_S_0Q2N1M1M2)
S_0Q2N1.rules.append(K_S_0Q2N1M1)
S_0Q2.rules.append(S_0Q2N1)
S_0.rules.append(S_0Q2)
S_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before S, followed by A, except...
S_0A2Y1 = rule.Rule(1, "Y", False, -1) # Never cleaves before S, followed by A, followed by Y, except...
G_S_0A2Y1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before S, followed by A, followed by Y, preceded by G, except...
K_G_S_0A2Y1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before S, followed by A, followed by Y, preceded by G, preceded by K, except...
D_K_G_S_0A2Y1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before S, followed by A, followed by Y, preceded by G, preceded by K, preceded by D, except...
K_G_S_0A2Y1M1M2.rules.append(D_K_G_S_0A2Y1M1M2M3)
G_S_0A2Y1M1.rules.append(K_G_S_0A2Y1M1M2)
S_0A2Y1.rules.append(G_S_0A2Y1M1)
S_0A2.rules.append(S_0A2Y1)
S_0.rules.append(S_0A2)
S_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before S, followed by V, except...
S_0V2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before S, followed by V, followed by G, except...
A_S_0V2G1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before S, followed by V, followed by G, preceded by A, except...
Y_A_S_0V2G1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before S, followed by V, followed by G, preceded by A, preceded by Y, except...
T_Y_A_S_0V2G1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before S, followed by V, followed by G, preceded by A, preceded by Y, preceded by T, except...
Y_A_S_0V2G1M1M2.rules.append(T_Y_A_S_0V2G1M1M2M3)
A_S_0V2G1M1.rules.append(Y_A_S_0V2G1M1M2)
S_0V2G1.rules.append(A_S_0V2G1M1)
S_0V2.rules.append(S_0V2G1)
S_0.rules.append(S_0V2)
S_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before S, followed by N, except...
S_0N2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before S, followed by N, followed by T, except...
A_S_0N2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before S, followed by N, followed by T, preceded by A, except...
S_A_S_0N2T1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before S, followed by N, followed by T, preceded by A, preceded by S, except...
V_S_A_S_0N2T1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before S, followed by N, followed by T, preceded by A, preceded by S, preceded by V, except...
S_A_S_0N2T1M1M2.rules.append(V_S_A_S_0N2T1M1M2M3)
A_S_0N2T1M1.rules.append(S_A_S_0N2T1M1M2)
S_0N2T1.rules.append(A_S_0N2T1M1)
S_0N2.rules.append(S_0N2T1)
S_0.rules.append(S_0N2)
S_0K2 = rule.Rule(2, "K", False, -1) # Never cleaves before S, followed by K, except...
S_0K2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before S, followed by K, followed by S, except...
E_S_0K2S1M1 = rule.Rule(-1, "E", False, -1) # Never cleaves before S, followed by K, followed by S, preceded by E, except...
Y_E_S_0K2S1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before S, followed by K, followed by S, preceded by E, preceded by Y, except...
I_Y_E_S_0K2S1M1M2M3 = rule.Rule(-3, "I", True, -1) # Always cleaves before S, followed by K, followed by S, preceded by E, preceded by Y, preceded by I, except...
Y_E_S_0K2S1M1M2.rules.append(I_Y_E_S_0K2S1M1M2M3)
E_S_0K2S1M1.rules.append(Y_E_S_0K2S1M1M2)
S_0K2S1.rules.append(E_S_0K2S1M1)
S_0K2.rules.append(S_0K2S1)
S_0.rules.append(S_0K2)
S_0C2 = rule.Rule(2, "C", False, -1) # Never cleaves before S, followed by C, except...
S_0C2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before S, followed by C, followed by S, except...
A_S_0C2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before S, followed by C, followed by S, preceded by A, except...
L_A_S_0C2S1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before S, followed by C, followed by S, preceded by A, preceded by L, except...
T_L_A_S_0C2S1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before S, followed by C, followed by S, preceded by A, preceded by L, preceded by T, except...
L_A_S_0C2S1M1M2.rules.append(T_L_A_S_0C2S1M1M2M3)
A_S_0C2S1M1.rules.append(L_A_S_0C2S1M1M2)
S_0C2S1.rules.append(A_S_0C2S1M1)
S_0C2.rules.append(S_0C2S1)
S_0.rules.append(S_0C2)
ENZ.append(S_0)

Y_0 = rule.Rule(0, "Y", False, 0) # Never cleaves before Y, except...
Y_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before Y, followed by T, except...
Y_0T2R1 = rule.Rule(1, "R", False, -1) # Never cleaves before Y, followed by T, followed by R, except...
A_Y_0T2R1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Y, followed by T, followed by R, preceded by A, except...
Y_A_Y_0T2R1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before Y, followed by T, followed by R, preceded by A, preceded by Y, except...
A_Y_A_Y_0T2R1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Y, followed by T, followed by R, preceded by A, preceded by Y, preceded by A, except...
Y_A_Y_0T2R1M1M2.rules.append(A_Y_A_Y_0T2R1M1M2M3)
A_Y_0T2R1M1.rules.append(Y_A_Y_0T2R1M1M2)
Y_0T2R1.rules.append(A_Y_0T2R1M1)
Y_0T2.rules.append(Y_0T2R1)
Y_0T2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before Y, followed by T, followed by K, except...
S_Y_0T2K1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before Y, followed by T, followed by K, preceded by S, except...
Q_S_Y_0T2K1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before Y, followed by T, followed by K, preceded by S, preceded by Q, except...
T_Q_S_Y_0T2K1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before Y, followed by T, followed by K, preceded by S, preceded by Q, preceded by T, except...
Q_S_Y_0T2K1M1M2.rules.append(T_Q_S_Y_0T2K1M1M2M3)
S_Y_0T2K1M1.rules.append(Q_S_Y_0T2K1M1M2)
Y_0T2K1.rules.append(S_Y_0T2K1M1)
Y_0T2.rules.append(Y_0T2K1)
Y_0.rules.append(Y_0T2)
Y_0D2 = rule.Rule(2, "D", False, -1) # Never cleaves before Y, followed by D, except...
Y_0D2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before Y, followed by D, followed by A, except...
G_Y_0D2A1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before Y, followed by D, followed by A, preceded by G, except...
H_G_Y_0D2A1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before Y, followed by D, followed by A, preceded by G, preceded by H, except...
V_H_G_Y_0D2A1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before Y, followed by D, followed by A, preceded by G, preceded by H, preceded by V, except...
H_G_Y_0D2A1M1M2.rules.append(V_H_G_Y_0D2A1M1M2M3)
G_Y_0D2A1M1.rules.append(H_G_Y_0D2A1M1M2)
Y_0D2A1.rules.append(G_Y_0D2A1M1)
Y_0D2.rules.append(Y_0D2A1)
Y_0.rules.append(Y_0D2)
Y_0R2 = rule.Rule(2, "R", False, -1) # Never cleaves before Y, followed by R, except...
Y_0R2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before Y, followed by R, followed by E, except...
S_Y_0R2E1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before Y, followed by R, followed by E, preceded by S, except...
F_S_Y_0R2E1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before Y, followed by R, followed by E, preceded by S, preceded by F, except...
K_F_S_Y_0R2E1M1M2M3 = rule.Rule(-3, "K", True, -1) # Always cleaves before Y, followed by R, followed by E, preceded by S, preceded by F, preceded by K, except...
F_S_Y_0R2E1M1M2.rules.append(K_F_S_Y_0R2E1M1M2M3)
S_Y_0R2E1M1.rules.append(F_S_Y_0R2E1M1M2)
Y_0R2E1.rules.append(S_Y_0R2E1M1)
Y_0R2.rules.append(Y_0R2E1)
Y_0.rules.append(Y_0R2)
Y_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before Y, followed by A, except...
Y_0A2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before Y, followed by A, followed by V, except...
A_Y_0A2V1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Y, followed by A, followed by V, preceded by A, except...
L_A_Y_0A2V1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before Y, followed by A, followed by V, preceded by A, preceded by L, except...
V_L_A_Y_0A2V1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before Y, followed by A, followed by V, preceded by A, preceded by L, preceded by V, except...
L_A_Y_0A2V1M1M2.rules.append(V_L_A_Y_0A2V1M1M2M3)
A_Y_0A2V1M1.rules.append(L_A_Y_0A2V1M1M2)
Y_0A2V1.rules.append(A_Y_0A2V1M1)
Y_0A2.rules.append(Y_0A2V1)
Y_0A2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before Y, followed by A, followed by A, except...
P_Y_0A2A1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before Y, followed by A, followed by A, preceded by P, except...
L_P_Y_0A2A1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before Y, followed by A, followed by A, preceded by P, preceded by L, except...
A_L_P_Y_0A2A1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Y, followed by A, followed by A, preceded by P, preceded by L, preceded by A, except...
L_P_Y_0A2A1M1M2.rules.append(A_L_P_Y_0A2A1M1M2M3)
P_Y_0A2A1M1.rules.append(L_P_Y_0A2A1M1M2)
Y_0A2A1.rules.append(P_Y_0A2A1M1)
Y_0A2.rules.append(Y_0A2A1)
Y_0.rules.append(Y_0A2)
Y_0C2 = rule.Rule(2, "C", False, -1) # Never cleaves before Y, followed by C, except...
Y_0C2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before Y, followed by C, followed by S, except...
G_Y_0C2S1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before Y, followed by C, followed by S, preceded by G, except...
Y_G_Y_0C2S1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before Y, followed by C, followed by S, preceded by G, preceded by Y, except...
A_Y_G_Y_0C2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Y, followed by C, followed by S, preceded by G, preceded by Y, preceded by A, except...
Y_G_Y_0C2S1M1M2.rules.append(A_Y_G_Y_0C2S1M1M2M3)
G_Y_0C2S1M1.rules.append(Y_G_Y_0C2S1M1M2)
Y_0C2S1.rules.append(G_Y_0C2S1M1)
Y_0C2.rules.append(Y_0C2S1)
Y_0.rules.append(Y_0C2)
Y_0Y2 = rule.Rule(2, "Y", False, -1) # Never cleaves before Y, followed by Y, except...
Y_0Y2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before Y, followed by Y, followed by D, except...
A_Y_0Y2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before Y, followed by Y, followed by D, preceded by A, except...
N_A_Y_0Y2D1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before Y, followed by Y, followed by D, preceded by A, preceded by N, except...
A_N_A_Y_0Y2D1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before Y, followed by Y, followed by D, preceded by A, preceded by N, preceded by A, except...
N_A_Y_0Y2D1M1M2.rules.append(A_N_A_Y_0Y2D1M1M2M3)
A_Y_0Y2D1M1.rules.append(N_A_Y_0Y2D1M1M2)
Y_0Y2D1.rules.append(A_Y_0Y2D1M1)
G_Y_0Y2D1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before Y, followed by Y, followed by D, preceded by G, except...
V_G_Y_0Y2D1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before Y, followed by Y, followed by D, preceded by G, preceded by V, except...
T_V_G_Y_0Y2D1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before Y, followed by Y, followed by D, preceded by G, preceded by V, preceded by T, except...
V_G_Y_0Y2D1M1M2.rules.append(T_V_G_Y_0Y2D1M1M2M3)
G_Y_0Y2D1M1.rules.append(V_G_Y_0Y2D1M1M2)
Y_0Y2D1.rules.append(G_Y_0Y2D1M1)
Y_0Y2.rules.append(Y_0Y2D1)
Y_0.rules.append(Y_0Y2)
ENZ.append(Y_0)

T_0 = rule.Rule(0, "T", False, 0) # Never cleaves before T, except...
T_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before T, followed by L, except...
T_0L2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before T, followed by L, followed by A, except...
G_T_0L2A1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before T, followed by L, followed by A, preceded by G, except...
S_G_T_0L2A1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before T, followed by L, followed by A, preceded by G, preceded by S, except...
T_S_G_T_0L2A1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before T, followed by L, followed by A, preceded by G, preceded by S, preceded by T, except...
S_G_T_0L2A1M1M2.rules.append(T_S_G_T_0L2A1M1M2M3)
G_T_0L2A1M1.rules.append(S_G_T_0L2A1M1M2)
T_0L2A1.rules.append(G_T_0L2A1M1)
T_0L2.rules.append(T_0L2A1)
T_0L2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before T, followed by L, followed by P, except...
S_T_0L2P1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before T, followed by L, followed by P, preceded by S, except...
F_S_T_0L2P1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before T, followed by L, followed by P, preceded by S, preceded by F, except...
I_F_S_T_0L2P1M1M2M3 = rule.Rule(-3, "I", True, -1) # Always cleaves before T, followed by L, followed by P, preceded by S, preceded by F, preceded by I, except...
F_S_T_0L2P1M1M2.rules.append(I_F_S_T_0L2P1M1M2M3)
S_T_0L2P1M1.rules.append(F_S_T_0L2P1M1M2)
T_0L2P1.rules.append(S_T_0L2P1M1)
T_0L2.rules.append(T_0L2P1)
T_0.rules.append(T_0L2)
T_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before T, followed by P, except...
T_0P2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before T, followed by P, followed by G, except...
A_T_0P2G1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before T, followed by P, followed by G, preceded by A, except...
T_A_T_0P2G1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before T, followed by P, followed by G, preceded by A, preceded by T, except...
A_T_A_T_0P2G1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before T, followed by P, followed by G, preceded by A, preceded by T, preceded by A, except...
T_A_T_0P2G1M1M2.rules.append(A_T_A_T_0P2G1M1M2M3)
A_T_0P2G1M1.rules.append(T_A_T_0P2G1M1M2)
A_A_T_0P2G1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before T, followed by P, followed by G, preceded by A, preceded by A, except...
A_A_A_T_0P2G1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before T, followed by P, followed by G, preceded by A, preceded by A, preceded by A, except...
A_A_T_0P2G1M1M2.rules.append(A_A_A_T_0P2G1M1M2M3)
A_T_0P2G1M1.rules.append(A_A_T_0P2G1M1M2)
T_0P2G1.rules.append(A_T_0P2G1M1)
T_0P2.rules.append(T_0P2G1)
T_0P2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before T, followed by P, followed by P, except...
A_T_0P2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before T, followed by P, followed by P, preceded by A, except...
L_A_T_0P2P1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before T, followed by P, followed by P, preceded by A, preceded by L, except...
V_L_A_T_0P2P1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before T, followed by P, followed by P, preceded by A, preceded by L, preceded by V, except...
L_A_T_0P2P1M1M2.rules.append(V_L_A_T_0P2P1M1M2M3)
A_T_0P2P1M1.rules.append(L_A_T_0P2P1M1M2)
T_0P2P1.rules.append(A_T_0P2P1M1)
T_0P2.rules.append(T_0P2P1)
T_0P2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before T, followed by P, followed by N, except...
S_T_0P2N1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before T, followed by P, followed by N, preceded by S, except...
Q_S_T_0P2N1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before T, followed by P, followed by N, preceded by S, preceded by Q, except...
S_Q_S_T_0P2N1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before T, followed by P, followed by N, preceded by S, preceded by Q, preceded by S, except...
Q_S_T_0P2N1M1M2.rules.append(S_Q_S_T_0P2N1M1M2M3)
S_T_0P2N1M1.rules.append(Q_S_T_0P2N1M1M2)
T_0P2N1.rules.append(S_T_0P2N1M1)
T_0P2.rules.append(T_0P2N1)
T_0.rules.append(T_0P2)
T_0Q2 = rule.Rule(2, "Q", False, -1) # Never cleaves before T, followed by Q, except...
T_0Q2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before T, followed by Q, followed by G, except...
A_T_0Q2G1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before T, followed by Q, followed by G, preceded by A, except...
T_A_T_0Q2G1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before T, followed by Q, followed by G, preceded by A, preceded by T, except...
A_T_A_T_0Q2G1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before T, followed by Q, followed by G, preceded by A, preceded by T, preceded by A, except...
T_A_T_0Q2G1M1M2.rules.append(A_T_A_T_0Q2G1M1M2M3)
A_T_0Q2G1M1.rules.append(T_A_T_0Q2G1M1M2)
T_0Q2G1.rules.append(A_T_0Q2G1M1)
T_0Q2.rules.append(T_0Q2G1)
T_0.rules.append(T_0Q2)
T_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before T, followed by S, except...
T_0S2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before T, followed by S, followed by G, except...
S_T_0S2G1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before T, followed by S, followed by G, preceded by S, except...
N_S_T_0S2G1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before T, followed by S, followed by G, preceded by S, preceded by N, except...
V_N_S_T_0S2G1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before T, followed by S, followed by G, preceded by S, preceded by N, preceded by V, except...
N_S_T_0S2G1M1M2.rules.append(V_N_S_T_0S2G1M1M2M3)
S_T_0S2G1M1.rules.append(N_S_T_0S2G1M1M2)
T_0S2G1.rules.append(S_T_0S2G1M1)
T_0S2.rules.append(T_0S2G1)
T_0S2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before T, followed by S, followed by S, except...
S_T_0S2S1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before T, followed by S, followed by S, preceded by S, except...
K_S_T_0S2S1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before T, followed by S, followed by S, preceded by S, preceded by K, except...
V_K_S_T_0S2S1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before T, followed by S, followed by S, preceded by S, preceded by K, preceded by V, except...
K_S_T_0S2S1M1M2.rules.append(V_K_S_T_0S2S1M1M2M3)
S_T_0S2S1M1.rules.append(K_S_T_0S2S1M1M2)
T_0S2S1.rules.append(S_T_0S2S1M1)
T_0S2.rules.append(T_0S2S1)
T_0.rules.append(T_0S2)
T_0C2 = rule.Rule(2, "C", False, -1) # Never cleaves before T, followed by C, except...
T_0C2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before T, followed by C, followed by A, except...
A_T_0C2A1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before T, followed by C, followed by A, preceded by A, except...
N_A_T_0C2A1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before T, followed by C, followed by A, preceded by A, preceded by N, except...
A_N_A_T_0C2A1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before T, followed by C, followed by A, preceded by A, preceded by N, preceded by A, except...
N_A_T_0C2A1M1M2.rules.append(A_N_A_T_0C2A1M1M2M3)
A_T_0C2A1M1.rules.append(N_A_T_0C2A1M1M2)
T_0C2A1.rules.append(A_T_0C2A1M1)
L_T_0C2A1M1 = rule.Rule(-1, "L", False, -1) # Never cleaves before T, followed by C, followed by A, preceded by L, except...
T_L_T_0C2A1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before T, followed by C, followed by A, preceded by L, preceded by T, except...
V_T_L_T_0C2A1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before T, followed by C, followed by A, preceded by L, preceded by T, preceded by V, except...
T_L_T_0C2A1M1M2.rules.append(V_T_L_T_0C2A1M1M2M3)
L_T_0C2A1M1.rules.append(T_L_T_0C2A1M1M2)
T_0C2A1.rules.append(L_T_0C2A1M1)
T_0C2.rules.append(T_0C2A1)
T_0.rules.append(T_0C2)
T_0Y2 = rule.Rule(2, "Y", False, -1) # Never cleaves before T, followed by Y, except...
T_0Y2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before T, followed by Y, followed by I, except...
A_T_0Y2I1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before T, followed by Y, followed by I, preceded by A, except...
S_A_T_0Y2I1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before T, followed by Y, followed by I, preceded by A, preceded by S, except...
A_S_A_T_0Y2I1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before T, followed by Y, followed by I, preceded by A, preceded by S, preceded by A, except...
S_A_T_0Y2I1M1M2.rules.append(A_S_A_T_0Y2I1M1M2M3)
A_T_0Y2I1M1.rules.append(S_A_T_0Y2I1M1M2)
T_0Y2I1.rules.append(A_T_0Y2I1M1)
T_0Y2.rules.append(T_0Y2I1)
T_0.rules.append(T_0Y2)
T_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before T, followed by T, except...
T_0T2H1 = rule.Rule(1, "H", False, -1) # Never cleaves before T, followed by T, followed by H, except...
S_T_0T2H1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before T, followed by T, followed by H, preceded by S, except...
T_S_T_0T2H1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before T, followed by T, followed by H, preceded by S, preceded by T, except...
A_T_S_T_0T2H1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before T, followed by T, followed by H, preceded by S, preceded by T, preceded by A, except...
T_S_T_0T2H1M1M2.rules.append(A_T_S_T_0T2H1M1M2M3)
S_T_0T2H1M1.rules.append(T_S_T_0T2H1M1M2)
T_0T2H1.rules.append(S_T_0T2H1M1)
T_0T2.rules.append(T_0T2H1)
T_0T2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before T, followed by T, followed by E, except...
S_T_0T2E1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before T, followed by T, followed by E, preceded by S, except...
N_S_T_0T2E1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before T, followed by T, followed by E, preceded by S, preceded by N, except...
V_N_S_T_0T2E1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before T, followed by T, followed by E, preceded by S, preceded by N, preceded by V, except...
N_S_T_0T2E1M1M2.rules.append(V_N_S_T_0T2E1M1M2M3)
S_T_0T2E1M1.rules.append(N_S_T_0T2E1M1M2)
T_0T2E1.rules.append(S_T_0T2E1M1)
T_0T2.rules.append(T_0T2E1)
T_0T2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before T, followed by T, followed by D, except...
N_T_0T2D1M1 = rule.Rule(-1, "N", False, -1) # Never cleaves before T, followed by T, followed by D, preceded by N, except...
G_N_T_0T2D1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before T, followed by T, followed by D, preceded by N, preceded by G, except...
G_G_N_T_0T2D1M1M2M3 = rule.Rule(-3, "G", True, -1) # Always cleaves before T, followed by T, followed by D, preceded by N, preceded by G, preceded by G, except...
G_N_T_0T2D1M1M2.rules.append(G_G_N_T_0T2D1M1M2M3)
N_T_0T2D1M1.rules.append(G_N_T_0T2D1M1M2)
T_0T2D1.rules.append(N_T_0T2D1M1)
T_0T2.rules.append(T_0T2D1)
T_0.rules.append(T_0T2)
T_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before T, followed by G, except...
T_0G2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before T, followed by G, followed by L, except...
A_T_0G2L1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before T, followed by G, followed by L, preceded by A, except...
F_A_T_0G2L1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before T, followed by G, followed by L, preceded by A, preceded by F, except...
T_F_A_T_0G2L1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before T, followed by G, followed by L, preceded by A, preceded by F, preceded by T, except...
F_A_T_0G2L1M1M2.rules.append(T_F_A_T_0G2L1M1M2M3)
A_T_0G2L1M1.rules.append(F_A_T_0G2L1M1M2)
C_A_T_0G2L1M1M2 = rule.Rule(-2, "C", False, -1) # Never cleaves before T, followed by G, followed by L, preceded by A, preceded by C, except...
T_C_A_T_0G2L1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before T, followed by G, followed by L, preceded by A, preceded by C, preceded by T, except...
C_A_T_0G2L1M1M2.rules.append(T_C_A_T_0G2L1M1M2M3)
A_T_0G2L1M1.rules.append(C_A_T_0G2L1M1M2)
T_0G2L1.rules.append(A_T_0G2L1M1)
T_0G2.rules.append(T_0G2L1)
T_0.rules.append(T_0G2)
T_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before T, followed by V, except...
T_0V2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before T, followed by V, followed by T, except...
A_T_0V2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before T, followed by V, followed by T, preceded by A, except...
L_A_T_0V2T1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before T, followed by V, followed by T, preceded by A, preceded by L, except...
A_L_A_T_0V2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before T, followed by V, followed by T, preceded by A, preceded by L, preceded by A, except...
L_A_T_0V2T1M1M2.rules.append(A_L_A_T_0V2T1M1M2M3)
A_T_0V2T1M1.rules.append(L_A_T_0V2T1M1M2)
T_0V2T1.rules.append(A_T_0V2T1M1)
T_0V2.rules.append(T_0V2T1)
T_0.rules.append(T_0V2)
ENZ.append(T_0)

F_0 = rule.Rule(0, "F", False, 0) # Never cleaves before F, except...
F_0Y2 = rule.Rule(2, "Y", False, -1) # Never cleaves before F, followed by Y, except...
F_0Y2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before F, followed by Y, followed by S, except...
A_F_0Y2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before F, followed by Y, followed by S, preceded by A, except...
S_A_F_0Y2S1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before F, followed by Y, followed by S, preceded by A, preceded by S, except...
A_S_A_F_0Y2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before F, followed by Y, followed by S, preceded by A, preceded by S, preceded by A, except...
S_A_F_0Y2S1M1M2.rules.append(A_S_A_F_0Y2S1M1M2M3)
A_F_0Y2S1M1.rules.append(S_A_F_0Y2S1M1M2)
F_0Y2S1.rules.append(A_F_0Y2S1M1)
F_0Y2.rules.append(F_0Y2S1)
F_0Y2Y1 = rule.Rule(1, "Y", False, -1) # Never cleaves before F, followed by Y, followed by Y, except...
A_F_0Y2Y1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before F, followed by Y, followed by Y, preceded by A, except...
T_A_F_0Y2Y1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before F, followed by Y, followed by Y, preceded by A, preceded by T, except...
V_T_A_F_0Y2Y1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before F, followed by Y, followed by Y, preceded by A, preceded by T, preceded by V, except...
T_A_F_0Y2Y1M1M2.rules.append(V_T_A_F_0Y2Y1M1M2M3)
A_F_0Y2Y1M1.rules.append(T_A_F_0Y2Y1M1M2)
F_0Y2Y1.rules.append(A_F_0Y2Y1M1)
F_0Y2.rules.append(F_0Y2Y1)
F_0.rules.append(F_0Y2)
F_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before F, followed by N, except...
F_0N2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before F, followed by N, followed by E, except...
A_F_0N2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before F, followed by N, followed by E, preceded by A, except...
R_A_F_0N2E1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before F, followed by N, followed by E, preceded by A, preceded by R, except...
R_R_A_F_0N2E1M1M2M3 = rule.Rule(-3, "R", True, -1) # Always cleaves before F, followed by N, followed by E, preceded by A, preceded by R, preceded by R, except...
R_A_F_0N2E1M1M2.rules.append(R_R_A_F_0N2E1M1M2M3)
A_F_0N2E1M1.rules.append(R_A_F_0N2E1M1M2)
F_0N2E1.rules.append(A_F_0N2E1M1)
F_0N2.rules.append(F_0N2E1)
F_0N2F1 = rule.Rule(1, "F", False, -1) # Never cleaves before F, followed by N, followed by F, except...
P_F_0N2F1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before F, followed by N, followed by F, preceded by P, except...
T_P_F_0N2F1M1M2 = rule.Rule(-2, "T", False, -1) # Never cleaves before F, followed by N, followed by F, preceded by P, preceded by T, except...
A_T_P_F_0N2F1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before F, followed by N, followed by F, preceded by P, preceded by T, preceded by A, except...
T_P_F_0N2F1M1M2.rules.append(A_T_P_F_0N2F1M1M2M3)
P_F_0N2F1M1.rules.append(T_P_F_0N2F1M1M2)
F_0N2F1.rules.append(P_F_0N2F1M1)
F_0N2.rules.append(F_0N2F1)
F_0N2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before F, followed by N, followed by D, except...
G_F_0N2D1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before F, followed by N, followed by D, preceded by G, except...
L_G_F_0N2D1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before F, followed by N, followed by D, preceded by G, preceded by L, except...
S_L_G_F_0N2D1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before F, followed by N, followed by D, preceded by G, preceded by L, preceded by S, except...
L_G_F_0N2D1M1M2.rules.append(S_L_G_F_0N2D1M1M2M3)
G_F_0N2D1M1.rules.append(L_G_F_0N2D1M1M2)
F_0N2D1.rules.append(G_F_0N2D1M1)
F_0N2.rules.append(F_0N2D1)
F_0N2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before F, followed by N, followed by S, except...
A_F_0N2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before F, followed by N, followed by S, preceded by A, except...
R_A_F_0N2S1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before F, followed by N, followed by S, preceded by A, preceded by R, except...
T_R_A_F_0N2S1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before F, followed by N, followed by S, preceded by A, preceded by R, preceded by T, except...
R_A_F_0N2S1M1M2.rules.append(T_R_A_F_0N2S1M1M2M3)
A_F_0N2S1M1.rules.append(R_A_F_0N2S1M1M2)
F_0N2S1.rules.append(A_F_0N2S1M1)
F_0N2.rules.append(F_0N2S1)
F_0.rules.append(F_0N2)
F_0R2 = rule.Rule(2, "R", False, -1) # Never cleaves before F, followed by R, except...
F_0R2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before F, followed by R, followed by D, except...
A_F_0R2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before F, followed by R, followed by D, preceded by A, except...
D_A_F_0R2D1M1M2 = rule.Rule(-2, "D", False, -1) # Never cleaves before F, followed by R, followed by D, preceded by A, preceded by D, except...
T_D_A_F_0R2D1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before F, followed by R, followed by D, preceded by A, preceded by D, preceded by T, except...
D_A_F_0R2D1M1M2.rules.append(T_D_A_F_0R2D1M1M2M3)
A_F_0R2D1M1.rules.append(D_A_F_0R2D1M1M2)
F_0R2D1.rules.append(A_F_0R2D1M1)
F_0R2.rules.append(F_0R2D1)
F_0R2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before F, followed by R, followed by S, except...
A_F_0R2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before F, followed by R, followed by S, preceded by A, except...
E_A_F_0R2S1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before F, followed by R, followed by S, preceded by A, preceded by E, except...
A_E_A_F_0R2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before F, followed by R, followed by S, preceded by A, preceded by E, preceded by A, except...
E_A_F_0R2S1M1M2.rules.append(A_E_A_F_0R2S1M1M2M3)
A_F_0R2S1M1.rules.append(E_A_F_0R2S1M1M2)
F_0R2S1.rules.append(A_F_0R2S1M1)
F_0R2.rules.append(F_0R2S1)
F_0.rules.append(F_0R2)
F_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before F, followed by T, except...
F_0T2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before F, followed by T, followed by K, except...
A_F_0T2K1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before F, followed by T, followed by K, preceded by A, except...
V_A_F_0T2K1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before F, followed by T, followed by K, preceded by A, preceded by V, except...
V_V_A_F_0T2K1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before F, followed by T, followed by K, preceded by A, preceded by V, preceded by V, except...
V_A_F_0T2K1M1M2.rules.append(V_V_A_F_0T2K1M1M2M3)
A_F_0T2K1M1.rules.append(V_A_F_0T2K1M1M2)
F_0T2K1.rules.append(A_F_0T2K1M1)
F_0T2.rules.append(F_0T2K1)
F_0.rules.append(F_0T2)
F_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before F, followed by L, except...
F_0L2Y1 = rule.Rule(1, "Y", False, -1) # Never cleaves before F, followed by L, followed by Y, except...
A_F_0L2Y1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before F, followed by L, followed by Y, preceded by A, except...
K_A_F_0L2Y1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before F, followed by L, followed by Y, preceded by A, preceded by K, except...
V_K_A_F_0L2Y1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before F, followed by L, followed by Y, preceded by A, preceded by K, preceded by V, except...
K_A_F_0L2Y1M1M2.rules.append(V_K_A_F_0L2Y1M1M2M3)
A_F_0L2Y1M1.rules.append(K_A_F_0L2Y1M1M2)
F_0L2Y1.rules.append(A_F_0L2Y1M1)
F_0L2.rules.append(F_0L2Y1)
F_0.rules.append(F_0L2)
ENZ.append(F_0)

V_0 = rule.Rule(0, "V", False, 0) # Never cleaves before V, except...
V_0D2 = rule.Rule(2, "D", False, -1) # Never cleaves before V, followed by D, except...
V_0D2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before V, followed by D, followed by V, except...
P_V_0D2V1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before V, followed by D, followed by V, preceded by P, except...
R_P_V_0D2V1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before V, followed by D, followed by V, preceded by P, preceded by R, except...
A_R_P_V_0D2V1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before V, followed by D, followed by V, preceded by P, preceded by R, preceded by A, except...
R_P_V_0D2V1M1M2.rules.append(A_R_P_V_0D2V1M1M2M3)
P_V_0D2V1M1.rules.append(R_P_V_0D2V1M1M2)
V_0D2V1.rules.append(P_V_0D2V1M1)
V_0D2.rules.append(V_0D2V1)
V_0D2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before V, followed by D, followed by I, except...
S_V_0D2I1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before V, followed by D, followed by I, preceded by S, except...
Q_S_V_0D2I1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before V, followed by D, followed by I, preceded by S, preceded by Q, except...
G_Q_S_V_0D2I1M1M2M3 = rule.Rule(-3, "G", True, -1) # Always cleaves before V, followed by D, followed by I, preceded by S, preceded by Q, preceded by G, except...
Q_S_V_0D2I1M1M2.rules.append(G_Q_S_V_0D2I1M1M2M3)
S_V_0D2I1M1.rules.append(Q_S_V_0D2I1M1M2)
V_0D2I1.rules.append(S_V_0D2I1M1)
V_0D2.rules.append(V_0D2I1)
V_0.rules.append(V_0D2)
V_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before V, followed by E, except...
V_0E2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before V, followed by E, followed by G, except...
G_V_0E2G1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before V, followed by E, followed by G, preceded by G, except...
M_G_V_0E2G1M1M2 = rule.Rule(-2, "M", False, -1) # Never cleaves before V, followed by E, followed by G, preceded by G, preceded by M, except...
S_M_G_V_0E2G1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before V, followed by E, followed by G, preceded by G, preceded by M, preceded by S, except...
M_G_V_0E2G1M1M2.rules.append(S_M_G_V_0E2G1M1M2M3)
G_V_0E2G1M1.rules.append(M_G_V_0E2G1M1M2)
V_0E2G1.rules.append(G_V_0E2G1M1)
V_0E2.rules.append(V_0E2G1)
V_0.rules.append(V_0E2)
V_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before V, followed by T, except...
V_0T2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before V, followed by T, followed by N, except...
A_V_0T2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before V, followed by T, followed by N, preceded by A, except...
W_A_V_0T2N1M1M2 = rule.Rule(-2, "W", False, -1) # Never cleaves before V, followed by T, followed by N, preceded by A, preceded by W, except...
T_W_A_V_0T2N1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before V, followed by T, followed by N, preceded by A, preceded by W, preceded by T, except...
W_A_V_0T2N1M1M2.rules.append(T_W_A_V_0T2N1M1M2M3)
A_V_0T2N1M1.rules.append(W_A_V_0T2N1M1M2)
V_0T2N1.rules.append(A_V_0T2N1M1)
V_0T2.rules.append(V_0T2N1)
V_0T2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before V, followed by T, followed by E, except...
S_V_0T2E1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before V, followed by T, followed by E, preceded by S, except...
N_S_V_0T2E1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before V, followed by T, followed by E, preceded by S, preceded by N, except...
V_N_S_V_0T2E1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before V, followed by T, followed by E, preceded by S, preceded by N, preceded by V, except...
N_S_V_0T2E1M1M2.rules.append(V_N_S_V_0T2E1M1M2M3)
S_V_0T2E1M1.rules.append(N_S_V_0T2E1M1M2)
V_0T2E1.rules.append(S_V_0T2E1M1)
V_0T2.rules.append(V_0T2E1)
V_0.rules.append(V_0T2)
V_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before V, followed by A, except...
V_0A2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before V, followed by A, followed by E, except...
A_V_0A2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before V, followed by A, followed by E, preceded by A, except...
A_A_V_0A2E1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before V, followed by A, followed by E, preceded by A, preceded by A, except...
A_A_A_V_0A2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before V, followed by A, followed by E, preceded by A, preceded by A, preceded by A, except...
A_A_V_0A2E1M1M2.rules.append(A_A_A_V_0A2E1M1M2M3)
A_V_0A2E1M1.rules.append(A_A_V_0A2E1M1M2)
V_0A2E1.rules.append(A_V_0A2E1M1)
V_0A2.rules.append(V_0A2E1)
V_0A2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before V, followed by A, followed by D, except...
A_V_0A2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before V, followed by A, followed by D, preceded by A, except...
A_A_V_0A2D1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before V, followed by A, followed by D, preceded by A, preceded by A, except...
V_A_A_V_0A2D1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before V, followed by A, followed by D, preceded by A, preceded by A, preceded by V, except...
A_A_V_0A2D1M1M2.rules.append(V_A_A_V_0A2D1M1M2M3)
A_V_0A2D1M1.rules.append(A_A_V_0A2D1M1M2)
V_0A2D1.rules.append(A_V_0A2D1M1)
V_0A2.rules.append(V_0A2D1)
V_0.rules.append(V_0A2)
V_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before V, followed by I, except...
V_0I2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before V, followed by I, followed by P, except...
S_V_0I2P1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before V, followed by I, followed by P, preceded by S, except...
D_S_V_0I2P1M1M2 = rule.Rule(-2, "D", False, -1) # Never cleaves before V, followed by I, followed by P, preceded by S, preceded by D, except...
S_D_S_V_0I2P1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before V, followed by I, followed by P, preceded by S, preceded by D, preceded by S, except...
D_S_V_0I2P1M1M2.rules.append(S_D_S_V_0I2P1M1M2M3)
S_V_0I2P1M1.rules.append(D_S_V_0I2P1M1M2)
V_0I2P1.rules.append(S_V_0I2P1M1)
V_0I2.rules.append(V_0I2P1)
V_0I2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before V, followed by I, followed by D, except...
D_V_0I2D1M1 = rule.Rule(-1, "D", False, -1) # Never cleaves before V, followed by I, followed by D, preceded by D, except...
E_D_V_0I2D1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before V, followed by I, followed by D, preceded by D, preceded by E, except...
T_E_D_V_0I2D1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before V, followed by I, followed by D, preceded by D, preceded by E, preceded by T, except...
E_D_V_0I2D1M1M2.rules.append(T_E_D_V_0I2D1M1M2M3)
D_V_0I2D1M1.rules.append(E_D_V_0I2D1M1M2)
V_0I2D1.rules.append(D_V_0I2D1M1)
V_0I2.rules.append(V_0I2D1)
V_0.rules.append(V_0I2)
V_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before V, followed by P, except...
V_0P2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before V, followed by P, followed by T, except...
S_V_0P2T1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before V, followed by P, followed by T, preceded by S, except...
D_S_V_0P2T1M1M2 = rule.Rule(-2, "D", False, -1) # Never cleaves before V, followed by P, followed by T, preceded by S, preceded by D, except...
S_D_S_V_0P2T1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before V, followed by P, followed by T, preceded by S, preceded by D, preceded by S, except...
D_S_V_0P2T1M1M2.rules.append(S_D_S_V_0P2T1M1M2M3)
S_V_0P2T1M1.rules.append(D_S_V_0P2T1M1M2)
V_0P2T1.rules.append(S_V_0P2T1M1)
V_0P2.rules.append(V_0P2T1)
V_0.rules.append(V_0P2)
V_0C2 = rule.Rule(2, "C", False, -1) # Never cleaves before V, followed by C, except...
V_0C2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before V, followed by C, followed by A, except...
R_V_0C2A1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before V, followed by C, followed by A, preceded by R, except...
R_R_V_0C2A1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before V, followed by C, followed by A, preceded by R, preceded by R, except...
T_R_R_V_0C2A1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before V, followed by C, followed by A, preceded by R, preceded by R, preceded by T, except...
R_R_V_0C2A1M1M2.rules.append(T_R_R_V_0C2A1M1M2M3)
R_V_0C2A1M1.rules.append(R_R_V_0C2A1M1M2)
V_0C2A1.rules.append(R_V_0C2A1M1)
V_0C2.rules.append(V_0C2A1)
V_0.rules.append(V_0C2)
V_0F2 = rule.Rule(2, "F", False, -1) # Never cleaves before V, followed by F, except...
V_0F2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before V, followed by F, followed by K, except...
V_V_0F2K1M1 = rule.Rule(-1, "V", False, -1) # Never cleaves before V, followed by F, followed by K, preceded by V, except...
G_V_V_0F2K1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before V, followed by F, followed by K, preceded by V, preceded by G, except...
A_G_V_V_0F2K1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before V, followed by F, followed by K, preceded by V, preceded by G, preceded by A, except...
G_V_V_0F2K1M1M2.rules.append(A_G_V_V_0F2K1M1M2M3)
V_V_0F2K1M1.rules.append(G_V_V_0F2K1M1M2)
V_0F2K1.rules.append(V_V_0F2K1M1)
V_0F2.rules.append(V_0F2K1)
V_0.rules.append(V_0F2)
V_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before V, followed by V, except...
V_0V2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before V, followed by V, followed by G, except...
A_V_0V2G1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before V, followed by V, followed by G, preceded by A, except...
A_A_V_0V2G1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before V, followed by V, followed by G, preceded by A, preceded by A, except...
A_A_A_V_0V2G1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before V, followed by V, followed by G, preceded by A, preceded by A, preceded by A, except...
A_A_V_0V2G1M1M2.rules.append(A_A_A_V_0V2G1M1M2M3)
A_V_0V2G1M1.rules.append(A_A_V_0V2G1M1M2)
V_0V2G1.rules.append(A_V_0V2G1M1)
V_0V2.rules.append(V_0V2G1)
V_0.rules.append(V_0V2)
V_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before V, followed by S, except...
V_0S2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before V, followed by S, followed by T, except...
A_V_0S2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before V, followed by S, followed by T, preceded by A, except...
D_A_V_0S2T1M1M2 = rule.Rule(-2, "D", False, -1) # Never cleaves before V, followed by S, followed by T, preceded by A, preceded by D, except...
T_D_A_V_0S2T1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before V, followed by S, followed by T, preceded by A, preceded by D, preceded by T, except...
D_A_V_0S2T1M1M2.rules.append(T_D_A_V_0S2T1M1M2M3)
A_V_0S2T1M1.rules.append(D_A_V_0S2T1M1M2)
V_0S2T1.rules.append(A_V_0S2T1M1)
V_0S2.rules.append(V_0S2T1)
V_0.rules.append(V_0S2)
ENZ.append(V_0)

G_0 = rule.Rule(0, "G", False, 0) # Never cleaves before G, except...
G_0I2 = rule.Rule(2, "I", False, -1) # Never cleaves before G, followed by I, except...
G_0I2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before G, followed by I, followed by D, except...
A_G_0I2D1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before G, followed by I, followed by D, preceded by A, except...
E_A_G_0I2D1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before G, followed by I, followed by D, preceded by A, preceded by E, except...
L_E_A_G_0I2D1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before G, followed by I, followed by D, preceded by A, preceded by E, preceded by L, except...
E_A_G_0I2D1M1M2.rules.append(L_E_A_G_0I2D1M1M2M3)
A_G_0I2D1M1.rules.append(E_A_G_0I2D1M1M2)
G_0I2D1.rules.append(A_G_0I2D1M1)
G_0I2.rules.append(G_0I2D1)
G_0I2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before G, followed by I, followed by V, except...
A_G_0I2V1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before G, followed by I, followed by V, preceded by A, except...
F_A_G_0I2V1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before G, followed by I, followed by V, preceded by A, preceded by F, except...
A_F_A_G_0I2V1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before G, followed by I, followed by V, preceded by A, preceded by F, preceded by A, except...
F_A_G_0I2V1M1M2.rules.append(A_F_A_G_0I2V1M1M2M3)
A_G_0I2V1M1.rules.append(F_A_G_0I2V1M1M2)
G_0I2V1.rules.append(A_G_0I2V1M1)
G_0I2.rules.append(G_0I2V1)
G_0I2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before G, followed by I, followed by G, except...
G_G_0I2G1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before G, followed by I, followed by G, preceded by G, except...
D_G_G_0I2G1M1M2 = rule.Rule(-2, "D", False, -1) # Never cleaves before G, followed by I, followed by G, preceded by G, preceded by D, except...
V_D_G_G_0I2G1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before G, followed by I, followed by G, preceded by G, preceded by D, preceded by V, except...
D_G_G_0I2G1M1M2.rules.append(V_D_G_G_0I2G1M1M2M3)
G_G_0I2G1M1.rules.append(D_G_G_0I2G1M1M2)
G_0I2G1.rules.append(G_G_0I2G1M1)
G_0I2.rules.append(G_0I2G1)
G_0I2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before G, followed by I, followed by P, except...
Q_G_0I2P1M1 = rule.Rule(-1, "Q", False, -1) # Never cleaves before G, followed by I, followed by P, preceded by Q, except...
R_Q_G_0I2P1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before G, followed by I, followed by P, preceded by Q, preceded by R, except...
L_R_Q_G_0I2P1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before G, followed by I, followed by P, preceded by Q, preceded by R, preceded by L, except...
R_Q_G_0I2P1M1M2.rules.append(L_R_Q_G_0I2P1M1M2M3)
Q_G_0I2P1M1.rules.append(R_Q_G_0I2P1M1M2)
G_0I2P1.rules.append(Q_G_0I2P1M1)
G_0I2.rules.append(G_0I2P1)
G_0I2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before G, followed by I, followed by E, except...
Q_G_0I2E1M1 = rule.Rule(-1, "Q", False, -1) # Never cleaves before G, followed by I, followed by E, preceded by Q, except...
H_Q_G_0I2E1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before G, followed by I, followed by E, preceded by Q, preceded by H, except...
T_H_Q_G_0I2E1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before G, followed by I, followed by E, preceded by Q, preceded by H, preceded by T, except...
H_Q_G_0I2E1M1M2.rules.append(T_H_Q_G_0I2E1M1M2M3)
Q_G_0I2E1M1.rules.append(H_Q_G_0I2E1M1M2)
G_0I2E1.rules.append(Q_G_0I2E1M1)
G_0I2.rules.append(G_0I2E1)
G_0I2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before G, followed by I, followed by A, except...
E_G_0I2A1M1 = rule.Rule(-1, "E", False, -1) # Never cleaves before G, followed by I, followed by A, preceded by E, except...
R_E_G_0I2A1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before G, followed by I, followed by A, preceded by E, preceded by R, except...
T_R_E_G_0I2A1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before G, followed by I, followed by A, preceded by E, preceded by R, preceded by T, except...
R_E_G_0I2A1M1M2.rules.append(T_R_E_G_0I2A1M1M2M3)
E_G_0I2A1M1.rules.append(R_E_G_0I2A1M1M2)
G_0I2A1.rules.append(E_G_0I2A1M1)
A_G_0I2A1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before G, followed by I, followed by A, preceded by A, except...
S_A_G_0I2A1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before G, followed by I, followed by A, preceded by A, preceded by S, except...
A_S_A_G_0I2A1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before G, followed by I, followed by A, preceded by A, preceded by S, preceded by A, except...
S_A_G_0I2A1M1M2.rules.append(A_S_A_G_0I2A1M1M2M3)
A_G_0I2A1M1.rules.append(S_A_G_0I2A1M1M2)
G_0I2A1.rules.append(A_G_0I2A1M1)
G_0I2.rules.append(G_0I2A1)
G_0I2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before G, followed by I, followed by T, except...
A_G_0I2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before G, followed by I, followed by T, preceded by A, except...
N_A_G_0I2T1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before G, followed by I, followed by T, preceded by A, preceded by N, except...
A_N_A_G_0I2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before G, followed by I, followed by T, preceded by A, preceded by N, preceded by A, except...
N_A_G_0I2T1M1M2.rules.append(A_N_A_G_0I2T1M1M2M3)
A_G_0I2T1M1.rules.append(N_A_G_0I2T1M1M2)
G_0I2T1.rules.append(A_G_0I2T1M1)
G_0I2.rules.append(G_0I2T1)
G_0.rules.append(G_0I2)
G_0C2 = rule.Rule(2, "C", False, -1) # Never cleaves before G, followed by C, except...
G_0C2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before G, followed by C, followed by P, except...
A_G_0C2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before G, followed by C, followed by P, preceded by A, except...
S_A_G_0C2P1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before G, followed by C, followed by P, preceded by A, preceded by S, except...
V_S_A_G_0C2P1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before G, followed by C, followed by P, preceded by A, preceded by S, preceded by V, except...
S_A_G_0C2P1M1M2.rules.append(V_S_A_G_0C2P1M1M2M3)
A_G_0C2P1M1.rules.append(S_A_G_0C2P1M1M2)
G_0C2P1.rules.append(A_G_0C2P1M1)
G_0C2.rules.append(G_0C2P1)
G_0C2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before G, followed by C, followed by T, except...
A_G_0C2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before G, followed by C, followed by T, preceded by A, except...
E_A_G_0C2T1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before G, followed by C, followed by T, preceded by A, preceded by E, except...
T_E_A_G_0C2T1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before G, followed by C, followed by T, preceded by A, preceded by E, preceded by T, except...
E_A_G_0C2T1M1M2.rules.append(T_E_A_G_0C2T1M1M2M3)
A_G_0C2T1M1.rules.append(E_A_G_0C2T1M1M2)
G_0C2T1.rules.append(A_G_0C2T1M1)
G_0C2.rules.append(G_0C2T1)
G_0.rules.append(G_0C2)
G_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before G, followed by A, except...
G_0A2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before G, followed by A, followed by T, except...
P_G_0A2T1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before G, followed by A, followed by T, preceded by P, except...
V_P_G_0A2T1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before G, followed by A, followed by T, preceded by P, preceded by V, except...
P_V_P_G_0A2T1M1M2M3 = rule.Rule(-3, "P", True, -1) # Always cleaves before G, followed by A, followed by T, preceded by P, preceded by V, preceded by P, except...
V_P_G_0A2T1M1M2.rules.append(P_V_P_G_0A2T1M1M2M3)
P_G_0A2T1M1.rules.append(V_P_G_0A2T1M1M2)
G_0A2T1.rules.append(P_G_0A2T1M1)
G_0A2.rules.append(G_0A2T1)
G_0.rules.append(G_0A2)
G_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before G, followed by G, except...
G_0G2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before G, followed by G, followed by N, except...
A_G_0G2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before G, followed by G, followed by N, preceded by A, except...
F_A_G_0G2N1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before G, followed by G, followed by N, preceded by A, preceded by F, except...
C_F_A_G_0G2N1M1M2M3 = rule.Rule(-3, "C", True, -1) # Always cleaves before G, followed by G, followed by N, preceded by A, preceded by F, preceded by C, except...
F_A_G_0G2N1M1M2.rules.append(C_F_A_G_0G2N1M1M2M3)
A_G_0G2N1M1.rules.append(F_A_G_0G2N1M1M2)
G_0G2N1.rules.append(A_G_0G2N1M1)
G_0G2.rules.append(G_0G2N1)
G_0G2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before G, followed by G, followed by G, except...
R_G_0G2G1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before G, followed by G, followed by G, preceded by R, except...
K_R_G_0G2G1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before G, followed by G, followed by G, preceded by R, preceded by K, except...
A_K_R_G_0G2G1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before G, followed by G, followed by G, preceded by R, preceded by K, preceded by A, except...
K_R_G_0G2G1M1M2.rules.append(A_K_R_G_0G2G1M1M2M3)
R_G_0G2G1M1.rules.append(K_R_G_0G2G1M1M2)
G_0G2G1.rules.append(R_G_0G2G1M1)
G_0G2.rules.append(G_0G2G1)
G_0.rules.append(G_0G2)
G_0D2 = rule.Rule(2, "D", False, -1) # Never cleaves before G, followed by D, except...
G_0D2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before G, followed by D, followed by A, except...
A_G_0D2A1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before G, followed by D, followed by A, preceded by A, except...
H_A_G_0D2A1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before G, followed by D, followed by A, preceded by A, preceded by H, except...
A_H_A_G_0D2A1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before G, followed by D, followed by A, preceded by A, preceded by H, preceded by A, except...
H_A_G_0D2A1M1M2.rules.append(A_H_A_G_0D2A1M1M2M3)
A_G_0D2A1M1.rules.append(H_A_G_0D2A1M1M2)
G_0D2A1.rules.append(A_G_0D2A1M1)
G_0D2.rules.append(G_0D2A1)
G_0.rules.append(G_0D2)
G_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before G, followed by P, except...
G_0P2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before G, followed by P, followed by P, except...
C_G_0P2P1M1 = rule.Rule(-1, "C", False, -1) # Never cleaves before G, followed by P, followed by P, preceded by C, except...
S_C_G_0P2P1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before G, followed by P, followed by P, preceded by C, preceded by S, except...
G_S_C_G_0P2P1M1M2M3 = rule.Rule(-3, "G", True, -1) # Always cleaves before G, followed by P, followed by P, preceded by C, preceded by S, preceded by G, except...
S_C_G_0P2P1M1M2.rules.append(G_S_C_G_0P2P1M1M2M3)
C_G_0P2P1M1.rules.append(S_C_G_0P2P1M1M2)
W_C_G_0P2P1M1M2 = rule.Rule(-2, "W", False, -1) # Never cleaves before G, followed by P, followed by P, preceded by C, preceded by W, except...
A_W_C_G_0P2P1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before G, followed by P, followed by P, preceded by C, preceded by W, preceded by A, except...
W_C_G_0P2P1M1M2.rules.append(A_W_C_G_0P2P1M1M2M3)
C_G_0P2P1M1.rules.append(W_C_G_0P2P1M1M2)
G_0P2P1.rules.append(C_G_0P2P1M1)
G_0P2.rules.append(G_0P2P1)
G_0P2F1 = rule.Rule(1, "F", False, -1) # Never cleaves before G, followed by P, followed by F, except...
A_G_0P2F1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before G, followed by P, followed by F, preceded by A, except...
E_A_G_0P2F1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before G, followed by P, followed by F, preceded by A, preceded by E, except...
S_E_A_G_0P2F1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before G, followed by P, followed by F, preceded by A, preceded by E, preceded by S, except...
E_A_G_0P2F1M1M2.rules.append(S_E_A_G_0P2F1M1M2M3)
A_G_0P2F1M1.rules.append(E_A_G_0P2F1M1M2)
G_0P2F1.rules.append(A_G_0P2F1M1)
G_0P2.rules.append(G_0P2F1)
G_0.rules.append(G_0P2)
G_0H2 = rule.Rule(2, "H", False, -1) # Never cleaves before G, followed by H, except...
G_0H2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before G, followed by H, followed by G, except...
P_G_0H2G1M1 = rule.Rule(-1, "P", False, -1) # Never cleaves before G, followed by H, followed by G, preceded by P, except...
L_P_G_0H2G1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before G, followed by H, followed by G, preceded by P, preceded by L, except...
A_L_P_G_0H2G1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before G, followed by H, followed by G, preceded by P, preceded by L, preceded by A, except...
L_P_G_0H2G1M1M2.rules.append(A_L_P_G_0H2G1M1M2M3)
P_G_0H2G1M1.rules.append(L_P_G_0H2G1M1M2)
G_0H2G1.rules.append(P_G_0H2G1M1)
G_0H2.rules.append(G_0H2G1)
G_0.rules.append(G_0H2)
G_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before G, followed by V, except...
G_0V2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before G, followed by V, followed by E, except...
S_G_0V2E1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before G, followed by V, followed by E, preceded by S, except...
R_S_G_0V2E1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before G, followed by V, followed by E, preceded by S, preceded by R, except...
A_R_S_G_0V2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before G, followed by V, followed by E, preceded by S, preceded by R, preceded by A, except...
R_S_G_0V2E1M1M2.rules.append(A_R_S_G_0V2E1M1M2M3)
S_G_0V2E1M1.rules.append(R_S_G_0V2E1M1M2)
G_0V2E1.rules.append(S_G_0V2E1M1)
G_0V2.rules.append(G_0V2E1)
G_0.rules.append(G_0V2)
G_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before G, followed by T, except...
G_0T2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before G, followed by T, followed by I, except...
A_G_0T2I1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before G, followed by T, followed by I, preceded by A, except...
E_A_G_0T2I1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before G, followed by T, followed by I, preceded by A, preceded by E, except...
A_E_A_G_0T2I1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before G, followed by T, followed by I, preceded by A, preceded by E, preceded by A, except...
E_A_G_0T2I1M1M2.rules.append(A_E_A_G_0T2I1M1M2M3)
A_G_0T2I1M1.rules.append(E_A_G_0T2I1M1M2)
G_0T2I1.rules.append(A_G_0T2I1M1)
G_0T2.rules.append(G_0T2I1)
G_0.rules.append(G_0T2)
G_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before G, followed by N, except...
G_0N2Y1 = rule.Rule(1, "Y", False, -1) # Never cleaves before G, followed by N, followed by Y, except...
C_G_0N2Y1M1 = rule.Rule(-1, "C", False, -1) # Never cleaves before G, followed by N, followed by Y, preceded by C, except...
D_C_G_0N2Y1M1M2 = rule.Rule(-2, "D", False, -1) # Never cleaves before G, followed by N, followed by Y, preceded by C, preceded by D, except...
V_D_C_G_0N2Y1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before G, followed by N, followed by Y, preceded by C, preceded by D, preceded by V, except...
D_C_G_0N2Y1M1M2.rules.append(V_D_C_G_0N2Y1M1M2M3)
C_G_0N2Y1M1.rules.append(D_C_G_0N2Y1M1M2)
G_0N2Y1.rules.append(C_G_0N2Y1M1)
G_0N2.rules.append(G_0N2Y1)
G_0.rules.append(G_0N2)
G_0W2 = rule.Rule(2, "W", False, -1) # Never cleaves before G, followed by W, except...
G_0W2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before G, followed by W, followed by D, except...
N_G_0W2D1M1 = rule.Rule(-1, "N", False, -1) # Never cleaves before G, followed by W, followed by D, preceded by N, except...
V_N_G_0W2D1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before G, followed by W, followed by D, preceded by N, preceded by V, except...
E_V_N_G_0W2D1M1M2M3 = rule.Rule(-3, "E", True, -1) # Always cleaves before G, followed by W, followed by D, preceded by N, preceded by V, preceded by E, except...
V_N_G_0W2D1M1M2.rules.append(E_V_N_G_0W2D1M1M2M3)
N_G_0W2D1M1.rules.append(V_N_G_0W2D1M1M2)
G_0W2D1.rules.append(N_G_0W2D1M1)
G_0W2.rules.append(G_0W2D1)
G_0.rules.append(G_0W2)
G_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before G, followed by S, except...
G_0S2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before G, followed by S, followed by K, except...
A_G_0S2K1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before G, followed by S, followed by K, preceded by A, except...
H_A_G_0S2K1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before G, followed by S, followed by K, preceded by A, preceded by H, except...
V_H_A_G_0S2K1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before G, followed by S, followed by K, preceded by A, preceded by H, preceded by V, except...
H_A_G_0S2K1M1M2.rules.append(V_H_A_G_0S2K1M1M2M3)
A_G_0S2K1M1.rules.append(H_A_G_0S2K1M1M2)
G_0S2K1.rules.append(A_G_0S2K1M1)
G_0S2.rules.append(G_0S2K1)
G_0.rules.append(G_0S2)
ENZ.append(G_0)

K_0 = rule.Rule(0, "K", False, 0) # Never cleaves before K, except...
K_0C2 = rule.Rule(2, "C", False, -1) # Never cleaves before K, followed by C, except...
K_0C2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before K, followed by C, followed by S, except...
G_K_0C2S1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before K, followed by C, followed by S, preceded by G, except...
E_G_K_0C2S1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before K, followed by C, followed by S, preceded by G, preceded by E, except...
V_E_G_K_0C2S1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before K, followed by C, followed by S, preceded by G, preceded by E, preceded by V, except...
E_G_K_0C2S1M1M2.rules.append(V_E_G_K_0C2S1M1M2M3)
G_K_0C2S1M1.rules.append(E_G_K_0C2S1M1M2)
K_0C2S1.rules.append(G_K_0C2S1M1)
S_K_0C2S1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before K, followed by C, followed by S, preceded by S, except...
E_S_K_0C2S1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before K, followed by C, followed by S, preceded by S, preceded by E, except...
V_E_S_K_0C2S1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before K, followed by C, followed by S, preceded by S, preceded by E, preceded by V, except...
E_S_K_0C2S1M1M2.rules.append(V_E_S_K_0C2S1M1M2M3)
S_K_0C2S1M1.rules.append(E_S_K_0C2S1M1M2)
K_0C2S1.rules.append(S_K_0C2S1M1)
K_0C2.rules.append(K_0C2S1)
K_0C2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before K, followed by C, followed by I, except...
A_K_0C2I1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before K, followed by C, followed by I, preceded by A, except...
E_A_K_0C2I1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before K, followed by C, followed by I, preceded by A, preceded by E, except...
A_E_A_K_0C2I1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before K, followed by C, followed by I, preceded by A, preceded by E, preceded by A, except...
E_A_K_0C2I1M1M2.rules.append(A_E_A_K_0C2I1M1M2M3)
A_K_0C2I1M1.rules.append(E_A_K_0C2I1M1M2)
K_0C2I1.rules.append(A_K_0C2I1M1)
K_0C2.rules.append(K_0C2I1)
K_0C2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before K, followed by C, followed by T, except...
A_K_0C2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before K, followed by C, followed by T, preceded by A, except...
E_A_K_0C2T1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before K, followed by C, followed by T, preceded by A, preceded by E, except...
T_E_A_K_0C2T1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before K, followed by C, followed by T, preceded by A, preceded by E, preceded by T, except...
E_A_K_0C2T1M1M2.rules.append(T_E_A_K_0C2T1M1M2M3)
A_K_0C2T1M1.rules.append(E_A_K_0C2T1M1M2)
K_0C2T1.rules.append(A_K_0C2T1M1)
K_0C2.rules.append(K_0C2T1)
K_0.rules.append(K_0C2)
K_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before K, followed by A, except...
K_0A2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before K, followed by A, followed by S, except...
A_K_0A2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before K, followed by A, followed by S, preceded by A, except...
A_A_K_0A2S1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before K, followed by A, followed by S, preceded by A, preceded by A, except...
V_A_A_K_0A2S1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before K, followed by A, followed by S, preceded by A, preceded by A, preceded by V, except...
A_A_K_0A2S1M1M2.rules.append(V_A_A_K_0A2S1M1M2M3)
A_K_0A2S1M1.rules.append(A_A_K_0A2S1M1M2)
K_0A2S1.rules.append(A_K_0A2S1M1)
K_0A2.rules.append(K_0A2S1)
K_0.rules.append(K_0A2)
K_0Q2 = rule.Rule(2, "Q", False, -1) # Never cleaves before K, followed by Q, except...
K_0Q2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before K, followed by Q, followed by T, except...
A_K_0Q2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before K, followed by Q, followed by T, preceded by A, except...
S_A_K_0Q2T1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before K, followed by Q, followed by T, preceded by A, preceded by S, except...
I_S_A_K_0Q2T1M1M2M3 = rule.Rule(-3, "I", True, -1) # Always cleaves before K, followed by Q, followed by T, preceded by A, preceded by S, preceded by I, except...
S_A_K_0Q2T1M1M2.rules.append(I_S_A_K_0Q2T1M1M2M3)
A_K_0Q2T1M1.rules.append(S_A_K_0Q2T1M1M2)
K_0Q2T1.rules.append(A_K_0Q2T1M1)
K_0Q2.rules.append(K_0Q2T1)
K_0.rules.append(K_0Q2)
K_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before K, followed by T, except...
K_0T2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before K, followed by T, followed by V, except...
G_K_0T2V1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before K, followed by T, followed by V, preceded by G, except...
H_G_K_0T2V1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before K, followed by T, followed by V, preceded by G, preceded by H, except...
V_H_G_K_0T2V1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before K, followed by T, followed by V, preceded by G, preceded by H, preceded by V, except...
H_G_K_0T2V1M1M2.rules.append(V_H_G_K_0T2V1M1M2M3)
G_K_0T2V1M1.rules.append(H_G_K_0T2V1M1M2)
K_0T2V1.rules.append(G_K_0T2V1M1)
K_0T2.rules.append(K_0T2V1)
K_0.rules.append(K_0T2)
K_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before K, followed by E, except...
K_0E2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before K, followed by E, followed by V, except...
R_K_0E2V1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before K, followed by E, followed by V, preceded by R, except...
I_R_K_0E2V1M1M2 = rule.Rule(-2, "I", False, -1) # Never cleaves before K, followed by E, followed by V, preceded by R, preceded by I, except...
F_I_R_K_0E2V1M1M2M3 = rule.Rule(-3, "F", True, -1) # Always cleaves before K, followed by E, followed by V, preceded by R, preceded by I, preceded by F, except...
I_R_K_0E2V1M1M2.rules.append(F_I_R_K_0E2V1M1M2M3)
R_K_0E2V1M1.rules.append(I_R_K_0E2V1M1M2)
K_0E2V1.rules.append(R_K_0E2V1M1)
K_0E2.rules.append(K_0E2V1)
K_0.rules.append(K_0E2)
K_0H2 = rule.Rule(2, "H", False, -1) # Never cleaves before K, followed by H, except...
K_0H2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before K, followed by H, followed by V, except...
A_K_0H2V1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before K, followed by H, followed by V, preceded by A, except...
A_A_K_0H2V1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before K, followed by H, followed by V, preceded by A, preceded by A, except...
V_A_A_K_0H2V1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before K, followed by H, followed by V, preceded by A, preceded by A, preceded by V, except...
A_A_K_0H2V1M1M2.rules.append(V_A_A_K_0H2V1M1M2M3)
A_K_0H2V1M1.rules.append(A_A_K_0H2V1M1M2)
K_0H2V1.rules.append(A_K_0H2V1M1)
K_0H2.rules.append(K_0H2V1)
K_0.rules.append(K_0H2)
ENZ.append(K_0)

I_0 = rule.Rule(0, "I", False, 0) # Never cleaves before I, except...
I_0C2 = rule.Rule(2, "C", False, -1) # Never cleaves before I, followed by C, except...
I_0C2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before I, followed by C, followed by S, except...
A_I_0C2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before I, followed by C, followed by S, preceded by A, except...
G_A_I_0C2S1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before I, followed by C, followed by S, preceded by A, preceded by G, except...
V_G_A_I_0C2S1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before I, followed by C, followed by S, preceded by A, preceded by G, preceded by V, except...
G_A_I_0C2S1M1M2.rules.append(V_G_A_I_0C2S1M1M2M3)
A_I_0C2S1M1.rules.append(G_A_I_0C2S1M1M2)
I_0C2S1.rules.append(A_I_0C2S1M1)
I_0C2.rules.append(I_0C2S1)
I_0C2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before I, followed by C, followed by T, except...
A_I_0C2T1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before I, followed by C, followed by T, preceded by A, except...
V_A_I_0C2T1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before I, followed by C, followed by T, preceded by A, preceded by V, except...
A_V_A_I_0C2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before I, followed by C, followed by T, preceded by A, preceded by V, preceded by A, except...
V_A_I_0C2T1M1M2.rules.append(A_V_A_I_0C2T1M1M2M3)
A_I_0C2T1M1.rules.append(V_A_I_0C2T1M1M2)
S_A_I_0C2T1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before I, followed by C, followed by T, preceded by A, preceded by S, except...
A_S_A_I_0C2T1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before I, followed by C, followed by T, preceded by A, preceded by S, preceded by A, except...
S_A_I_0C2T1M1M2.rules.append(A_S_A_I_0C2T1M1M2M3)
A_I_0C2T1M1.rules.append(S_A_I_0C2T1M1M2)
I_0C2T1.rules.append(A_I_0C2T1M1)
I_0C2.rules.append(I_0C2T1)
I_0.rules.append(I_0C2)
I_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before I, followed by N, except...
I_0N2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before I, followed by N, followed by G, except...
A_I_0N2G1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before I, followed by N, followed by G, preceded by A, except...
A_A_I_0N2G1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before I, followed by N, followed by G, preceded by A, preceded by A, except...
V_A_A_I_0N2G1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before I, followed by N, followed by G, preceded by A, preceded by A, preceded by V, except...
A_A_I_0N2G1M1M2.rules.append(V_A_A_I_0N2G1M1M2M3)
A_I_0N2G1M1.rules.append(A_A_I_0N2G1M1M2)
I_0N2G1.rules.append(A_I_0N2G1M1)
I_0N2.rules.append(I_0N2G1)
I_0.rules.append(I_0N2)
I_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before I, followed by L, except...
I_0L2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before I, followed by L, followed by S, except...
G_I_0L2S1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before I, followed by L, followed by S, preceded by G, except...
H_G_I_0L2S1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before I, followed by L, followed by S, preceded by G, preceded by H, except...
A_H_G_I_0L2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before I, followed by L, followed by S, preceded by G, preceded by H, preceded by A, except...
H_G_I_0L2S1M1M2.rules.append(A_H_G_I_0L2S1M1M2M3)
G_I_0L2S1M1.rules.append(H_G_I_0L2S1M1M2)
I_0L2S1.rules.append(G_I_0L2S1M1)
A_I_0L2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before I, followed by L, followed by S, preceded by A, except...
F_A_I_0L2S1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before I, followed by L, followed by S, preceded by A, preceded by F, except...
S_F_A_I_0L2S1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before I, followed by L, followed by S, preceded by A, preceded by F, preceded by S, except...
F_A_I_0L2S1M1M2.rules.append(S_F_A_I_0L2S1M1M2M3)
A_I_0L2S1M1.rules.append(F_A_I_0L2S1M1M2)
I_0L2S1.rules.append(A_I_0L2S1M1)
I_0L2.rules.append(I_0L2S1)
I_0.rules.append(I_0L2)
I_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before I, followed by E, except...
I_0E2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before I, followed by E, followed by G, except...
A_I_0E2G1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before I, followed by E, followed by G, preceded by A, except...
S_A_I_0E2G1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before I, followed by E, followed by G, preceded by A, preceded by S, except...
V_S_A_I_0E2G1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before I, followed by E, followed by G, preceded by A, preceded by S, preceded by V, except...
S_A_I_0E2G1M1M2.rules.append(V_S_A_I_0E2G1M1M2M3)
A_I_0E2G1M1.rules.append(S_A_I_0E2G1M1M2)
I_0E2G1.rules.append(A_I_0E2G1M1)
I_0E2.rules.append(I_0E2G1)
I_0.rules.append(I_0E2)
I_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before I, followed by V, except...
I_0V2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before I, followed by V, followed by G, except...
S_I_0V2G1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before I, followed by V, followed by G, preceded by S, except...
Q_S_I_0V2G1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before I, followed by V, followed by G, preceded by S, preceded by Q, except...
V_Q_S_I_0V2G1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before I, followed by V, followed by G, preceded by S, preceded by Q, preceded by V, except...
Q_S_I_0V2G1M1M2.rules.append(V_Q_S_I_0V2G1M1M2M3)
S_I_0V2G1M1.rules.append(Q_S_I_0V2G1M1M2)
H_S_I_0V2G1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before I, followed by V, followed by G, preceded by S, preceded by H, except...
V_H_S_I_0V2G1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before I, followed by V, followed by G, preceded by S, preceded by H, preceded by V, except...
H_S_I_0V2G1M1M2.rules.append(V_H_S_I_0V2G1M1M2M3)
S_I_0V2G1M1.rules.append(H_S_I_0V2G1M1M2)
I_0V2G1.rules.append(S_I_0V2G1M1)
I_0V2.rules.append(I_0V2G1)
I_0V2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before I, followed by V, followed by L, except...
A_I_0V2L1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before I, followed by V, followed by L, preceded by A, except...
F_A_I_0V2L1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before I, followed by V, followed by L, preceded by A, preceded by F, except...
A_F_A_I_0V2L1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before I, followed by V, followed by L, preceded by A, preceded by F, preceded by A, except...
F_A_I_0V2L1M1M2.rules.append(A_F_A_I_0V2L1M1M2M3)
A_I_0V2L1M1.rules.append(F_A_I_0V2L1M1M2)
I_0V2L1.rules.append(A_I_0V2L1M1)
I_0V2.rules.append(I_0V2L1)
I_0V2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before I, followed by V, followed by P, except...
E_I_0V2P1M1 = rule.Rule(-1, "E", False, -1) # Never cleaves before I, followed by V, followed by P, preceded by E, except...
R_E_I_0V2P1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before I, followed by V, followed by P, preceded by E, preceded by R, except...
D_R_E_I_0V2P1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before I, followed by V, followed by P, preceded by E, preceded by R, preceded by D, except...
R_E_I_0V2P1M1M2.rules.append(D_R_E_I_0V2P1M1M2M3)
E_I_0V2P1M1.rules.append(R_E_I_0V2P1M1M2)
I_0V2P1.rules.append(E_I_0V2P1M1)
I_0V2.rules.append(I_0V2P1)
I_0.rules.append(I_0V2)
I_0K2 = rule.Rule(2, "K", False, -1) # Never cleaves before I, followed by K, except...
I_0K2A1 = rule.Rule(1, "A", False, -1) # Never cleaves before I, followed by K, followed by A, except...
G_I_0K2A1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before I, followed by K, followed by A, preceded by G, except...
Q_G_I_0K2A1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before I, followed by K, followed by A, preceded by G, preceded by Q, except...
A_Q_G_I_0K2A1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before I, followed by K, followed by A, preceded by G, preceded by Q, preceded by A, except...
Q_G_I_0K2A1M1M2.rules.append(A_Q_G_I_0K2A1M1M2M3)
G_I_0K2A1M1.rules.append(Q_G_I_0K2A1M1M2)
H_G_I_0K2A1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before I, followed by K, followed by A, preceded by G, preceded by H, except...
A_H_G_I_0K2A1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before I, followed by K, followed by A, preceded by G, preceded by H, preceded by A, except...
H_G_I_0K2A1M1M2.rules.append(A_H_G_I_0K2A1M1M2M3)
G_I_0K2A1M1.rules.append(H_G_I_0K2A1M1M2)
I_0K2A1.rules.append(G_I_0K2A1M1)
I_0K2.rules.append(I_0K2A1)
I_0.rules.append(I_0K2)
I_0Y2 = rule.Rule(2, "Y", False, -1) # Never cleaves before I, followed by Y, except...
I_0Y2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before I, followed by Y, followed by D, except...
G_I_0Y2D1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before I, followed by Y, followed by D, preceded by G, except...
Q_G_I_0Y2D1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before I, followed by Y, followed by D, preceded by G, preceded by Q, except...
I_Q_G_I_0Y2D1M1M2M3 = rule.Rule(-3, "I", True, -1) # Always cleaves before I, followed by Y, followed by D, preceded by G, preceded by Q, preceded by I, except...
Q_G_I_0Y2D1M1M2.rules.append(I_Q_G_I_0Y2D1M1M2M3)
G_I_0Y2D1M1.rules.append(Q_G_I_0Y2D1M1M2)
I_0Y2D1.rules.append(G_I_0Y2D1M1)
I_0Y2.rules.append(I_0Y2D1)
I_0.rules.append(I_0Y2)
I_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before I, followed by P, except...
I_0P2F1 = rule.Rule(1, "F", False, -1) # Never cleaves before I, followed by P, followed by F, except...
N_I_0P2F1M1 = rule.Rule(-1, "N", False, -1) # Never cleaves before I, followed by P, followed by F, preceded by N, except...
N_N_I_0P2F1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before I, followed by P, followed by F, preceded by N, preceded by N, except...
D_N_N_I_0P2F1M1M2M3 = rule.Rule(-3, "D", True, -1) # Always cleaves before I, followed by P, followed by F, preceded by N, preceded by N, preceded by D, except...
N_N_I_0P2F1M1M2.rules.append(D_N_N_I_0P2F1M1M2M3)
N_I_0P2F1M1.rules.append(N_N_I_0P2F1M1M2)
I_0P2F1.rules.append(N_I_0P2F1M1)
I_0P2.rules.append(I_0P2F1)
I_0.rules.append(I_0P2)
ENZ.append(I_0)

N_0 = rule.Rule(0, "N", False, 0) # Never cleaves before N, except...
N_0Y2 = rule.Rule(2, "Y", False, -1) # Never cleaves before N, followed by Y, except...
N_0Y2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before N, followed by Y, followed by V, except...
G_N_0Y2V1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before N, followed by Y, followed by V, preceded by G, except...
V_G_N_0Y2V1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before N, followed by Y, followed by V, preceded by G, preceded by V, except...
A_V_G_N_0Y2V1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before N, followed by Y, followed by V, preceded by G, preceded by V, preceded by A, except...
V_G_N_0Y2V1M1M2.rules.append(A_V_G_N_0Y2V1M1M2M3)
G_N_0Y2V1M1.rules.append(V_G_N_0Y2V1M1M2)
N_0Y2V1.rules.append(G_N_0Y2V1M1)
N_0Y2.rules.append(N_0Y2V1)
N_0.rules.append(N_0Y2)
N_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before N, followed by V, except...
N_0V2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before N, followed by V, followed by I, except...
S_N_0V2I1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before N, followed by V, followed by I, preceded by S, except...
S_S_N_0V2I1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before N, followed by V, followed by I, preceded by S, preceded by S, except...
A_S_S_N_0V2I1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before N, followed by V, followed by I, preceded by S, preceded by S, preceded by A, except...
S_S_N_0V2I1M1M2.rules.append(A_S_S_N_0V2I1M1M2M3)
S_N_0V2I1M1.rules.append(S_S_N_0V2I1M1M2)
N_0V2I1.rules.append(S_N_0V2I1M1)
N_0V2.rules.append(N_0V2I1)
N_0.rules.append(N_0V2)
N_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before N, followed by N, except...
N_0N2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before N, followed by N, followed by P, except...
A_N_0N2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before N, followed by N, followed by P, preceded by A, except...
D_A_N_0N2P1M1M2 = rule.Rule(-2, "D", False, -1) # Never cleaves before N, followed by N, followed by P, preceded by A, preceded by D, except...
G_D_A_N_0N2P1M1M2M3 = rule.Rule(-3, "G", True, -1) # Always cleaves before N, followed by N, followed by P, preceded by A, preceded by D, preceded by G, except...
D_A_N_0N2P1M1M2.rules.append(G_D_A_N_0N2P1M1M2M3)
A_N_0N2P1M1.rules.append(D_A_N_0N2P1M1M2)
N_0N2P1.rules.append(A_N_0N2P1M1)
N_0N2.rules.append(N_0N2P1)
N_0.rules.append(N_0N2)
N_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before N, followed by G, except...
N_0G2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before N, followed by G, followed by S, except...
A_N_0G2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before N, followed by G, followed by S, preceded by A, except...
E_A_N_0G2S1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before N, followed by G, followed by S, preceded by A, preceded by E, except...
C_E_A_N_0G2S1M1M2M3 = rule.Rule(-3, "C", True, -1) # Always cleaves before N, followed by G, followed by S, preceded by A, preceded by E, preceded by C, except...
E_A_N_0G2S1M1M2.rules.append(C_E_A_N_0G2S1M1M2M3)
A_N_0G2S1M1.rules.append(E_A_N_0G2S1M1M2)
N_0G2S1.rules.append(A_N_0G2S1M1)
N_0G2.rules.append(N_0G2S1)
N_0G2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before N, followed by G, followed by P, except...
A_N_0G2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before N, followed by G, followed by P, preceded by A, except...
S_A_N_0G2P1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before N, followed by G, followed by P, preceded by A, preceded by S, except...
V_S_A_N_0G2P1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before N, followed by G, followed by P, preceded by A, preceded by S, preceded by V, except...
S_A_N_0G2P1M1M2.rules.append(V_S_A_N_0G2P1M1M2M3)
A_N_0G2P1M1.rules.append(S_A_N_0G2P1M1M2)
N_0G2P1.rules.append(A_N_0G2P1M1)
N_0G2.rules.append(N_0G2P1)
N_0.rules.append(N_0G2)
N_0W2 = rule.Rule(2, "W", False, -1) # Never cleaves before N, followed by W, except...
N_0W2L1 = rule.Rule(1, "L", False, -1) # Never cleaves before N, followed by W, followed by L, except...
A_N_0W2L1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before N, followed by W, followed by L, preceded by A, except...
A_A_N_0W2L1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before N, followed by W, followed by L, preceded by A, preceded by A, except...
A_A_A_N_0W2L1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before N, followed by W, followed by L, preceded by A, preceded by A, preceded by A, except...
A_A_N_0W2L1M1M2.rules.append(A_A_A_N_0W2L1M1M2M3)
A_N_0W2L1M1.rules.append(A_A_N_0W2L1M1M2)
N_0W2L1.rules.append(A_N_0W2L1M1)
N_0W2.rules.append(N_0W2L1)
N_0.rules.append(N_0W2)
ENZ.append(N_0)

E_0 = rule.Rule(0, "E", False, 0) # Never cleaves before E, except...
E_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before E, followed by N, except...
E_0N2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before E, followed by N, followed by T, except...
L_E_0N2T1M1 = rule.Rule(-1, "L", False, -1) # Never cleaves before E, followed by N, followed by T, preceded by L, except...
Q_L_E_0N2T1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before E, followed by N, followed by T, preceded by L, preceded by Q, except...
H_Q_L_E_0N2T1M1M2M3 = rule.Rule(-3, "H", True, -1) # Always cleaves before E, followed by N, followed by T, preceded by L, preceded by Q, preceded by H, except...
Q_L_E_0N2T1M1M2.rules.append(H_Q_L_E_0N2T1M1M2M3)
L_E_0N2T1M1.rules.append(Q_L_E_0N2T1M1M2)
E_0N2T1.rules.append(L_E_0N2T1M1)
E_0N2.rules.append(E_0N2T1)
E_0.rules.append(E_0N2)
E_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before E, followed by V, except...
E_0V2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before E, followed by V, followed by E, except...
Y_E_0V2E1M1 = rule.Rule(-1, "Y", False, -1) # Never cleaves before E, followed by V, followed by E, preceded by Y, except...
S_Y_E_0V2E1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before E, followed by V, followed by E, preceded by Y, preceded by S, except...
G_S_Y_E_0V2E1M1M2M3 = rule.Rule(-3, "G", True, -1) # Always cleaves before E, followed by V, followed by E, preceded by Y, preceded by S, preceded by G, except...
S_Y_E_0V2E1M1M2.rules.append(G_S_Y_E_0V2E1M1M2M3)
Y_E_0V2E1M1.rules.append(S_Y_E_0V2E1M1M2)
E_0V2E1.rules.append(Y_E_0V2E1M1)
E_0V2.rules.append(E_0V2E1)
E_0V2D1 = rule.Rule(1, "D", False, -1) # Never cleaves before E, followed by V, followed by D, except...
N_E_0V2D1M1 = rule.Rule(-1, "N", False, -1) # Never cleaves before E, followed by V, followed by D, preceded by N, except...
S_N_E_0V2D1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before E, followed by V, followed by D, preceded by N, preceded by S, except...
F_S_N_E_0V2D1M1M2M3 = rule.Rule(-3, "F", True, -1) # Always cleaves before E, followed by V, followed by D, preceded by N, preceded by S, preceded by F, except...
S_N_E_0V2D1M1M2.rules.append(F_S_N_E_0V2D1M1M2M3)
N_E_0V2D1M1.rules.append(S_N_E_0V2D1M1M2)
E_0V2D1.rules.append(N_E_0V2D1M1)
E_0V2.rules.append(E_0V2D1)
E_0.rules.append(E_0V2)
E_0C2 = rule.Rule(2, "C", False, -1) # Never cleaves before E, followed by C, except...
E_0C2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before E, followed by C, followed by Q, except...
A_E_0C2Q1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by C, followed by Q, preceded by A, except...
S_A_E_0C2Q1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before E, followed by C, followed by Q, preceded by A, preceded by S, except...
A_S_A_E_0C2Q1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before E, followed by C, followed by Q, preceded by A, preceded by S, preceded by A, except...
S_A_E_0C2Q1M1M2.rules.append(A_S_A_E_0C2Q1M1M2M3)
C_S_A_E_0C2Q1M1M2M3 = rule.Rule(-3, "C", True, -1) # Always cleaves before E, followed by C, followed by Q, preceded by A, preceded by S, preceded by C, except...
S_A_E_0C2Q1M1M2.rules.append(C_S_A_E_0C2Q1M1M2M3)
A_E_0C2Q1M1.rules.append(S_A_E_0C2Q1M1M2)
V_A_E_0C2Q1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before E, followed by C, followed by Q, preceded by A, preceded by V, except...
A_V_A_E_0C2Q1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before E, followed by C, followed by Q, preceded by A, preceded by V, preceded by A, except...
V_A_E_0C2Q1M1M2.rules.append(A_V_A_E_0C2Q1M1M2M3)
A_E_0C2Q1M1.rules.append(V_A_E_0C2Q1M1M2)
E_0C2Q1.rules.append(A_E_0C2Q1M1)
G_E_0C2Q1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before E, followed by C, followed by Q, preceded by G, except...
Y_G_E_0C2Q1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before E, followed by C, followed by Q, preceded by G, preceded by Y, except...
S_Y_G_E_0C2Q1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before E, followed by C, followed by Q, preceded by G, preceded by Y, preceded by S, except...
Y_G_E_0C2Q1M1M2.rules.append(S_Y_G_E_0C2Q1M1M2M3)
G_E_0C2Q1M1.rules.append(Y_G_E_0C2Q1M1M2)
E_0C2Q1.rules.append(G_E_0C2Q1M1)
E_0C2.rules.append(E_0C2Q1)
E_0.rules.append(E_0C2)
E_0F2 = rule.Rule(2, "F", False, -1) # Never cleaves before E, followed by F, except...
E_0F2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before E, followed by F, followed by V, except...
G_E_0F2V1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before E, followed by F, followed by V, preceded by G, except...
A_G_E_0F2V1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before E, followed by F, followed by V, preceded by G, preceded by A, except...
V_A_G_E_0F2V1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before E, followed by F, followed by V, preceded by G, preceded by A, preceded by V, except...
A_G_E_0F2V1M1M2.rules.append(V_A_G_E_0F2V1M1M2M3)
G_E_0F2V1M1.rules.append(A_G_E_0F2V1M1M2)
E_0F2V1.rules.append(G_E_0F2V1M1)
E_0F2.rules.append(E_0F2V1)
E_0F2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before E, followed by F, followed by P, except...
A_E_0F2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by F, followed by P, preceded by A, except...
H_A_E_0F2P1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before E, followed by F, followed by P, preceded by A, preceded by H, except...
S_H_A_E_0F2P1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before E, followed by F, followed by P, preceded by A, preceded by H, preceded by S, except...
H_A_E_0F2P1M1M2.rules.append(S_H_A_E_0F2P1M1M2M3)
A_E_0F2P1M1.rules.append(H_A_E_0F2P1M1M2)
E_0F2P1.rules.append(A_E_0F2P1M1)
E_0F2.rules.append(E_0F2P1)
E_0.rules.append(E_0F2)
E_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before E, followed by G, except...
E_0G2R1 = rule.Rule(1, "R", False, -1) # Never cleaves before E, followed by G, followed by R, except...
A_E_0G2R1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by G, followed by R, preceded by A, except...
A_A_E_0G2R1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before E, followed by G, followed by R, preceded by A, preceded by A, except...
A_A_A_E_0G2R1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before E, followed by G, followed by R, preceded by A, preceded by A, preceded by A, except...
A_A_E_0G2R1M1M2.rules.append(A_A_A_E_0G2R1M1M2M3)
A_E_0G2R1M1.rules.append(A_A_E_0G2R1M1M2)
E_0G2R1.rules.append(A_E_0G2R1M1)
E_0G2.rules.append(E_0G2R1)
E_0.rules.append(E_0G2)
E_0A2 = rule.Rule(2, "A", False, -1) # Never cleaves before E, followed by A, except...
E_0A2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before E, followed by A, followed by S, except...
A_E_0A2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by A, followed by S, preceded by A, except...
A_A_E_0A2S1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before E, followed by A, followed by S, preceded by A, preceded by A, except...
V_A_A_E_0A2S1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before E, followed by A, followed by S, preceded by A, preceded by A, preceded by V, except...
A_A_E_0A2S1M1M2.rules.append(V_A_A_E_0A2S1M1M2M3)
A_E_0A2S1M1.rules.append(A_A_E_0A2S1M1M2)
E_0A2S1.rules.append(A_E_0A2S1M1)
E_0A2.rules.append(E_0A2S1)
E_0A2C1 = rule.Rule(1, "C", False, -1) # Never cleaves before E, followed by A, followed by C, except...
G_E_0A2C1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before E, followed by A, followed by C, preceded by G, except...
S_G_E_0A2C1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before E, followed by A, followed by C, preceded by G, preceded by S, except...
V_S_G_E_0A2C1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before E, followed by A, followed by C, preceded by G, preceded by S, preceded by V, except...
S_G_E_0A2C1M1M2.rules.append(V_S_G_E_0A2C1M1M2M3)
G_E_0A2C1M1.rules.append(S_G_E_0A2C1M1M2)
E_0A2C1.rules.append(G_E_0A2C1M1)
E_0A2.rules.append(E_0A2C1)
E_0A2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before E, followed by A, followed by E, except...
A_E_0A2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by A, followed by E, preceded by A, except...
R_A_E_0A2E1M1M2 = rule.Rule(-2, "R", False, -1) # Never cleaves before E, followed by A, followed by E, preceded by A, preceded by R, except...
A_R_A_E_0A2E1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before E, followed by A, followed by E, preceded by A, preceded by R, preceded by A, except...
R_A_E_0A2E1M1M2.rules.append(A_R_A_E_0A2E1M1M2M3)
A_E_0A2E1M1.rules.append(R_A_E_0A2E1M1M2)
E_0A2E1.rules.append(A_E_0A2E1M1)
E_0A2.rules.append(E_0A2E1)
E_0.rules.append(E_0A2)
E_0E2 = rule.Rule(2, "E", False, -1) # Never cleaves before E, followed by E, except...
E_0E2K1 = rule.Rule(1, "K", False, -1) # Never cleaves before E, followed by E, followed by K, except...
G_E_0E2K1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before E, followed by E, followed by K, preceded by G, except...
H_G_E_0E2K1M1M2 = rule.Rule(-2, "H", False, -1) # Never cleaves before E, followed by E, followed by K, preceded by G, preceded by H, except...
V_H_G_E_0E2K1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before E, followed by E, followed by K, preceded by G, preceded by H, preceded by V, except...
H_G_E_0E2K1M1M2.rules.append(V_H_G_E_0E2K1M1M2M3)
G_E_0E2K1M1.rules.append(H_G_E_0E2K1M1M2)
E_0E2K1.rules.append(G_E_0E2K1M1)
E_0E2.rules.append(E_0E2K1)
E_0E2T1 = rule.Rule(1, "T", False, -1) # Never cleaves before E, followed by E, followed by T, except...
K_E_0E2T1M1 = rule.Rule(-1, "K", False, -1) # Never cleaves before E, followed by E, followed by T, preceded by K, except...
C_K_E_0E2T1M1M2 = rule.Rule(-2, "C", False, -1) # Never cleaves before E, followed by E, followed by T, preceded by K, preceded by C, except...
K_C_K_E_0E2T1M1M2M3 = rule.Rule(-3, "K", True, -1) # Always cleaves before E, followed by E, followed by T, preceded by K, preceded by C, preceded by K, except...
C_K_E_0E2T1M1M2.rules.append(K_C_K_E_0E2T1M1M2M3)
K_E_0E2T1M1.rules.append(C_K_E_0E2T1M1M2)
E_0E2T1.rules.append(K_E_0E2T1M1)
E_0E2.rules.append(E_0E2T1)
E_0.rules.append(E_0E2)
E_0K2 = rule.Rule(2, "K", False, -1) # Never cleaves before E, followed by K, except...
E_0K2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before E, followed by K, followed by E, except...
R_E_0K2E1M1 = rule.Rule(-1, "R", False, -1) # Never cleaves before E, followed by K, followed by E, preceded by R, except...
I_R_E_0K2E1M1M2 = rule.Rule(-2, "I", False, -1) # Never cleaves before E, followed by K, followed by E, preceded by R, preceded by I, except...
K_I_R_E_0K2E1M1M2M3 = rule.Rule(-3, "K", True, -1) # Always cleaves before E, followed by K, followed by E, preceded by R, preceded by I, preceded by K, except...
I_R_E_0K2E1M1M2.rules.append(K_I_R_E_0K2E1M1M2M3)
R_E_0K2E1M1.rules.append(I_R_E_0K2E1M1M2)
E_0K2E1.rules.append(R_E_0K2E1M1)
E_0K2.rules.append(E_0K2E1)
E_0.rules.append(E_0K2)
E_0H2 = rule.Rule(2, "H", False, -1) # Never cleaves before E, followed by H, except...
E_0H2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before E, followed by H, followed by N, except...
A_E_0H2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by H, followed by N, preceded by A, except...
K_A_E_0H2N1M1M2 = rule.Rule(-2, "K", False, -1) # Never cleaves before E, followed by H, followed by N, preceded by A, preceded by K, except...
V_K_A_E_0H2N1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before E, followed by H, followed by N, preceded by A, preceded by K, preceded by V, except...
K_A_E_0H2N1M1M2.rules.append(V_K_A_E_0H2N1M1M2M3)
A_E_0H2N1M1.rules.append(K_A_E_0H2N1M1M2)
E_0H2N1.rules.append(A_E_0H2N1M1)
E_0H2.rules.append(E_0H2N1)
E_0.rules.append(E_0H2)
E_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before E, followed by P, except...
E_0P2F1 = rule.Rule(1, "F", False, -1) # Never cleaves before E, followed by P, followed by F, except...
F_E_0P2F1M1 = rule.Rule(-1, "F", False, -1) # Never cleaves before E, followed by P, followed by F, preceded by F, except...
V_F_E_0P2F1M1M2 = rule.Rule(-2, "V", False, -1) # Never cleaves before E, followed by P, followed by F, preceded by F, preceded by V, except...
A_V_F_E_0P2F1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before E, followed by P, followed by F, preceded by F, preceded by V, preceded by A, except...
V_F_E_0P2F1M1M2.rules.append(A_V_F_E_0P2F1M1M2M3)
F_E_0P2F1M1.rules.append(V_F_E_0P2F1M1M2)
E_0P2F1.rules.append(F_E_0P2F1M1)
E_0P2.rules.append(E_0P2F1)
E_0.rules.append(E_0P2)
E_0D2 = rule.Rule(2, "D", False, -1) # Never cleaves before E, followed by D, except...
E_0D2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before E, followed by D, followed by G, except...
V_E_0D2G1M1 = rule.Rule(-1, "V", False, -1) # Never cleaves before E, followed by D, followed by G, preceded by V, except...
A_V_E_0D2G1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before E, followed by D, followed by G, preceded by V, preceded by A, except...
P_A_V_E_0D2G1M1M2M3 = rule.Rule(-3, "P", True, -1) # Always cleaves before E, followed by D, followed by G, preceded by V, preceded by A, preceded by P, except...
A_V_E_0D2G1M1M2.rules.append(P_A_V_E_0D2G1M1M2M3)
V_E_0D2G1M1.rules.append(A_V_E_0D2G1M1M2)
E_0D2G1.rules.append(V_E_0D2G1M1)
E_0D2.rules.append(E_0D2G1)
E_0.rules.append(E_0D2)
E_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before E, followed by T, except...
E_0T2V1 = rule.Rule(1, "V", False, -1) # Never cleaves before E, followed by T, followed by V, except...
A_E_0T2V1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before E, followed by T, followed by V, preceded by A, except...
A_A_E_0T2V1M1M2 = rule.Rule(-2, "A", False, -1) # Never cleaves before E, followed by T, followed by V, preceded by A, preceded by A, except...
V_A_A_E_0T2V1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before E, followed by T, followed by V, preceded by A, preceded by A, preceded by V, except...
A_A_E_0T2V1M1M2.rules.append(V_A_A_E_0T2V1M1M2M3)
A_E_0T2V1M1.rules.append(A_A_E_0T2V1M1M2)
E_0T2V1.rules.append(A_E_0T2V1M1)
E_0T2.rules.append(E_0T2V1)
E_0.rules.append(E_0T2)
ENZ.append(E_0)

C_0 = rule.Rule(0, "C", False, 0) # Never cleaves before C, except...
C_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before C, followed by G, except...
C_0G2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before C, followed by G, followed by I, except...
A_C_0G2I1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before C, followed by G, followed by I, preceded by A, except...
E_A_C_0G2I1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before C, followed by G, followed by I, preceded by A, preceded by E, except...
I_E_A_C_0G2I1M1M2M3 = rule.Rule(-3, "I", True, -1) # Always cleaves before C, followed by G, followed by I, preceded by A, preceded by E, preceded by I, except...
E_A_C_0G2I1M1M2.rules.append(I_E_A_C_0G2I1M1M2M3)
A_C_0G2I1M1.rules.append(E_A_C_0G2I1M1M2)
C_0G2I1.rules.append(A_C_0G2I1M1)
C_0G2.rules.append(C_0G2I1)
C_0.rules.append(C_0G2)
C_0Y2 = rule.Rule(2, "Y", False, -1) # Never cleaves before C, followed by Y, except...
C_0Y2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before C, followed by Y, followed by I, except...
A_C_0Y2I1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before C, followed by Y, followed by I, preceded by A, except...
Q_A_C_0Y2I1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before C, followed by Y, followed by I, preceded by A, preceded by Q, except...
A_Q_A_C_0Y2I1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before C, followed by Y, followed by I, preceded by A, preceded by Q, preceded by A, except...
Q_A_C_0Y2I1M1M2.rules.append(A_Q_A_C_0Y2I1M1M2M3)
A_C_0Y2I1M1.rules.append(Q_A_C_0Y2I1M1M2)
C_0Y2I1.rules.append(A_C_0Y2I1M1)
C_0Y2.rules.append(C_0Y2I1)
C_0.rules.append(C_0Y2)
C_0T2 = rule.Rule(2, "T", False, -1) # Never cleaves before C, followed by T, except...
C_0T2C1 = rule.Rule(1, "C", False, -1) # Never cleaves before C, followed by T, followed by C, except...
S_C_0T2C1M1 = rule.Rule(-1, "S", False, -1) # Never cleaves before C, followed by T, followed by C, preceded by S, except...
L_S_C_0T2C1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before C, followed by T, followed by C, preceded by S, preceded by L, except...
V_L_S_C_0T2C1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before C, followed by T, followed by C, preceded by S, preceded by L, preceded by V, except...
L_S_C_0T2C1M1M2.rules.append(V_L_S_C_0T2C1M1M2M3)
S_C_0T2C1M1.rules.append(L_S_C_0T2C1M1M2)
C_0T2C1.rules.append(S_C_0T2C1M1)
C_0T2.rules.append(C_0T2C1)
C_0.rules.append(C_0T2)
ENZ.append(C_0)

H_0 = rule.Rule(0, "H", False, 0) # Never cleaves before H, except...
H_0G2 = rule.Rule(2, "G", False, -1) # Never cleaves before H, followed by G, except...
H_0G2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before H, followed by G, followed by S, except...
A_H_0G2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before H, followed by G, followed by S, preceded by A, except...
F_A_H_0G2S1M1M2 = rule.Rule(-2, "F", False, -1) # Never cleaves before H, followed by G, followed by S, preceded by A, preceded by F, except...
S_F_A_H_0G2S1M1M2M3 = rule.Rule(-3, "S", True, -1) # Always cleaves before H, followed by G, followed by S, preceded by A, preceded by F, preceded by S, except...
F_A_H_0G2S1M1M2.rules.append(S_F_A_H_0G2S1M1M2M3)
A_H_0G2S1M1.rules.append(F_A_H_0G2S1M1M2)
H_0G2S1.rules.append(A_H_0G2S1M1)
H_0G2.rules.append(H_0G2S1)
H_0.rules.append(H_0G2)
H_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before H, followed by V, except...
H_0V2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before H, followed by V, followed by N, except...
A_H_0V2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before H, followed by V, followed by N, preceded by A, except...
S_A_H_0V2N1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before H, followed by V, followed by N, preceded by A, preceded by S, except...
A_S_A_H_0V2N1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before H, followed by V, followed by N, preceded by A, preceded by S, preceded by A, except...
S_A_H_0V2N1M1M2.rules.append(A_S_A_H_0V2N1M1M2M3)
A_H_0V2N1M1.rules.append(S_A_H_0V2N1M1M2)
H_0V2N1.rules.append(A_H_0V2N1M1)
H_0V2.rules.append(H_0V2N1)
H_0.rules.append(H_0V2)
H_0L2 = rule.Rule(2, "L", False, -1) # Never cleaves before H, followed by L, except...
H_0L2P1 = rule.Rule(1, "P", False, -1) # Never cleaves before H, followed by L, followed by P, except...
A_H_0L2P1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before H, followed by L, followed by P, preceded by A, except...
E_A_H_0L2P1M1M2 = rule.Rule(-2, "E", False, -1) # Never cleaves before H, followed by L, followed by P, preceded by A, preceded by E, except...
L_E_A_H_0L2P1M1M2M3 = rule.Rule(-3, "L", True, -1) # Always cleaves before H, followed by L, followed by P, preceded by A, preceded by E, preceded by L, except...
E_A_H_0L2P1M1M2.rules.append(L_E_A_H_0L2P1M1M2M3)
A_H_0L2P1M1.rules.append(E_A_H_0L2P1M1M2)
H_0L2P1.rules.append(A_H_0L2P1M1)
H_0L2.rules.append(H_0L2P1)
H_0.rules.append(H_0L2)
H_0Y2 = rule.Rule(2, "Y", False, -1) # Never cleaves before H, followed by Y, except...
H_0Y2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before H, followed by Y, followed by G, except...
A_H_0Y2G1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before H, followed by Y, followed by G, preceded by A, except...
D_A_H_0Y2G1M1M2 = rule.Rule(-2, "D", False, -1) # Never cleaves before H, followed by Y, followed by G, preceded by A, preceded by D, except...
V_D_A_H_0Y2G1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before H, followed by Y, followed by G, preceded by A, preceded by D, preceded by V, except...
D_A_H_0Y2G1M1M2.rules.append(V_D_A_H_0Y2G1M1M2M3)
A_H_0Y2G1M1.rules.append(D_A_H_0Y2G1M1M2)
H_0Y2G1.rules.append(A_H_0Y2G1M1)
G_H_0Y2G1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before H, followed by Y, followed by G, preceded by G, except...
S_G_H_0Y2G1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before H, followed by Y, followed by G, preceded by G, preceded by S, except...
V_S_G_H_0Y2G1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before H, followed by Y, followed by G, preceded by G, preceded by S, preceded by V, except...
S_G_H_0Y2G1M1M2.rules.append(V_S_G_H_0Y2G1M1M2M3)
G_H_0Y2G1M1.rules.append(S_G_H_0Y2G1M1M2)
H_0Y2G1.rules.append(G_H_0Y2G1M1)
H_0Y2.rules.append(H_0Y2G1)
H_0.rules.append(H_0Y2)
ENZ.append(H_0)

R_0 = rule.Rule(0, "R", False, 0) # Never cleaves before R, except...
R_0Q2 = rule.Rule(2, "Q", False, -1) # Never cleaves before R, followed by Q, except...
R_0Q2Q1 = rule.Rule(1, "Q", False, -1) # Never cleaves before R, followed by Q, followed by Q, except...
A_R_0Q2Q1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before R, followed by Q, followed by Q, preceded by A, except...
S_A_R_0Q2Q1M1M2 = rule.Rule(-2, "S", False, -1) # Never cleaves before R, followed by Q, followed by Q, preceded by A, preceded by S, except...
A_S_A_R_0Q2Q1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before R, followed by Q, followed by Q, preceded by A, preceded by S, preceded by A, except...
S_A_R_0Q2Q1M1M2.rules.append(A_S_A_R_0Q2Q1M1M2M3)
A_R_0Q2Q1M1.rules.append(S_A_R_0Q2Q1M1M2)
R_0Q2Q1.rules.append(A_R_0Q2Q1M1)
R_0Q2.rules.append(R_0Q2Q1)
R_0.rules.append(R_0Q2)
R_0P2 = rule.Rule(2, "P", False, -1) # Never cleaves before R, followed by P, except...
R_0P2I1 = rule.Rule(1, "I", False, -1) # Never cleaves before R, followed by P, followed by I, except...
A_R_0P2I1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before R, followed by P, followed by I, preceded by A, except...
D_A_R_0P2I1M1M2 = rule.Rule(-2, "D", False, -1) # Never cleaves before R, followed by P, followed by I, preceded by A, preceded by D, except...
A_D_A_R_0P2I1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before R, followed by P, followed by I, preceded by A, preceded by D, preceded by A, except...
D_A_R_0P2I1M1M2.rules.append(A_D_A_R_0P2I1M1M2M3)
A_R_0P2I1M1.rules.append(D_A_R_0P2I1M1M2)
R_0P2I1.rules.append(A_R_0P2I1M1)
R_0P2.rules.append(R_0P2I1)
R_0.rules.append(R_0P2)
R_0C2 = rule.Rule(2, "C", False, -1) # Never cleaves before R, followed by C, except...
R_0C2E1 = rule.Rule(1, "E", False, -1) # Never cleaves before R, followed by C, followed by E, except...
A_R_0C2E1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before R, followed by C, followed by E, preceded by A, except...
Q_A_R_0C2E1M1M2 = rule.Rule(-2, "Q", False, -1) # Never cleaves before R, followed by C, followed by E, preceded by A, preceded by Q, except...
V_Q_A_R_0C2E1M1M2M3 = rule.Rule(-3, "V", True, -1) # Always cleaves before R, followed by C, followed by E, preceded by A, preceded by Q, preceded by V, except...
Q_A_R_0C2E1M1M2.rules.append(V_Q_A_R_0C2E1M1M2M3)
A_R_0C2E1M1.rules.append(Q_A_R_0C2E1M1M2)
R_0C2E1.rules.append(A_R_0C2E1M1)
R_0C2.rules.append(R_0C2E1)
R_0.rules.append(R_0C2)
R_0V2 = rule.Rule(2, "V", False, -1) # Never cleaves before R, followed by V, except...
R_0V2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before R, followed by V, followed by N, except...
A_R_0V2N1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before R, followed by V, followed by N, preceded by A, except...
M_A_R_0V2N1M1M2 = rule.Rule(-2, "M", False, -1) # Never cleaves before R, followed by V, followed by N, preceded by A, preceded by M, except...
C_M_A_R_0V2N1M1M2M3 = rule.Rule(-3, "C", True, -1) # Always cleaves before R, followed by V, followed by N, preceded by A, preceded by M, preceded by C, except...
M_A_R_0V2N1M1M2.rules.append(C_M_A_R_0V2N1M1M2M3)
A_R_0V2N1M1.rules.append(M_A_R_0V2N1M1M2)
R_0V2N1.rules.append(A_R_0V2N1M1)
R_0V2.rules.append(R_0V2N1)
R_0.rules.append(R_0V2)
R_0D2 = rule.Rule(2, "D", False, -1) # Never cleaves before R, followed by D, except...
R_0D2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before R, followed by D, followed by S, except...
A_R_0D2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before R, followed by D, followed by S, preceded by A, except...
N_A_R_0D2S1M1M2 = rule.Rule(-2, "N", False, -1) # Never cleaves before R, followed by D, followed by S, preceded by A, preceded by N, except...
G_N_A_R_0D2S1M1M2M3 = rule.Rule(-3, "G", True, -1) # Always cleaves before R, followed by D, followed by S, preceded by A, preceded by N, preceded by G, except...
N_A_R_0D2S1M1M2.rules.append(G_N_A_R_0D2S1M1M2M3)
A_R_0D2S1M1.rules.append(N_A_R_0D2S1M1M2)
R_0D2S1.rules.append(A_R_0D2S1M1)
R_0D2.rules.append(R_0D2S1)
R_0.rules.append(R_0D2)
ENZ.append(R_0)

M_0 = rule.Rule(0, "M", False, 0) # Never cleaves before M, except...
M_0S2 = rule.Rule(2, "S", False, -1) # Never cleaves before M, followed by S, except...
M_0S2S1 = rule.Rule(1, "S", False, -1) # Never cleaves before M, followed by S, followed by S, except...
A_M_0S2S1M1 = rule.Rule(-1, "A", False, -1) # Never cleaves before M, followed by S, followed by S, preceded by A, except...
L_A_M_0S2S1M1M2 = rule.Rule(-2, "L", False, -1) # Never cleaves before M, followed by S, followed by S, preceded by A, preceded by L, except...
A_L_A_M_0S2S1M1M2M3 = rule.Rule(-3, "A", True, -1) # Always cleaves before M, followed by S, followed by S, preceded by A, preceded by L, preceded by A, except...
L_A_M_0S2S1M1M2.rules.append(A_L_A_M_0S2S1M1M2M3)
A_M_0S2S1M1.rules.append(L_A_M_0S2S1M1M2)
M_0S2S1.rules.append(A_M_0S2S1M1)
M_0S2.rules.append(M_0S2S1)
M_0.rules.append(M_0S2)
M_0D2 = rule.Rule(2, "D", False, -1) # Never cleaves before M, followed by D, except...
M_0D2N1 = rule.Rule(1, "N", False, -1) # Never cleaves before M, followed by D, followed by N, except...
W_M_0D2N1M1 = rule.Rule(-1, "W", False, -1) # Never cleaves before M, followed by D, followed by N, preceded by W, except...
G_W_M_0D2N1M1M2 = rule.Rule(-2, "G", False, -1) # Never cleaves before M, followed by D, followed by N, preceded by W, preceded by G, except...
K_G_W_M_0D2N1M1M2M3 = rule.Rule(-3, "K", True, -1) # Always cleaves before M, followed by D, followed by N, preceded by W, preceded by G, preceded by K, except...
G_W_M_0D2N1M1M2.rules.append(K_G_W_M_0D2N1M1M2M3)
W_M_0D2N1M1.rules.append(G_W_M_0D2N1M1M2)
M_0D2N1.rules.append(W_M_0D2N1M1)
M_0D2.rules.append(M_0D2N1)
M_0.rules.append(M_0D2)
ENZ.append(M_0)

W_0 = rule.Rule(0, "W", False, 0) # Never cleaves before W, except...
W_0N2 = rule.Rule(2, "N", False, -1) # Never cleaves before W, followed by N, except...
W_0N2G1 = rule.Rule(1, "G", False, -1) # Never cleaves before W, followed by N, followed by G, except...
G_W_0N2G1M1 = rule.Rule(-1, "G", False, -1) # Never cleaves before W, followed by N, followed by G, preceded by G, except...
Y_G_W_0N2G1M1M2 = rule.Rule(-2, "Y", False, -1) # Never cleaves before W, followed by N, followed by G, preceded by G, preceded by Y, except...
T_Y_G_W_0N2G1M1M2M3 = rule.Rule(-3, "T", True, -1) # Always cleaves before W, followed by N, followed by G, preceded by G, preceded by Y, preceded by T, except...
Y_G_W_0N2G1M1M2.rules.append(T_Y_G_W_0N2G1M1M2M3)
G_W_0N2G1M1.rules.append(Y_G_W_0N2G1M1M2)
W_0N2G1.rules.append(G_W_0N2G1M1)
W_0N2.rules.append(W_0N2G1)
W_0.rules.append(W_0N2)
ENZ.append(W_0)

ENZYME = enzyme.Enzyme(CPT_ENZ, "signalase_21kDa_component", ENZ, 0)
# Add it to available enzymes
AVAILABLE_ENZYMES_USER.append(ENZYME)
CPT_ENZ += 1
